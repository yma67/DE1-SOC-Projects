
//campus.mcgill.ca/emf/CPE/yma67/My Documents/G16_Lab4n/VGA.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 30 0c 00 00 34 0c 00 00 38 0c 00 00     @...0...4...8...
  30:	3c 0c 00 00 2c 0c 00 00 40 0c 00 00 44 0c 00 00     <...,...@...D...

Disassembly of section .text:

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb0002bb 	bl	bc8 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000d2c 	.word	0x00000d2c

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00001168 	.word	0x00001168

00000124 <__cs3_heap_start_ptr>:
 124:	00001190 	.word	0x00001190

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00001170 	.word	0x00001170
 170:	00001173 	.word	0x00001173
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00001170 	.word	0x00001170
 1bc:	00001170 	.word	0x00001170
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00001170 	.word	0x00001170
 200:	00000000 	.word	0x00000000
 204:	00000cd0 	.word	0x00000cd0

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000cd0 	.word	0x00000cd0
 250:	00001174 	.word	0x00001174
 254:	00000d30 	.word	0x00000d30
 258:	00000000 	.word	0x00000000

0000025c <VGA_clear_charbuff_ASM>:
		.global VGA_write_char_ASM
		.global VGA_write_byte_ASM
		.global VGA_draw_point_ASM

VGA_clear_charbuff_ASM:
		PUSH {R0, R1, R2, R3, R4, R5}
 25c:	e92d003f 	push	{r0, r1, r2, r3, r4, r5}
		LDR R5, =CHAR_BASE
 260:	e3a054c9 	mov	r5, #-922746880	; 0xc9000000
		MOV R1, #59
 264:	e3a0103b 	mov	r1, #59	; 0x3b
		MOV R4, #0
 268:	e3a04000 	mov	r4, #0

0000026c <MAP_R>:
MAP_R: 	MOV R2, #79
 26c:	e3a0204f 	mov	r2, #79	; 0x4f

00000270 <MAP_C>:
MAP_C:	ADD R3, R2, R1, LSL #7
 270:	e0823381 	add	r3, r2, r1, lsl #7
		ADD R3, R5, R3
 274:	e0853003 	add	r3, r5, r3
		STRB R4, [R3]
 278:	e5c34000 	strb	r4, [r3]
		SUBS R2, R2, #1
 27c:	e2522001 	subs	r2, r2, #1
		BGE MAP_C
 280:	aafffffa 	bge	270 <MAP_C>
		SUBS R1, R1, #1
 284:	e2511001 	subs	r1, r1, #1
		BGE MAP_R
 288:	aafffff7 	bge	26c <MAP_R>
		POP {R0, R1, R2, R3, R4, R5}
 28c:	e8bd003f 	pop	{r0, r1, r2, r3, r4, r5}
		BX LR
 290:	e12fff1e 	bx	lr

00000294 <VGA_clear_pixelbuff_ASM>:

VGA_clear_pixelbuff_ASM:
		PUSH {R0, R1, R2, R3, R4, R5}
 294:	e92d003f 	push	{r0, r1, r2, r3, r4, r5}
		LDR R5, =PIXEL_BASE
 298:	e3a05332 	mov	r5, #-939524096	; 0xc8000000
		MOV R1, #239
 29c:	e3a010ef 	mov	r1, #239	; 0xef
		MOV R4, #0
 2a0:	e3a04000 	mov	r4, #0

000002a4 <MAP_RP>:
MAP_RP: MOVW R2, #319
 2a4:	e300213f 	movw	r2, #319	; 0x13f

000002a8 <MAP_CP>:
MAP_CP:	ADD R3, R2, R1, LSL #9
 2a8:	e0823481 	add	r3, r2, r1, lsl #9
		ADD R3, R5, R3, LSL #1
 2ac:	e0853083 	add	r3, r5, r3, lsl #1
		STRH R4, [R3]
 2b0:	e1c340b0 	strh	r4, [r3]
		SUBS R2, R2, #1
 2b4:	e2522001 	subs	r2, r2, #1
		BGE MAP_CP
 2b8:	aafffffa 	bge	2a8 <MAP_CP>
		SUBS R1, R1, #1
 2bc:	e2511001 	subs	r1, r1, #1
		BGE MAP_RP
 2c0:	aafffff7 	bge	2a4 <MAP_RP>
		POP {R0, R1, R2, R3, R4, R5}
 2c4:	e8bd003f 	pop	{r0, r1, r2, r3, r4, r5}
		BX LR
 2c8:	e12fff1e 	bx	lr

000002cc <VGA_write_char_ASM>:

VGA_write_char_ASM:
		PUSH {R3, R4, R5}
 2cc:	e92d0038 	push	{r3, r4, r5}
		CMP R0, #0
 2d0:	e3500000 	cmp	r0, #0
		BLT FWC
 2d4:	ba00000a 	blt	304 <FWC>
		CMP R1, #0
 2d8:	e3510000 	cmp	r1, #0
		BLT FWC
 2dc:	ba000008 	blt	304 <FWC>
		CMP R0, #79
 2e0:	e350004f 	cmp	r0, #79	; 0x4f
		BGT FWC
 2e4:	ca000006 	bgt	304 <FWC>
		CMP R1, #59
 2e8:	e351003b 	cmp	r1, #59	; 0x3b
		BGT FWC
 2ec:	ca000004 	bgt	304 <FWC>
		LDR R5, =CHAR_BASE
 2f0:	e3a054c9 	mov	r5, #-922746880	; 0xc9000000
		ADD R3, R0, R1, LSL #7
 2f4:	e0803381 	add	r3, r0, r1, lsl #7
		ADD R3, R3, R5
 2f8:	e0833005 	add	r3, r3, r5
		STRB R2, [R3]
 2fc:	e5c32000 	strb	r2, [r3]
		POP {R3, R4, R5}
 300:	e8bd0038 	pop	{r3, r4, r5}

00000304 <FWC>:
FWC: 	BX LR
 304:	e12fff1e 	bx	lr

00000308 <VGA_write_byte_ASM>:

VGA_write_byte_ASM:
		PUSH {R3, R4, R5, R6, R7, R8, R9}
 308:	e92d03f8 	push	{r3, r4, r5, r6, r7, r8, r9}
		CMP R0, #0
 30c:	e3500000 	cmp	r0, #0
		BLT FWB
 310:	ba000011 	blt	35c <FWB>
		CMP R1, #0
 314:	e3510000 	cmp	r1, #0
		BLT FWB
 318:	ba00000f 	blt	35c <FWB>
		CMP R0, #78
 31c:	e350004e 	cmp	r0, #78	; 0x4e
		BGT FWB
 320:	ca00000d 	bgt	35c <FWB>
		CMP R1, #59
 324:	e351003b 	cmp	r1, #59	; 0x3b
		BGT FWB
 328:	ca00000b 	bgt	35c <FWB>
		LDR R5, =CHAR_BASE
 32c:	e3a054c9 	mov	r5, #-922746880	; 0xc9000000
		AND R4, R2, #0xF
 330:	e202400f 	and	r4, r2, #15
		AND R7, R2, #0xF0
 334:	e20270f0 	and	r7, r2, #240	; 0xf0
		LSR R9, R7, #4
 338:	e1a09227 	lsr	r9, r7, #4
		LDR R8, =LOOKUP
 33c:	e59f806c 	ldr	r8, [pc, #108]	; 3b0 <LOOKUP+0x10>
		LDRB R6, [R8, R4]
 340:	e7d86004 	ldrb	r6, [r8, r4]
		LDRB R7, [R8, R9]
 344:	e7d87009 	ldrb	r7, [r8, r9]
		ADD R3, R0, R1, LSL #7
 348:	e0803381 	add	r3, r0, r1, lsl #7
		ADD R3, R3, R5
 34c:	e0833005 	add	r3, r3, r5
		STRB R7, [R3]
 350:	e5c37000 	strb	r7, [r3]
		STRB R6, [R3, #1]
 354:	e5c36001 	strb	r6, [r3, #1]
		POP {R3, R4, R5, R6, R7, R8, R9}
 358:	e8bd03f8 	pop	{r3, r4, r5, r6, r7, r8, r9}

0000035c <FWB>:
FWB: 	BX LR
 35c:	e12fff1e 	bx	lr

00000360 <VGA_draw_point_ASM>:

VGA_draw_point_ASM:
		PUSH {R3, R4, R5, R6}
 360:	e92d0078 	push	{r3, r4, r5, r6}
		CMP R0, #0
 364:	e3500000 	cmp	r0, #0
		BLT FWP
 368:	ba00000b 	blt	39c <FWP>
		CMP R1, #0
 36c:	e3510000 	cmp	r1, #0
		BLT FWP
 370:	ba000009 	blt	39c <FWP>
		MOVW R6, #319
 374:	e300613f 	movw	r6, #319	; 0x13f
		CMP R0, R6
 378:	e1500006 	cmp	r0, r6
		BGT FWP
 37c:	ca000006 	bgt	39c <FWP>
		CMP R1, #239
 380:	e35100ef 	cmp	r1, #239	; 0xef
		BGT FWP
 384:	ca000004 	bgt	39c <FWP>
		LDR R5, =PIXEL_BASE
 388:	e3a05332 	mov	r5, #-939524096	; 0xc8000000
		ADD R3, R0, R1, LSL #9
 38c:	e0803481 	add	r3, r0, r1, lsl #9
		ADD R3, R5, R3, LSL #1
 390:	e0853083 	add	r3, r5, r3, lsl #1
		STRH R2, [R3]
 394:	e1c320b0 	strh	r2, [r3]
		POP {R3, R4, R5, R6}
 398:	e8bd0078 	pop	{r3, r4, r5, r6}

0000039c <FWP>:
FWP: 	BX LR
 39c:	e12fff1e 	bx	lr

000003a0 <LOOKUP>:
 3a0:	33323130 	.word	0x33323130
 3a4:	37363534 	.word	0x37363534
 3a8:	42413938 	.word	0x42413938
 3ac:	46454443 	.word	0x46454443
		BGT FWB
		LDR R5, =CHAR_BASE
		AND R4, R2, #0xF
		AND R7, R2, #0xF0
		LSR R9, R7, #4
		LDR R8, =LOOKUP
 3b0:	000003a0 	.word	0x000003a0

000003b4 <write_audio_LR_ASM>:
		.equ RIGHT_BASE, 0xFF20304C
		.global write_audio_LR_ASM

write_audio_LR_ASM: 
		
		PUSH {R1, R2}
 3b4:	e92d0006 	push	{r1, r2}
		LDR R1, =FIFO_BASE
 3b8:	e59f1038 	ldr	r1, [pc, #56]	; 3f8 <FIN+0xc>
		LDR R2, [R1]
 3bc:	e5912000 	ldr	r2, [r1]
		TST R2, #0xFF000000
 3c0:	e31204ff 	tst	r2, #-16777216	; 0xff000000
		BEQ FIN
 3c4:	0a000008 	beq	3ec <FIN>
		TST R2, #0xFF0000
 3c8:	e31208ff 	tst	r2, #16711680	; 0xff0000
		BEQ FIN
 3cc:	0a000006 	beq	3ec <FIN>
		LDR R1, =LEFT_BASE
 3d0:	e59f1024 	ldr	r1, [pc, #36]	; 3fc <FIN+0x10>
		STR R0, [R1]
 3d4:	e5810000 	str	r0, [r1]
		LDR R1, =RIGHT_BASE
 3d8:	e59f1020 	ldr	r1, [pc, #32]	; 400 <FIN+0x14>
		STR R0, [R1]
 3dc:	e5810000 	str	r0, [r1]
		MOV R0, #1
 3e0:	e3a00001 	mov	r0, #1
		POP {R1, R2}
 3e4:	e8bd0006 	pop	{r1, r2}
		BX LR
 3e8:	e12fff1e 	bx	lr

000003ec <FIN>:
FIN:	MOV R0, #0
 3ec:	e3a00000 	mov	r0, #0
		POP {R1, R2}
 3f0:	e8bd0006 	pop	{r1, r2}
		BX LR
 3f4:	e12fff1e 	bx	lr
		.global write_audio_LR_ASM

write_audio_LR_ASM: 
		
		PUSH {R1, R2}
		LDR R1, =FIFO_BASE
 3f8:	ff203044 	.word	0xff203044
		LDR R2, [R1]
		TST R2, #0xFF000000
		BEQ FIN
		TST R2, #0xFF0000
		BEQ FIN
		LDR R1, =LEFT_BASE
 3fc:	ff203048 	.word	0xff203048
		STR R0, [R1]
		LDR R1, =RIGHT_BASE
 400:	ff20304c 	.word	0xff20304c

00000404 <read_PS2_data_ASM>:
		.text
		.equ KB_BASE, 0xFF200100
		.global read_PS2_data_ASM

read_PS2_data_ASM: 
		PUSH {R1, R2, R3}
 404:	e92d000e 	push	{r1, r2, r3}
		LDR R1, =KB_BASE
 408:	e59f1020 	ldr	r1, [pc, #32]	; 430 <FIN+0xc>
		LDR R2, [R1]
 40c:	e5912000 	ldr	r2, [r1]
		AND R1, R2, #0x8000
 410:	e2021902 	and	r1, r2, #32768	; 0x8000
		LSRS R3, R1, #15
 414:	e1b037a1 	lsrs	r3, r1, #15
		BEQ FIN
 418:	0a000001 	beq	424 <FIN>
		ANDS R1, R2, #0xFF
 41c:	e21210ff 	ands	r1, r2, #255	; 0xff
		STRB R1, [R0]
 420:	e5c01000 	strb	r1, [r0]

00000424 <FIN>:
FIN:	MOV R0, R3
 424:	e1a00003 	mov	r0, r3
		POP {R1, R2, R3}
 428:	e8bd000e 	pop	{r1, r2, r3}
		BX LR
 42c:	e12fff1e 	bx	lr
		.equ KB_BASE, 0xFF200100
		.global read_PS2_data_ASM

read_PS2_data_ASM: 
		PUSH {R1, R2, R3}
		LDR R1, =KB_BASE
 430:	ff200100 	.word	0xff200100

00000434 <read_PB_data_ASM>:
        .global PB_clear_edgecp_ASM
        .global enable_PB_INT_ASM
        .global disable_PB_INT_ASM

read_PB_data_ASM:
        PUSH {R1, LR}
 434:	e92d4002 	push	{r1, lr}
        LDR R1, =PB_DATA
 438:	e59f10a8 	ldr	r1, [pc, #168]	; 4e8 <disable_PB_INT_ASM+0x1c>
		LDR R0, [R1]
 43c:	e5910000 	ldr	r0, [r1]
        POP {R1, LR}
 440:	e8bd4002 	pop	{r1, lr}
        BX LR
 444:	e12fff1e 	bx	lr

00000448 <PB_data_is_pressed_ASM>:

PB_data_is_pressed_ASM: 
        PUSH {R1, R2}
 448:	e92d0006 	push	{r1, r2}
        LDR R1, =PB_DATA
 44c:	e59f1094 	ldr	r1, [pc, #148]	; 4e8 <disable_PB_INT_ASM+0x1c>
        LDR R2, [R1]
 450:	e5912000 	ldr	r2, [r1]
		TST R2, R0
 454:	e1120000 	tst	r2, r0
		MOVEQ R0, #0
 458:	03a00000 	moveq	r0, #0
		MOVNE R0, #1
 45c:	13a00001 	movne	r0, #1
        POP {R1, R2}
 460:	e8bd0006 	pop	{r1, r2}
        BX LR
 464:	e12fff1e 	bx	lr

00000468 <read_PB_edgecap_ASM>:

read_PB_edgecap_ASM: 
        PUSH {R1, LR}
 468:	e92d4002 	push	{r1, lr}
        LDR R1, =PB_EDGE_CAP
 46c:	e59f1078 	ldr	r1, [pc, #120]	; 4ec <disable_PB_INT_ASM+0x20>
        LDR R0, [R1]
 470:	e5910000 	ldr	r0, [r1]
        POP {R1, LR}
 474:	e8bd4002 	pop	{r1, lr}
        BX LR
 478:	e12fff1e 	bx	lr

0000047c <PB_edgecap_is_pressed_ASM>:

PB_edgecap_is_pressed_ASM: 
        PUSH {R1, R2}
 47c:	e92d0006 	push	{r1, r2}
        LDR R1, =PB_EDGE_CAP
 480:	e59f1064 	ldr	r1, [pc, #100]	; 4ec <disable_PB_INT_ASM+0x20>
        LDR R2, [R1]
 484:	e5912000 	ldr	r2, [r1]
		TST R2, R0
 488:	e1120000 	tst	r2, r0
		MOVEQ R0, #0
 48c:	03a00000 	moveq	r0, #0
		MOVNE R0, #1
 490:	13a00001 	movne	r0, #1
        POP {R1, R2}
 494:	e8bd0006 	pop	{r1, r2}
        BX LR
 498:	e12fff1e 	bx	lr

0000049c <PB_clear_edgecp_ASM>:

PB_clear_edgecp_ASM: 
        PUSH {R1}
 49c:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
        LDR R1, =PB_EDGE_CAP
 4a0:	e59f1044 	ldr	r1, [pc, #68]	; 4ec <disable_PB_INT_ASM+0x20>
        STR R0, [R1]
 4a4:	e5810000 	str	r0, [r1]
        POP {R1}
 4a8:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
        BX LR
 4ac:	e12fff1e 	bx	lr

000004b0 <enable_PB_INT_ASM>:

enable_PB_INT_ASM: 
        PUSH {R1, R2}
 4b0:	e92d0006 	push	{r1, r2}
        LDR R1, =PB_INTR_MSK
 4b4:	e59f1034 	ldr	r1, [pc, #52]	; 4f0 <disable_PB_INT_ASM+0x24>
        LDR R2, [R1]
 4b8:	e5912000 	ldr	r2, [r1]
        ORR R2, R2, R0
 4bc:	e1822000 	orr	r2, r2, r0
        STR R2, [R1]
 4c0:	e5812000 	str	r2, [r1]
        POP {R1, R2}
 4c4:	e8bd0006 	pop	{r1, r2}
        BX LR
 4c8:	e12fff1e 	bx	lr

000004cc <disable_PB_INT_ASM>:

disable_PB_INT_ASM:
        PUSH {R1, R2}
 4cc:	e92d0006 	push	{r1, r2}
        LDR R1, =PB_INTR_MSK
 4d0:	e59f1018 	ldr	r1, [pc, #24]	; 4f0 <disable_PB_INT_ASM+0x24>
        LDR R2, [R1]
 4d4:	e5912000 	ldr	r2, [r1]
        BIC R2, R2, R0
 4d8:	e1c22000 	bic	r2, r2, r0
        STR R2, [R1]
 4dc:	e5812000 	str	r2, [r1]
        POP {R1, R2}
 4e0:	e8bd0006 	pop	{r1, r2}
        BX LR
 4e4:	e12fff1e 	bx	lr
        .global enable_PB_INT_ASM
        .global disable_PB_INT_ASM

read_PB_data_ASM:
        PUSH {R1, LR}
        LDR R1, =PB_DATA
 4e8:	ff200050 	.word	0xff200050
        POP {R1, R2}
        BX LR

read_PB_edgecap_ASM: 
        PUSH {R1, LR}
        LDR R1, =PB_EDGE_CAP
 4ec:	ff20005c 	.word	0xff20005c
        POP {R1}
        BX LR

enable_PB_INT_ASM: 
        PUSH {R1, R2}
        LDR R1, =PB_INTR_MSK
 4f0:	ff200058 	.word	0xff200058

000004f4 <read_slider_switches_ASM>:
    .text
    .equ SW_BASE, 0xFF200040
    .global read_slider_switches_ASM

read_slider_switches_ASM: 
    LDR R1, =SW_BASE
 4f4:	e59f1004 	ldr	r1, [pc, #4]	; 500 <read_slider_switches_ASM+0xc>
    LDR R0, [R1]
 4f8:	e5910000 	ldr	r0, [r1]
    BX LR
 4fc:	e12fff1e 	bx	lr
    .text
    .equ SW_BASE, 0xFF200040
    .global read_slider_switches_ASM

read_slider_switches_ASM: 
    LDR R1, =SW_BASE
 500:	ff200040 	.word	0xff200040

00000504 <test_char>:
	make_square_wave(100, 48000);

	return 0;
}

void test_char() {
 504:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}

	int x, y;

	char c = 0;

	for (y = 0; y <= 59; y++) for (x = 0; x <= 79; x++) VGA_write_char_ASM(x, y, c++);
 508:	e3a05000 	mov	r5, #0

void test_char() {

	int x, y;

	char c = 0;
 50c:	e1a06005 	mov	r6, r5
	make_square_wave(100, 48000);

	return 0;
}

void test_char() {
 510:	e1a07005 	mov	r7, r5
 514:	ea00000c 	b	54c <test_char+0x48>
 518:	e0862004 	add	r2, r6, r4

	int x, y;

	char c = 0;

	for (y = 0; y <= 59; y++) for (x = 0; x <= 79; x++) VGA_write_char_ASM(x, y, c++);
 51c:	e1a00004 	mov	r0, r4
 520:	e1a01005 	mov	r1, r5
 524:	e6ef2072 	uxtb	r2, r2
 528:	ebffff67 	bl	2cc <VGA_write_char_ASM>
 52c:	e2844001 	add	r4, r4, #1
 530:	e3540050 	cmp	r4, #80	; 0x50
 534:	1afffff7 	bne	518 <test_char+0x14>
 538:	e2866050 	add	r6, r6, #80	; 0x50
 53c:	e6ef6076 	uxtb	r6, r6
 540:	e2855001 	add	r5, r5, #1
 544:	e355003c 	cmp	r5, #60	; 0x3c
 548:	08bd80f8 	popeq	{r3, r4, r5, r6, r7, pc}
	make_square_wave(100, 48000);

	return 0;
}

void test_char() {
 54c:	e1a04007 	mov	r4, r7
 550:	eafffff0 	b	518 <test_char+0x14>

00000554 <test_byte>:

	for (y = 0; y <= 59; y++) for (x = 0; x <= 79; x++) VGA_write_char_ASM(x, y, c++);

}

void test_byte() {
 554:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}

	int x, y;

	char c = 0;

	for (y = 0; y <= 59; y++) for (x = 0; x <= 79; x = x + 3) VGA_write_byte_ASM(x, y, c++);
 558:	e3a06000 	mov	r6, #0

void test_byte() {

	int x, y;

	char c = 0;
 55c:	e1a07006 	mov	r7, r6

	for (y = 0; y <= 59; y++) for (x = 0; x <= 79; x++) VGA_write_char_ASM(x, y, c++);

}

void test_byte() {
 560:	e1a08006 	mov	r8, r6
 564:	ea00000d 	b	5a0 <test_byte+0x4c>

	int x, y;

	char c = 0;

	for (y = 0; y <= 59; y++) for (x = 0; x <= 79; x = x + 3) VGA_write_byte_ASM(x, y, c++);
 568:	e2825001 	add	r5, r2, #1
 56c:	e6ef5075 	uxtb	r5, r5
 570:	e1a00004 	mov	r0, r4
 574:	e1a01006 	mov	r1, r6
 578:	ebffff62 	bl	308 <VGA_write_byte_ASM>
 57c:	e2844003 	add	r4, r4, #3
 580:	e1a02005 	mov	r2, r5
 584:	e3540051 	cmp	r4, #81	; 0x51
 588:	1afffff6 	bne	568 <test_byte+0x14>
 58c:	e287701b 	add	r7, r7, #27
 590:	e6ef7077 	uxtb	r7, r7
 594:	e2866001 	add	r6, r6, #1
 598:	e3570054 	cmp	r7, #84	; 0x54
 59c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}

	for (y = 0; y <= 59; y++) for (x = 0; x <= 79; x++) VGA_write_char_ASM(x, y, c++);

}

void test_byte() {
 5a0:	e1a02007 	mov	r2, r7
 5a4:	e1a04008 	mov	r4, r8
 5a8:	eaffffee 	b	568 <test_byte+0x14>

000005ac <test_pixel>:

	for (y = 0; y <= 59; y++) for (x = 0; x <= 79; x = x + 3) VGA_write_byte_ASM(x, y, c++);

}

void test_pixel() {
 5ac:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}

	int x, y;

	unsigned short colour = 0;

	for (y = 0; y <= 239; y++) for (x = 0; x <= 319; x++) VGA_draw_point_ASM(x, y, colour++);
 5b0:	e3a06000 	mov	r6, #0

void test_pixel() {

	int x, y;

	unsigned short colour = 0;
 5b4:	e1a05006 	mov	r5, r6

	for (y = 0; y <= 59; y++) for (x = 0; x <= 79; x = x + 3) VGA_write_byte_ASM(x, y, c++);

}

void test_pixel() {
 5b8:	e1a07006 	mov	r7, r6
 5bc:	ea00000c 	b	5f4 <test_pixel+0x48>
 5c0:	e0852004 	add	r2, r5, r4

	int x, y;

	unsigned short colour = 0;

	for (y = 0; y <= 239; y++) for (x = 0; x <= 319; x++) VGA_draw_point_ASM(x, y, colour++);
 5c4:	e1a00004 	mov	r0, r4
 5c8:	e1a01006 	mov	r1, r6
 5cc:	e6bf2072 	sxth	r2, r2
 5d0:	ebffff62 	bl	360 <VGA_draw_point_ASM>
 5d4:	e2844001 	add	r4, r4, #1
 5d8:	e3540d05 	cmp	r4, #320	; 0x140
 5dc:	1afffff7 	bne	5c0 <test_pixel+0x14>
 5e0:	e2855d05 	add	r5, r5, #320	; 0x140
 5e4:	e6ff5075 	uxth	r5, r5
 5e8:	e2866001 	add	r6, r6, #1
 5ec:	e3550b0b 	cmp	r5, #11264	; 0x2c00
 5f0:	08bd80f8 	popeq	{r3, r4, r5, r6, r7, pc}

	for (y = 0; y <= 59; y++) for (x = 0; x <= 79; x = x + 3) VGA_write_byte_ASM(x, y, c++);

}

void test_pixel() {
 5f4:	e1a04007 	mov	r4, r7
 5f8:	eafffff0 	b	5c0 <test_pixel+0x14>

000005fc <test_vga>:

	for (y = 0; y <= 239; y++) for (x = 0; x <= 319; x++) VGA_draw_point_ASM(x, y, colour++);

}

void test_vga() {
 5fc:	e92d4010 	push	{r4, lr}

	// VGA Method starts here

	VGA_clear_charbuff_ASM();
 600:	ebffff15 	bl	25c <VGA_clear_charbuff_ASM>

	VGA_clear_pixelbuff_ASM();
 604:	ebffff22 	bl	294 <VGA_clear_pixelbuff_ASM>

	while(1) {

		int btn = read_PB_data_ASM();
 608:	ebffff89 	bl	434 <read_PB_data_ASM>
 60c:	e1a04000 	mov	r4, r0

		if ((btn & PB0) && (read_slider_switches_ASM() != 0)) test_byte();
 610:	e3100001 	tst	r0, #1
 614:	0a000005 	beq	630 <test_vga+0x34>
 618:	ebffffb5 	bl	4f4 <read_slider_switches_ASM>
 61c:	e3500000 	cmp	r0, #0
 620:	0a00000c 	beq	658 <test_vga+0x5c>
 624:	ebffffca 	bl	554 <test_byte>
 628:	ea00000a 	b	658 <test_vga+0x5c>

		if ((btn & PB0) && (read_slider_switches_ASM() == 0)) test_char();
 62c:	ebffffb4 	bl	504 <test_char>

		if (btn & PB1) test_pixel();
 630:	e3140002 	tst	r4, #2
 634:	0a000000 	beq	63c <test_vga+0x40>
 638:	ebffffdb 	bl	5ac <test_pixel>

		if (btn & PB2) VGA_clear_charbuff_ASM();
 63c:	e3140004 	tst	r4, #4
 640:	0a000000 	beq	648 <test_vga+0x4c>
 644:	ebffff04 	bl	25c <VGA_clear_charbuff_ASM>

		if (btn & PB3) VGA_clear_pixelbuff_ASM();
 648:	e3140008 	tst	r4, #8
 64c:	0affffed 	beq	608 <test_vga+0xc>
 650:	ebffff0f 	bl	294 <VGA_clear_pixelbuff_ASM>
 654:	eaffffeb 	b	608 <test_vga+0xc>

		int btn = read_PB_data_ASM();

		if ((btn & PB0) && (read_slider_switches_ASM() != 0)) test_byte();

		if ((btn & PB0) && (read_slider_switches_ASM() == 0)) test_char();
 658:	ebffffa5 	bl	4f4 <read_slider_switches_ASM>
 65c:	e3500000 	cmp	r0, #0
 660:	1afffff2 	bne	630 <test_vga+0x34>
 664:	eafffff0 	b	62c <test_vga+0x30>

00000668 <test_keyboard>:

	}

}

void test_keyboard() {
 668:	e92d40f0 	push	{r4, r5, r6, r7, lr}
 66c:	e24dd00c 	sub	sp, sp, #12

	int x = 0, y = 0;

	char read;

	VGA_clear_charbuff_ASM();
 670:	ebfffef9 	bl	25c <VGA_clear_charbuff_ASM>

	VGA_clear_pixelbuff_ASM();
 674:	ebffff06 	bl	294 <VGA_clear_pixelbuff_ASM>

void test_keyboard() {

	// Keyboard Method starts here

	int x = 0, y = 0;
 678:	e3a05000 	mov	r5, #0
 67c:	e1a04005 	mov	r4, r5

			VGA_write_byte_ASM(x, y, read);

			if (x == 78) y = (y + 1) % 60;

			x = (x + 3) % 81;
 680:	e30b60fd 	movw	r6, #45309	; 0xb0fd
 684:	e3416948 	movt	r6, #6472	; 0x1948

		if (read_PS2_data_ASM(&read)) {

			VGA_write_byte_ASM(x, y, read);

			if (x == 78) y = (y + 1) % 60;
 688:	e3087889 	movw	r7, #34953	; 0x8889
 68c:	e3487888 	movt	r7, #34952	; 0x8888

	VGA_clear_pixelbuff_ASM();

	while(1) {

		if (read_PS2_data_ASM(&read)) {
 690:	e28d0007 	add	r0, sp, #7
 694:	ebffff5a 	bl	404 <read_PS2_data_ASM>
 698:	e3500000 	cmp	r0, #0
 69c:	0afffffb 	beq	690 <test_keyboard+0x28>

			VGA_write_byte_ASM(x, y, read);
 6a0:	e1a00004 	mov	r0, r4
 6a4:	e1a01005 	mov	r1, r5
 6a8:	e5dd2007 	ldrb	r2, [sp, #7]
 6ac:	ebffff15 	bl	308 <VGA_write_byte_ASM>

			if (x == 78) y = (y + 1) % 60;
 6b0:	e354004e 	cmp	r4, #78	; 0x4e
 6b4:	1a000006 	bne	6d4 <test_keyboard+0x6c>
 6b8:	e2853001 	add	r3, r5, #1
 6bc:	e0c52397 	smull	r2, r5, r7, r3
 6c0:	e0855003 	add	r5, r5, r3
 6c4:	e1a02fc3 	asr	r2, r3, #31
 6c8:	e06252c5 	rsb	r5, r2, r5, asr #5
 6cc:	e0655205 	rsb	r5, r5, r5, lsl #4
 6d0:	e0435105 	sub	r5, r3, r5, lsl #2

			x = (x + 3) % 81;
 6d4:	e2843003 	add	r3, r4, #3
 6d8:	e0c42396 	smull	r2, r4, r6, r3
 6dc:	e1a02fc3 	asr	r2, r3, #31
 6e0:	e06241c4 	rsb	r4, r2, r4, asr #3
 6e4:	e0844184 	add	r4, r4, r4, lsl #3
 6e8:	e0844184 	add	r4, r4, r4, lsl #3
 6ec:	e0644003 	rsb	r4, r4, r3
 6f0:	eaffffe6 	b	690 <test_keyboard+0x28>

000006f4 <make_square_wave>:

	}

}

void make_square_wave(int freq, int sample_rate) {
 6f4:	e92d4070 	push	{r4, r5, r6, lr}
 6f8:	e1a03000 	mov	r3, r0

	// Wave Method starts here

	int count = 0, full_wave = (sample_rate / freq), half_wave = full_wave >> 1;
 6fc:	e1a00001 	mov	r0, r1
 700:	e1a01003 	mov	r1, r3
 704:	eb000011 	bl	750 <__aeabi_idiv>
 708:	e1a06000 	mov	r6, r0
 70c:	e1a050c0 	asr	r5, r0, #1
 710:	e3a04000 	mov	r4, #0

	while (1) if (write_audio_LR_ASM((count < half_wave) ? 0x00FFFFFF : 0x00000000)) count = (count + 1) % (full_wave);
 714:	e1540005 	cmp	r4, r5
 718:	a3a00000 	movge	r0, #0
 71c:	b3e004ff 	mvnlt	r0, #-16777216	; 0xff000000
 720:	ebffff23 	bl	3b4 <write_audio_LR_ASM>
 724:	e3500000 	cmp	r0, #0
 728:	0afffff9 	beq	714 <make_square_wave+0x20>
 72c:	e2840001 	add	r0, r4, #1
 730:	e1a01006 	mov	r1, r6
 734:	eb00004f 	bl	878 <__aeabi_idivmod>
 738:	e1a04001 	mov	r4, r1
 73c:	eafffff4 	b	714 <make_square_wave+0x20>

00000740 <main>:

void test_keyboard();

void make_square_wave(int freq, int sample_rate);

int main() {
 740:	e92d4008 	push	{r3, lr}

	// Uncomment Below for Task B:
	// test_keyboard();

	// Uncomment Below for Task C:
	make_square_wave(100, 48000);
 744:	e3a00064 	mov	r0, #100	; 0x64
 748:	e30b1b80 	movw	r1, #48000	; 0xbb80
 74c:	ebffffe8 	bl	6f4 <make_square_wave>

00000750 <__aeabi_idiv>:
 750:	e3510000 	cmp	r1, #0
 754:	0a000043 	beq	868 <.divsi3_skip_div0_test+0x110>

00000758 <.divsi3_skip_div0_test>:
 758:	e020c001 	eor	r12, r0, r1
 75c:	42611000 	rsbmi	r1, r1, #0
 760:	e2512001 	subs	r2, r1, #1
 764:	0a000027 	beq	808 <.divsi3_skip_div0_test+0xb0>
 768:	e1b03000 	movs	r3, r0
 76c:	42603000 	rsbmi	r3, r0, #0
 770:	e1530001 	cmp	r3, r1
 774:	9a000026 	bls	814 <.divsi3_skip_div0_test+0xbc>
 778:	e1110002 	tst	r1, r2
 77c:	0a000028 	beq	824 <.divsi3_skip_div0_test+0xcc>
 780:	e311020e 	tst	r1, #-536870912	; 0xe0000000
 784:	01a01181 	lsleq	r1, r1, #3
 788:	03a02008 	moveq	r2, #8
 78c:	13a02001 	movne	r2, #1
 790:	e3510201 	cmp	r1, #268435456	; 0x10000000
 794:	31510003 	cmpcc	r1, r3
 798:	31a01201 	lslcc	r1, r1, #4
 79c:	31a02202 	lslcc	r2, r2, #4
 7a0:	3afffffa 	bcc	790 <.divsi3_skip_div0_test+0x38>
 7a4:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
 7a8:	31510003 	cmpcc	r1, r3
 7ac:	31a01081 	lslcc	r1, r1, #1
 7b0:	31a02082 	lslcc	r2, r2, #1
 7b4:	3afffffa 	bcc	7a4 <.divsi3_skip_div0_test+0x4c>
 7b8:	e3a00000 	mov	r0, #0
 7bc:	e1530001 	cmp	r3, r1
 7c0:	20433001 	subcs	r3, r3, r1
 7c4:	21800002 	orrcs	r0, r0, r2
 7c8:	e15300a1 	cmp	r3, r1, lsr #1
 7cc:	204330a1 	subcs	r3, r3, r1, lsr #1
 7d0:	218000a2 	orrcs	r0, r0, r2, lsr #1
 7d4:	e1530121 	cmp	r3, r1, lsr #2
 7d8:	20433121 	subcs	r3, r3, r1, lsr #2
 7dc:	21800122 	orrcs	r0, r0, r2, lsr #2
 7e0:	e15301a1 	cmp	r3, r1, lsr #3
 7e4:	204331a1 	subcs	r3, r3, r1, lsr #3
 7e8:	218001a2 	orrcs	r0, r0, r2, lsr #3
 7ec:	e3530000 	cmp	r3, #0
 7f0:	11b02222 	lsrsne	r2, r2, #4
 7f4:	11a01221 	lsrne	r1, r1, #4
 7f8:	1affffef 	bne	7bc <.divsi3_skip_div0_test+0x64>
 7fc:	e35c0000 	cmp	r12, #0
 800:	42600000 	rsbmi	r0, r0, #0
 804:	e12fff1e 	bx	lr
 808:	e13c0000 	teq	r12, r0
 80c:	42600000 	rsbmi	r0, r0, #0
 810:	e12fff1e 	bx	lr
 814:	33a00000 	movcc	r0, #0
 818:	01a00fcc 	asreq	r0, r12, #31
 81c:	03800001 	orreq	r0, r0, #1
 820:	e12fff1e 	bx	lr
 824:	e3510801 	cmp	r1, #65536	; 0x10000
 828:	21a01821 	lsrcs	r1, r1, #16
 82c:	23a02010 	movcs	r2, #16
 830:	33a02000 	movcc	r2, #0
 834:	e3510c01 	cmp	r1, #256	; 0x100
 838:	21a01421 	lsrcs	r1, r1, #8
 83c:	22822008 	addcs	r2, r2, #8
 840:	e3510010 	cmp	r1, #16
 844:	21a01221 	lsrcs	r1, r1, #4
 848:	22822004 	addcs	r2, r2, #4
 84c:	e3510004 	cmp	r1, #4
 850:	82822003 	addhi	r2, r2, #3
 854:	908220a1 	addls	r2, r2, r1, lsr #1
 858:	e35c0000 	cmp	r12, #0
 85c:	e1a00233 	lsr	r0, r3, r2
 860:	42600000 	rsbmi	r0, r0, #0
 864:	e12fff1e 	bx	lr
 868:	e3500000 	cmp	r0, #0
 86c:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
 870:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
 874:	ea000007 	b	898 <__aeabi_idiv0>

00000878 <__aeabi_idivmod>:
 878:	e3510000 	cmp	r1, #0
 87c:	0afffff9 	beq	868 <.divsi3_skip_div0_test+0x110>
 880:	e92d4003 	push	{r0, r1, lr}
 884:	ebffffb3 	bl	758 <.divsi3_skip_div0_test>
 888:	e8bd4006 	pop	{r1, r2, lr}
 88c:	e0030092 	mul	r3, r2, r0
 890:	e0411003 	sub	r1, r1, r3
 894:	e12fff1e 	bx	lr

00000898 <__aeabi_idiv0>:
 898:	e12fff1e 	bx	lr

0000089c <atexit>:
 89c:	e1a01000 	mov	r1, r0
 8a0:	e3a00000 	mov	r0, #0
 8a4:	e92d4008 	push	{r3, lr}
 8a8:	e1a02000 	mov	r2, r0
 8ac:	e1a03000 	mov	r3, r0
 8b0:	eb00000e 	bl	8f0 <__register_exitproc>
 8b4:	e8bd4008 	pop	{r3, lr}
 8b8:	e12fff1e 	bx	lr

000008bc <exit>:
 8bc:	e92d4008 	push	{r3, lr}
 8c0:	e3a01000 	mov	r1, #0
 8c4:	e1a04000 	mov	r4, r0
 8c8:	eb000045 	bl	9e4 <__call_exitprocs>
 8cc:	e59f3018 	ldr	r3, [pc, #24]	; 8ec <exit+0x30>
 8d0:	e5930000 	ldr	r0, [r3]
 8d4:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 8d8:	e3530000 	cmp	r3, #0
 8dc:	11a0e00f 	movne	lr, pc
 8e0:	112fff13 	bxne	r3
 8e4:	e1a00004 	mov	r0, r4
 8e8:	eb0000c9 	bl	c14 <_exit>
 8ec:	00000cd4 	.word	0x00000cd4

000008f0 <__register_exitproc>:
 8f0:	e59fc0e4 	ldr	r12, [pc, #228]	; 9dc <__register_exitproc+0xec>
 8f4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 8f8:	e59c4000 	ldr	r4, [r12]
 8fc:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 900:	e35c0000 	cmp	r12, #0
 904:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 908:	e59c5004 	ldr	r5, [r12, #4]
 90c:	0584c148 	streq	r12, [r4, #328]	; 0x148
 910:	e355001f 	cmp	r5, #31
 914:	e24dd010 	sub	sp, sp, #16
 918:	e1a06000 	mov	r6, r0
 91c:	da000015 	ble	978 <__register_exitproc+0x88>
 920:	e59f00b8 	ldr	r0, [pc, #184]	; 9e0 <__register_exitproc+0xf0>
 924:	e3500000 	cmp	r0, #0
 928:	1a000001 	bne	934 <__register_exitproc+0x44>
 92c:	e3e00000 	mvn	r0, #0
 930:	ea000018 	b	998 <__register_exitproc+0xa8>
 934:	e3a00e19 	mov	r0, #400	; 0x190
 938:	e58d100c 	str	r1, [sp, #12]
 93c:	e58d2008 	str	r2, [sp, #8]
 940:	e58d3004 	str	r3, [sp, #4]
 944:	e320f000 	nop	{0}
 948:	e250c000 	subs	r12, r0, #0
 94c:	e59d100c 	ldr	r1, [sp, #12]
 950:	e59d2008 	ldr	r2, [sp, #8]
 954:	e59d3004 	ldr	r3, [sp, #4]
 958:	0afffff3 	beq	92c <__register_exitproc+0x3c>
 95c:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 960:	e3a00000 	mov	r0, #0
 964:	e58c0004 	str	r0, [r12, #4]
 968:	e58c5000 	str	r5, [r12]
 96c:	e584c148 	str	r12, [r4, #328]	; 0x148
 970:	e58c0188 	str	r0, [r12, #392]	; 0x188
 974:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 978:	e3560000 	cmp	r6, #0
 97c:	e59c4004 	ldr	r4, [r12, #4]
 980:	1a000007 	bne	9a4 <__register_exitproc+0xb4>
 984:	e2843002 	add	r3, r4, #2
 988:	e2844001 	add	r4, r4, #1
 98c:	e78c1103 	str	r1, [r12, r3, lsl #2]
 990:	e58c4004 	str	r4, [r12, #4]
 994:	e3a00000 	mov	r0, #0
 998:	e28dd010 	add	sp, sp, #16
 99c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 9a0:	e12fff1e 	bx	lr
 9a4:	e3a00001 	mov	r0, #1
 9a8:	e1a00410 	lsl	r0, r0, r4
 9ac:	e08c8104 	add	r8, r12, r4, lsl #2
 9b0:	e3560002 	cmp	r6, #2
 9b4:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 9b8:	e5883108 	str	r3, [r8, #264]	; 0x108
 9bc:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 9c0:	e1877000 	orr	r7, r7, r0
 9c4:	01830000 	orreq	r0, r3, r0
 9c8:	e1a05008 	mov	r5, r8
 9cc:	e5882088 	str	r2, [r8, #136]	; 0x88
 9d0:	e58c7188 	str	r7, [r12, #392]	; 0x188
 9d4:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 9d8:	eaffffe9 	b	984 <__register_exitproc+0x94>
 9dc:	00000cd4 	.word	0x00000cd4
 9e0:	00000000 	.word	0x00000000

000009e4 <__call_exitprocs>:
 9e4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 9e8:	e59f3168 	ldr	r3, [pc, #360]	; b58 <__call_exitprocs+0x174>
 9ec:	e5933000 	ldr	r3, [r3]
 9f0:	e24dd014 	sub	sp, sp, #20
 9f4:	e58d3004 	str	r3, [sp, #4]
 9f8:	e2833f52 	add	r3, r3, #328	; 0x148
 9fc:	e58d0008 	str	r0, [sp, #8]
 a00:	e58d300c 	str	r3, [sp, #12]
 a04:	e1a07001 	mov	r7, r1
 a08:	e3a08001 	mov	r8, #1
 a0c:	e59d3004 	ldr	r3, [sp, #4]
 a10:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 a14:	e3560000 	cmp	r6, #0
 a18:	e59db00c 	ldr	r11, [sp, #12]
 a1c:	0a000033 	beq	af0 <__call_exitprocs+0x10c>
 a20:	e5965004 	ldr	r5, [r6, #4]
 a24:	e2554001 	subs	r4, r5, #1
 a28:	5286a088 	addpl	r10, r6, #136	; 0x88
 a2c:	5285501f 	addpl	r5, r5, #31
 a30:	508a5105 	addpl	r5, r10, r5, lsl #2
 a34:	5a000007 	bpl	a58 <__call_exitprocs+0x74>
 a38:	ea000029 	b	ae4 <__call_exitprocs+0x100>
 a3c:	e5953000 	ldr	r3, [r5]
 a40:	e1530007 	cmp	r3, r7
 a44:	0a000005 	beq	a60 <__call_exitprocs+0x7c>
 a48:	e2444001 	sub	r4, r4, #1
 a4c:	e3740001 	cmn	r4, #1
 a50:	e2455004 	sub	r5, r5, #4
 a54:	0a000022 	beq	ae4 <__call_exitprocs+0x100>
 a58:	e3570000 	cmp	r7, #0
 a5c:	1afffff6 	bne	a3c <__call_exitprocs+0x58>
 a60:	e5963004 	ldr	r3, [r6, #4]
 a64:	e06a2005 	rsb	r2, r10, r5
 a68:	e2433001 	sub	r3, r3, #1
 a6c:	e0862002 	add	r2, r6, r2
 a70:	e1530004 	cmp	r3, r4
 a74:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 a78:	13a01000 	movne	r1, #0
 a7c:	05864004 	streq	r4, [r6, #4]
 a80:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 a84:	e3530000 	cmp	r3, #0
 a88:	0affffee 	beq	a48 <__call_exitprocs+0x64>
 a8c:	e1a02418 	lsl	r2, r8, r4
 a90:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 a94:	e1120001 	tst	r2, r1
 a98:	e5969004 	ldr	r9, [r6, #4]
 a9c:	0a000016 	beq	afc <__call_exitprocs+0x118>
 aa0:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 aa4:	e1120001 	tst	r2, r1
 aa8:	1a000016 	bne	b08 <__call_exitprocs+0x124>
 aac:	e59d0008 	ldr	r0, [sp, #8]
 ab0:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 ab4:	e1a0e00f 	mov	lr, pc
 ab8:	e12fff13 	bx	r3
 abc:	e5963004 	ldr	r3, [r6, #4]
 ac0:	e1530009 	cmp	r3, r9
 ac4:	1affffd0 	bne	a0c <__call_exitprocs+0x28>
 ac8:	e59b3000 	ldr	r3, [r11]
 acc:	e1530006 	cmp	r3, r6
 ad0:	1affffcd 	bne	a0c <__call_exitprocs+0x28>
 ad4:	e2444001 	sub	r4, r4, #1
 ad8:	e3740001 	cmn	r4, #1
 adc:	e2455004 	sub	r5, r5, #4
 ae0:	1affffdc 	bne	a58 <__call_exitprocs+0x74>
 ae4:	e59f1070 	ldr	r1, [pc, #112]	; b5c <__call_exitprocs+0x178>
 ae8:	e3510000 	cmp	r1, #0
 aec:	1a000009 	bne	b18 <__call_exitprocs+0x134>
 af0:	e28dd014 	add	sp, sp, #20
 af4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 af8:	e12fff1e 	bx	lr
 afc:	e1a0e00f 	mov	lr, pc
 b00:	e12fff13 	bx	r3
 b04:	eaffffec 	b	abc <__call_exitprocs+0xd8>
 b08:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 b0c:	e1a0e00f 	mov	lr, pc
 b10:	e12fff13 	bx	r3
 b14:	eaffffe8 	b	abc <__call_exitprocs+0xd8>
 b18:	e5963004 	ldr	r3, [r6, #4]
 b1c:	e3530000 	cmp	r3, #0
 b20:	e5963000 	ldr	r3, [r6]
 b24:	1a000008 	bne	b4c <__call_exitprocs+0x168>
 b28:	e3530000 	cmp	r3, #0
 b2c:	0a000006 	beq	b4c <__call_exitprocs+0x168>
 b30:	e1a00006 	mov	r0, r6
 b34:	e58b3000 	str	r3, [r11]
 b38:	e320f000 	nop	{0}
 b3c:	e59b6000 	ldr	r6, [r11]
 b40:	e3560000 	cmp	r6, #0
 b44:	1affffb5 	bne	a20 <__call_exitprocs+0x3c>
 b48:	eaffffe8 	b	af0 <__call_exitprocs+0x10c>
 b4c:	e1a0b006 	mov	r11, r6
 b50:	e1a06003 	mov	r6, r3
 b54:	eafffff9 	b	b40 <__call_exitprocs+0x15c>
 b58:	00000cd4 	.word	0x00000cd4
 b5c:	00000000 	.word	0x00000000

00000b60 <register_fini>:
 b60:	e92d4008 	push	{r3, lr}
 b64:	e59f3010 	ldr	r3, [pc, #16]	; b7c <register_fini+0x1c>
 b68:	e3530000 	cmp	r3, #0
 b6c:	159f000c 	ldrne	r0, [pc, #12]	; b80 <register_fini+0x20>
 b70:	1bffff49 	blne	89c <atexit>
 b74:	e8bd4008 	pop	{r3, lr}
 b78:	e12fff1e 	bx	lr
 b7c:	00000cfc 	.word	0x00000cfc
 b80:	00000b84 	.word	0x00000b84

00000b84 <__libc_fini_array>:
 b84:	e92d4038 	push	{r3, r4, r5, lr}
 b88:	e59f5030 	ldr	r5, [pc, #48]	; bc0 <__libc_fini_array+0x3c>
 b8c:	e59f4030 	ldr	r4, [pc, #48]	; bc4 <__libc_fini_array+0x40>
 b90:	e0654004 	rsb	r4, r5, r4
 b94:	e1b04144 	asrs	r4, r4, #2
 b98:	10855104 	addne	r5, r5, r4, lsl #2
 b9c:	0a000004 	beq	bb4 <__libc_fini_array+0x30>
 ba0:	e5353004 	ldr	r3, [r5, #-4]!
 ba4:	e1a0e00f 	mov	lr, pc
 ba8:	e12fff13 	bx	r3
 bac:	e2544001 	subs	r4, r4, #1
 bb0:	1afffffa 	bne	ba0 <__libc_fini_array+0x1c>
 bb4:	eb000050 	bl	cfc <__libc_fini>
 bb8:	e8bd4038 	pop	{r3, r4, r5, lr}
 bbc:	e12fff1e 	bx	lr
 bc0:	00000d14 	.word	0x00000d14
 bc4:	00000d18 	.word	0x00000d18

00000bc8 <__cs3_premain>:
 bc8:	e92d4008 	push	{r3, lr}
 bcc:	eb00001d 	bl	c48 <__libc_init_array>
 bd0:	e59f3030 	ldr	r3, [pc, #48]	; c08 <__cs3_premain+0x40>
 bd4:	e3530000 	cmp	r3, #0
 bd8:	15930000 	ldrne	r0, [r3]
 bdc:	01a00003 	moveq	r0, r3
 be0:	e59f3024 	ldr	r3, [pc, #36]	; c0c <__cs3_premain+0x44>
 be4:	e3530000 	cmp	r3, #0
 be8:	15931000 	ldrne	r1, [r3]
 bec:	01a01003 	moveq	r1, r3
 bf0:	e3a02000 	mov	r2, #0
 bf4:	ebfffed1 	bl	740 <main>
 bf8:	e59f3010 	ldr	r3, [pc, #16]	; c10 <__cs3_premain+0x48>
 bfc:	e3530000 	cmp	r3, #0
 c00:	1bffff2d 	blne	8bc <exit>
 c04:	eafffffe 	b	c04 <__cs3_premain+0x3c>
	...
 c10:	000008bc 	.word	0x000008bc

00000c14 <_exit>:
 c14:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 c18:	e3a00018 	mov	r0, #24
 c1c:	e59f1004 	ldr	r1, [pc, #4]	; c28 <_exit+0x14>
 c20:	ef123456 	svc	0x00123456
 c24:	eafffffe 	b	c24 <_exit+0x10>
 c28:	00020026 	.word	0x00020026

00000c2c <__cs3_isr_interrupt>:
 c2c:	eafffffe 	b	c2c <__cs3_isr_interrupt>

00000c30 <__cs3_isr_undef>:
 c30:	eafffffe 	b	c30 <__cs3_isr_undef>

00000c34 <__cs3_isr_swi>:
 c34:	eafffffe 	b	c34 <__cs3_isr_swi>

00000c38 <__cs3_isr_pabort>:
 c38:	eafffffe 	b	c38 <__cs3_isr_pabort>

00000c3c <__cs3_isr_dabort>:
 c3c:	eafffffe 	b	c3c <__cs3_isr_dabort>

00000c40 <__cs3_isr_irq>:
 c40:	eafffffe 	b	c40 <__cs3_isr_irq>

00000c44 <__cs3_isr_fiq>:
 c44:	eafffffe 	b	c44 <__cs3_isr_fiq>

00000c48 <__libc_init_array>:
 c48:	e92d4070 	push	{r4, r5, r6, lr}
 c4c:	e59f506c 	ldr	r5, [pc, #108]	; cc0 <__libc_init_array+0x78>
 c50:	e59f606c 	ldr	r6, [pc, #108]	; cc4 <__libc_init_array+0x7c>
 c54:	e0656006 	rsb	r6, r5, r6
 c58:	e1b06146 	asrs	r6, r6, #2
 c5c:	12455004 	subne	r5, r5, #4
 c60:	13a04000 	movne	r4, #0
 c64:	0a000005 	beq	c80 <__libc_init_array+0x38>
 c68:	e5b53004 	ldr	r3, [r5, #4]!
 c6c:	e2844001 	add	r4, r4, #1
 c70:	e1a0e00f 	mov	lr, pc
 c74:	e12fff13 	bx	r3
 c78:	e1560004 	cmp	r6, r4
 c7c:	1afffff9 	bne	c68 <__libc_init_array+0x20>
 c80:	e59f5040 	ldr	r5, [pc, #64]	; cc8 <__libc_init_array+0x80>
 c84:	e59f6040 	ldr	r6, [pc, #64]	; ccc <__libc_init_array+0x84>
 c88:	e0656006 	rsb	r6, r5, r6
 c8c:	eb000012 	bl	cdc <_init>
 c90:	e1b06146 	asrs	r6, r6, #2
 c94:	12455004 	subne	r5, r5, #4
 c98:	13a04000 	movne	r4, #0
 c9c:	0a000005 	beq	cb8 <__libc_init_array+0x70>
 ca0:	e5b53004 	ldr	r3, [r5, #4]!
 ca4:	e2844001 	add	r4, r4, #1
 ca8:	e1a0e00f 	mov	lr, pc
 cac:	e12fff13 	bx	r3
 cb0:	e1560004 	cmp	r6, r4
 cb4:	1afffff9 	bne	ca0 <__libc_init_array+0x58>
 cb8:	e8bd4070 	pop	{r4, r5, r6, lr}
 cbc:	e12fff1e 	bx	lr
 cc0:	00000cf4 	.word	0x00000cf4
 cc4:	00000cf4 	.word	0x00000cf4
 cc8:	00000cf4 	.word	0x00000cf4
 ccc:	00000cfc 	.word	0x00000cfc

Disassembly of section .rodata:

00000cd4 <_global_impure_ptr>:
 cd4:	00000d40 00000043                       @...C...

00000cdc <_init>:
 cdc:	e1a0c00d 	mov	r12, sp
 ce0:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 ce4:	e24cb004 	sub	r11, r12, #4
 ce8:	e24bd028 	sub	sp, r11, #40	; 0x28
 cec:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 cf0:	e12fff1e 	bx	lr

00000cf4 <__init_array_start>:
 cf4:	00000b60 	.word	0x00000b60

00000cf8 <__frame_dummy_init_array_entry>:
 cf8:	00000208                                ....

00000cfc <__libc_fini>:
 cfc:	e1a0c00d 	mov	r12, sp
 d00:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 d04:	e24cb004 	sub	r11, r12, #4
 d08:	e24bd028 	sub	sp, r11, #40	; 0x28
 d0c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 d10:	e12fff1e 	bx	lr

00000d14 <__fini_array_start>:
 d14:	000001c4 	.word	0x000001c4

00000d18 <__cs3_regions>:
 d18:	00000000 	.word	0x00000000
 d1c:	00000040 	.word	0x00000040
 d20:	00000040 	.word	0x00000040
 d24:	00001130 	.word	0x00001130
 d28:	00000020 	.word	0x00000020

00000d2c <__cs3_regions_end>:
 d2c:	00000000 	.word	0x00000000
