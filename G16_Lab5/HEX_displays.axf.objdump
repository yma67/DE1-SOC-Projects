
//campus.mcgill.ca/emf/CPE/yma67/My Documents/G16_Lab5/HEX_displays.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	0c 07 00 00 10 07 00 00 14 07 00 00 18 07 00 00     ................
  30:	1c 07 00 00 dc 22 00 00 e8 05 00 00 20 07 00 00     ....."...... ...

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb000867 	bl	2278 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	00002478 	.word	0x00002478

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <ICDISER+0x18>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <ICDISER+0x1c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <ICDISER+0x20>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	000316b0 	.word	0x000316b0

00000124 <__cs3_heap_start_ptr>:
     124:	000316d8 	.word	0x000316d8

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	000316b8 	.word	0x000316b8
     170:	000316bb 	.word	0x000316bb
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <ICDICER+0x38>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <ICDICER+0x3c>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <ICDICER+0x20>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <ICDICER+0x40>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <ICDICER+0x18>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <ICDICER+0x18>
     1b8:	000316b8 	.word	0x000316b8
     1bc:	000316b8 	.word	0x000316b8
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	000316b8 	.word	0x000316b8
     200:	00000000 	.word	0x00000000
     204:	00002368 	.word	0x00002368

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00002368 	.word	0x00002368
     250:	000316bc 	.word	0x000316bc
     254:	00002478 	.word	0x00002478
     258:	00000000 	.word	0x00000000

0000025c <clear_signal>:

const int VGA_ROW_LEN = 240;
const int VGA_COL_LEN = 320;
const int AMP = 0x800000;

void clear_signal(int pixel_vector[VGA_COL_LEN], int current_pixel_vector[VGA_COL_LEN]) {
     25c:	e3a03000 	mov	r3, #0
	int i = 0;
	for (i = 0; i < VGA_COL_LEN; i++) {
		pixel_vector[i] = 100;
     260:	e3a0c064 	mov	r12, #100	; 0x64
		current_pixel_vector[i] = 0; 
     264:	e1a02003 	mov	r2, r3
const int AMP = 0x800000;

void clear_signal(int pixel_vector[VGA_COL_LEN], int current_pixel_vector[VGA_COL_LEN]) {
	int i = 0;
	for (i = 0; i < VGA_COL_LEN; i++) {
		pixel_vector[i] = 100;
     268:	e780c003 	str	r12, [r0, r3]
		current_pixel_vector[i] = 0; 
     26c:	e7812003 	str	r2, [r1, r3]
     270:	e2833004 	add	r3, r3, #4
const int VGA_COL_LEN = 320;
const int AMP = 0x800000;

void clear_signal(int pixel_vector[VGA_COL_LEN], int current_pixel_vector[VGA_COL_LEN]) {
	int i = 0;
	for (i = 0; i < VGA_COL_LEN; i++) {
     274:	e3530c05 	cmp	r3, #1280	; 0x500
     278:	1afffffa 	bne	268 <clear_signal+0xc>
		pixel_vector[i] = 100;
		current_pixel_vector[i] = 0; 
	}
}
     27c:	e12fff1e 	bx	lr

00000280 <screen_write_cstring>:
		if (i < 12) screen_write_cstring((char []){'H', i - 7 + 'C', ':', is_pressed[i] + '0', ' ', '\0'}, 40 + (i - 8) * 5, 3);
		else screen_write_cstring((char []){'H', i - 12 + 'A', ':', is_pressed[i] + '0', ' ', '\0'}, 40 + (i - 8) * 5, 3);
	}
}

void screen_write_cstring(char cstr[], int sx, int sy) {
     280:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
     284:	e1a04001 	mov	r4, r1
     288:	e1a05002 	mov	r5, r2
	int i = 0;
	while (cstr[i] != '\0') {
     28c:	e5d02000 	ldrb	r2, [r0]
     290:	e3520000 	cmp	r2, #0
     294:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
     298:	e1a06000 	mov	r6, r0
		VGA_write_char_ASM(sx, sy, cstr[i]);
		if (sx == 78) sy = (sy + 1) % 60;
     29c:	e3088889 	movw	r8, #34953	; 0x8889
     2a0:	e3488888 	movt	r8, #34952	; 0x8888
		sx = (sx + 1) % 80;
     2a4:	e3067667 	movw	r7, #26215	; 0x6667
     2a8:	e3467666 	movt	r7, #26214	; 0x6666
}

void screen_write_cstring(char cstr[], int sx, int sy) {
	int i = 0;
	while (cstr[i] != '\0') {
		VGA_write_char_ASM(sx, sy, cstr[i]);
     2ac:	e1a00004 	mov	r0, r4
     2b0:	e1a01005 	mov	r1, r5
     2b4:	eb000438 	bl	139c <VGA_write_char_ASM>
		if (sx == 78) sy = (sy + 1) % 60;
     2b8:	e354004e 	cmp	r4, #78	; 0x4e
     2bc:	1a000006 	bne	2dc <screen_write_cstring+0x5c>
     2c0:	e2853001 	add	r3, r5, #1
     2c4:	e0c52398 	smull	r2, r5, r8, r3
     2c8:	e0855003 	add	r5, r5, r3
     2cc:	e1a02fc3 	asr	r2, r3, #31
     2d0:	e06252c5 	rsb	r5, r2, r5, asr #5
     2d4:	e0655205 	rsb	r5, r5, r5, lsl #4
     2d8:	e0435105 	sub	r5, r3, r5, lsl #2
		sx = (sx + 1) % 80;
     2dc:	e2843001 	add	r3, r4, #1
     2e0:	e0c42397 	smull	r2, r4, r7, r3
     2e4:	e1a02fc3 	asr	r2, r3, #31
     2e8:	e06242c4 	rsb	r4, r2, r4, asr #5
     2ec:	e0844104 	add	r4, r4, r4, lsl #2
     2f0:	e0434204 	sub	r4, r3, r4, lsl #4
	}
}

void screen_write_cstring(char cstr[], int sx, int sy) {
	int i = 0;
	while (cstr[i] != '\0') {
     2f4:	e5f62001 	ldrb	r2, [r6, #1]!
     2f8:	e3520000 	cmp	r2, #0
     2fc:	1affffea 	bne	2ac <screen_write_cstring+0x2c>
     300:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00000304 <render>:
		pixel_vector[i] = 100;
		current_pixel_vector[i] = 0; 
	}
}

void render(int pixel_vector[VGA_COL_LEN], int current_pixel_vector[VGA_COL_LEN], int volume, int is_pressed[]) {
     304:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     308:	e24dd034 	sub	sp, sp, #52	; 0x34
     30c:	e58d2004 	str	r2, [sp, #4]
     310:	e1a0b003 	mov	r11, r3
     314:	e1a07000 	mov	r7, r0
     318:	e2418004 	sub	r8, r1, #4
	int i;
	for (i = 0; i < VGA_COL_LEN; i++) {
     31c:	e3a06000 	mov	r6, #0
		VGA_draw_point_ASM(i, pixel_vector[i], 0);
     320:	e1a09006 	mov	r9, r6
		pixel_vector[i] = (int)((double)(current_pixel_vector[i] / (double)AMP) * 80) + 100;
     324:	e3a04000 	mov	r4, #0
     328:	e3a055fa 	mov	r5, #1048576000	; 0x3e800000
		VGA_draw_point_ASM(i, pixel_vector[i], 0xFFFF);
     32c:	e3e0a000 	mvn	r10, #0
}

void render(int pixel_vector[VGA_COL_LEN], int current_pixel_vector[VGA_COL_LEN], int volume, int is_pressed[]) {
	int i;
	for (i = 0; i < VGA_COL_LEN; i++) {
		VGA_draw_point_ASM(i, pixel_vector[i], 0);
     330:	e1a00006 	mov	r0, r6
     334:	e5971000 	ldr	r1, [r7]
     338:	e1a02009 	mov	r2, r9
     33c:	eb00043a 	bl	142c <VGA_draw_point_ASM>
		pixel_vector[i] = (int)((double)(current_pixel_vector[i] / (double)AMP) * 80) + 100;
     340:	e5b80004 	ldr	r0, [r8, #4]!
     344:	eb00058b 	bl	1978 <__aeabi_i2d>
     348:	e1a02004 	mov	r2, r4
     34c:	e1a03005 	mov	r3, r5
     350:	eb0005bf 	bl	1a54 <__aeabi_dmul>
     354:	e3a02000 	mov	r2, #0
     358:	e3a03000 	mov	r3, #0
     35c:	e3443054 	movt	r3, #16468	; 0x4054
     360:	eb0005bb 	bl	1a54 <__aeabi_dmul>
     364:	eb0006e1 	bl	1ef0 <__aeabi_d2iz>
     368:	e2801064 	add	r1, r0, #100	; 0x64
     36c:	e4871004 	str	r1, [r7], #4
		VGA_draw_point_ASM(i, pixel_vector[i], 0xFFFF);
     370:	e1a00006 	mov	r0, r6
     374:	e1a0200a 	mov	r2, r10
     378:	eb00042b 	bl	142c <VGA_draw_point_ASM>
	}
}

void render(int pixel_vector[VGA_COL_LEN], int current_pixel_vector[VGA_COL_LEN], int volume, int is_pressed[]) {
	int i;
	for (i = 0; i < VGA_COL_LEN; i++) {
     37c:	e2866001 	add	r6, r6, #1
     380:	e3560d05 	cmp	r6, #320	; 0x140
     384:	1affffe9 	bne	330 <render+0x2c>
		VGA_draw_point_ASM(i, pixel_vector[i], 0);
		pixel_vector[i] = (int)((double)(current_pixel_vector[i] / (double)AMP) * 80) + 100;
		VGA_draw_point_ASM(i, pixel_vector[i], 0xFFFF);
	}
	screen_write_cstring("Director: BOSS Li", 21, 1);
     388:	e302037c 	movw	r0, #9084	; 0x237c
     38c:	e3400000 	movt	r0, #0
     390:	e3a01015 	mov	r1, #21
     394:	e3a02001 	mov	r2, #1
     398:	ebffffb8 	bl	280 <screen_write_cstring>
	screen_write_cstring("Volume: ", 0, 2);
     39c:	e3020390 	movw	r0, #9104	; 0x2390
     3a0:	e3400000 	movt	r0, #0
     3a4:	e3a01000 	mov	r1, #0
     3a8:	e3a02002 	mov	r2, #2
     3ac:	ebffffb3 	bl	280 <screen_write_cstring>
	screen_write_cstring((char []){volume + '0', '\0'}, 8, 2);
     3b0:	e59d2004 	ldr	r2, [sp, #4]
     3b4:	e2823030 	add	r3, r2, #48	; 0x30
     3b8:	e5cd300c 	strb	r3, [sp, #12]
     3bc:	e3a04000 	mov	r4, #0
     3c0:	e5cd400d 	strb	r4, [sp, #13]
     3c4:	e28d000c 	add	r0, sp, #12
     3c8:	e3a01008 	mov	r1, #8
     3cc:	e3a02002 	mov	r2, #2
     3d0:	ebffffaa 	bl	280 <screen_write_cstring>
     3d4:	e3a0602f 	mov	r6, #47	; 0x2f
     3d8:	e1a05004 	mov	r5, r4
	for (i = 0; i < 7; i++) {
		if (i < 5) screen_write_cstring((char []){i + 'C', ':', is_pressed[i] + '0', ' ', '\0'}, 47 + i * 4, 2);
		else screen_write_cstring((char []){i - 5 + 'A', ':', is_pressed[i] + '0', ' ', '\0'}, 47 + i * 4, 2);
     3dc:	e3a0903a 	mov	r9, #58	; 0x3a
     3e0:	e3a0a020 	mov	r10, #32
     3e4:	e1a08004 	mov	r8, r4
     3e8:	e3a07002 	mov	r7, #2
	}
	screen_write_cstring("Director: BOSS Li", 21, 1);
	screen_write_cstring("Volume: ", 0, 2);
	screen_write_cstring((char []){volume + '0', '\0'}, 8, 2);
	for (i = 0; i < 7; i++) {
		if (i < 5) screen_write_cstring((char []){i + 'C', ':', is_pressed[i] + '0', ' ', '\0'}, 47 + i * 4, 2);
     3ec:	e3540004 	cmp	r4, #4
     3f0:	ca00000c 	bgt	428 <render+0x124>
		pixel_vector[i] = 100;
		current_pixel_vector[i] = 0; 
	}
}

void render(int pixel_vector[VGA_COL_LEN], int current_pixel_vector[VGA_COL_LEN], int volume, int is_pressed[]) {
     3f4:	e2843043 	add	r3, r4, #67	; 0x43
	}
	screen_write_cstring("Director: BOSS Li", 21, 1);
	screen_write_cstring("Volume: ", 0, 2);
	screen_write_cstring((char []){volume + '0', '\0'}, 8, 2);
	for (i = 0; i < 7; i++) {
		if (i < 5) screen_write_cstring((char []){i + 'C', ':', is_pressed[i] + '0', ' ', '\0'}, 47 + i * 4, 2);
     3f8:	e5cd3010 	strb	r3, [sp, #16]
     3fc:	e5cd9011 	strb	r9, [sp, #17]
     400:	e79b3005 	ldr	r3, [r11, r5]
     404:	e2833030 	add	r3, r3, #48	; 0x30
     408:	e5cd3012 	strb	r3, [sp, #18]
     40c:	e5cda013 	strb	r10, [sp, #19]
     410:	e5cd8014 	strb	r8, [sp, #20]
     414:	e28d0010 	add	r0, sp, #16
     418:	e1a01006 	mov	r1, r6
     41c:	e1a02007 	mov	r2, r7
     420:	ebffff96 	bl	280 <screen_write_cstring>
     424:	ea00000b 	b	458 <render+0x154>
		pixel_vector[i] = 100;
		current_pixel_vector[i] = 0; 
	}
}

void render(int pixel_vector[VGA_COL_LEN], int current_pixel_vector[VGA_COL_LEN], int volume, int is_pressed[]) {
     428:	e284303c 	add	r3, r4, #60	; 0x3c
	screen_write_cstring("Director: BOSS Li", 21, 1);
	screen_write_cstring("Volume: ", 0, 2);
	screen_write_cstring((char []){volume + '0', '\0'}, 8, 2);
	for (i = 0; i < 7; i++) {
		if (i < 5) screen_write_cstring((char []){i + 'C', ':', is_pressed[i] + '0', ' ', '\0'}, 47 + i * 4, 2);
		else screen_write_cstring((char []){i - 5 + 'A', ':', is_pressed[i] + '0', ' ', '\0'}, 47 + i * 4, 2);
     42c:	e5cd3018 	strb	r3, [sp, #24]
     430:	e5cd9019 	strb	r9, [sp, #25]
     434:	e79b3005 	ldr	r3, [r11, r5]
     438:	e2833030 	add	r3, r3, #48	; 0x30
     43c:	e5cd301a 	strb	r3, [sp, #26]
     440:	e5cda01b 	strb	r10, [sp, #27]
     444:	e5cd801c 	strb	r8, [sp, #28]
     448:	e28d0018 	add	r0, sp, #24
     44c:	e1a01006 	mov	r1, r6
     450:	e1a02007 	mov	r2, r7
     454:	ebffff89 	bl	280 <screen_write_cstring>
		VGA_draw_point_ASM(i, pixel_vector[i], 0xFFFF);
	}
	screen_write_cstring("Director: BOSS Li", 21, 1);
	screen_write_cstring("Volume: ", 0, 2);
	screen_write_cstring((char []){volume + '0', '\0'}, 8, 2);
	for (i = 0; i < 7; i++) {
     458:	e2844001 	add	r4, r4, #1
     45c:	e2855004 	add	r5, r5, #4
     460:	e2866004 	add	r6, r6, #4
     464:	e3540007 	cmp	r4, #7
     468:	1affffdf 	bne	3ec <render+0xe8>
		if (i < 5) screen_write_cstring((char []){i + 'C', ':', is_pressed[i] + '0', ' ', '\0'}, 47 + i * 4, 2);
		else screen_write_cstring((char []){i - 5 + 'A', ':', is_pressed[i] + '0', ' ', '\0'}, 47 + i * 4, 2);
	}
	for (i = 7; i < NUM_NOTES; i++) {
     46c:	e3023418 	movw	r3, #9240	; 0x2418
     470:	e3403000 	movt	r3, #0
     474:	e5933000 	ldr	r3, [r3]
     478:	e3530007 	cmp	r3, #7
     47c:	da000029 	ble	528 <render+0x224>
     480:	e3a05023 	mov	r5, #35	; 0x23
		if (i < 12) screen_write_cstring((char []){'H', i - 7 + 'C', ':', is_pressed[i] + '0', ' ', '\0'}, 40 + (i - 8) * 5, 3);
		else screen_write_cstring((char []){'H', i - 12 + 'A', ':', is_pressed[i] + '0', ' ', '\0'}, 40 + (i - 8) * 5, 3);
     484:	e3a09048 	mov	r9, #72	; 0x48
     488:	e3a0a03a 	mov	r10, #58	; 0x3a
     48c:	e3a08020 	mov	r8, #32
     490:	e3a07000 	mov	r7, #0
	screen_write_cstring((char []){volume + '0', '\0'}, 8, 2);
	for (i = 0; i < 7; i++) {
		if (i < 5) screen_write_cstring((char []){i + 'C', ':', is_pressed[i] + '0', ' ', '\0'}, 47 + i * 4, 2);
		else screen_write_cstring((char []){i - 5 + 'A', ':', is_pressed[i] + '0', ' ', '\0'}, 47 + i * 4, 2);
	}
	for (i = 7; i < NUM_NOTES; i++) {
     494:	e3026418 	movw	r6, #9240	; 0x2418
     498:	e3406000 	movt	r6, #0
		if (i < 12) screen_write_cstring((char []){'H', i - 7 + 'C', ':', is_pressed[i] + '0', ' ', '\0'}, 40 + (i - 8) * 5, 3);
     49c:	e354000b 	cmp	r4, #11
     4a0:	ca00000d 	bgt	4dc <render+0x1d8>
     4a4:	e5cd9020 	strb	r9, [sp, #32]
		pixel_vector[i] = 100;
		current_pixel_vector[i] = 0; 
	}
}

void render(int pixel_vector[VGA_COL_LEN], int current_pixel_vector[VGA_COL_LEN], int volume, int is_pressed[]) {
     4a8:	e284303c 	add	r3, r4, #60	; 0x3c
	for (i = 0; i < 7; i++) {
		if (i < 5) screen_write_cstring((char []){i + 'C', ':', is_pressed[i] + '0', ' ', '\0'}, 47 + i * 4, 2);
		else screen_write_cstring((char []){i - 5 + 'A', ':', is_pressed[i] + '0', ' ', '\0'}, 47 + i * 4, 2);
	}
	for (i = 7; i < NUM_NOTES; i++) {
		if (i < 12) screen_write_cstring((char []){'H', i - 7 + 'C', ':', is_pressed[i] + '0', ' ', '\0'}, 40 + (i - 8) * 5, 3);
     4ac:	e5cd3021 	strb	r3, [sp, #33]	; 0x21
     4b0:	e5cda022 	strb	r10, [sp, #34]	; 0x22
     4b4:	e59b301c 	ldr	r3, [r11, #28]
     4b8:	e2833030 	add	r3, r3, #48	; 0x30
     4bc:	e5cd3023 	strb	r3, [sp, #35]	; 0x23
     4c0:	e5cd8024 	strb	r8, [sp, #36]	; 0x24
     4c4:	e5cd7025 	strb	r7, [sp, #37]	; 0x25
     4c8:	e28d0020 	add	r0, sp, #32
     4cc:	e1a01005 	mov	r1, r5
     4d0:	e3a02003 	mov	r2, #3
     4d4:	ebffff69 	bl	280 <screen_write_cstring>
     4d8:	ea00000c 	b	510 <render+0x20c>
		else screen_write_cstring((char []){'H', i - 12 + 'A', ':', is_pressed[i] + '0', ' ', '\0'}, 40 + (i - 8) * 5, 3);
     4dc:	e5cd9028 	strb	r9, [sp, #40]	; 0x28
		pixel_vector[i] = 100;
		current_pixel_vector[i] = 0; 
	}
}

void render(int pixel_vector[VGA_COL_LEN], int current_pixel_vector[VGA_COL_LEN], int volume, int is_pressed[]) {
     4e0:	e2843035 	add	r3, r4, #53	; 0x35
		if (i < 5) screen_write_cstring((char []){i + 'C', ':', is_pressed[i] + '0', ' ', '\0'}, 47 + i * 4, 2);
		else screen_write_cstring((char []){i - 5 + 'A', ':', is_pressed[i] + '0', ' ', '\0'}, 47 + i * 4, 2);
	}
	for (i = 7; i < NUM_NOTES; i++) {
		if (i < 12) screen_write_cstring((char []){'H', i - 7 + 'C', ':', is_pressed[i] + '0', ' ', '\0'}, 40 + (i - 8) * 5, 3);
		else screen_write_cstring((char []){'H', i - 12 + 'A', ':', is_pressed[i] + '0', ' ', '\0'}, 40 + (i - 8) * 5, 3);
     4e4:	e5cd3029 	strb	r3, [sp, #41]	; 0x29
     4e8:	e5cda02a 	strb	r10, [sp, #42]	; 0x2a
     4ec:	e59b301c 	ldr	r3, [r11, #28]
     4f0:	e2833030 	add	r3, r3, #48	; 0x30
     4f4:	e5cd302b 	strb	r3, [sp, #43]	; 0x2b
     4f8:	e5cd802c 	strb	r8, [sp, #44]	; 0x2c
     4fc:	e5cd702d 	strb	r7, [sp, #45]	; 0x2d
     500:	e28d0028 	add	r0, sp, #40	; 0x28
     504:	e1a01005 	mov	r1, r5
     508:	e3a02003 	mov	r2, #3
     50c:	ebffff5b 	bl	280 <screen_write_cstring>
	screen_write_cstring((char []){volume + '0', '\0'}, 8, 2);
	for (i = 0; i < 7; i++) {
		if (i < 5) screen_write_cstring((char []){i + 'C', ':', is_pressed[i] + '0', ' ', '\0'}, 47 + i * 4, 2);
		else screen_write_cstring((char []){i - 5 + 'A', ':', is_pressed[i] + '0', ' ', '\0'}, 47 + i * 4, 2);
	}
	for (i = 7; i < NUM_NOTES; i++) {
     510:	e2844001 	add	r4, r4, #1
     514:	e28bb004 	add	r11, r11, #4
     518:	e2855005 	add	r5, r5, #5
     51c:	e5963000 	ldr	r3, [r6]
     520:	e1530004 	cmp	r3, r4
     524:	caffffdc 	bgt	49c <render+0x198>
		if (i < 12) screen_write_cstring((char []){'H', i - 7 + 'C', ':', is_pressed[i] + '0', ' ', '\0'}, 40 + (i - 8) * 5, 3);
		else screen_write_cstring((char []){'H', i - 12 + 'A', ':', is_pressed[i] + '0', ' ', '\0'}, 40 + (i - 8) * 5, 3);
	}
}
     528:	e28dd034 	add	sp, sp, #52	; 0x34
     52c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00000530 <disable_A9_interrupts>:
#include "../inc/int_setup.h"

void disable_A9_interrupts() {
	int status = 0b11010011;
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     530:	e3a030d3 	mov	r3, #211	; 0xd3
     534:	e129f003 	msr	CPSR_fc, r3
     538:	e12fff1e 	bx	lr

0000053c <enable_A9_interrupts>:
}

void enable_A9_interrupts() {
	int status = 0b01010011;
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     53c:	e3a03053 	mov	r3, #83	; 0x53
     540:	e129f003 	msr	CPSR_fc, r3
     544:	e12fff1e 	bx	lr

00000548 <set_A9_IRQ_stack>:

void set_A9_IRQ_stack() {
	int stack, mode;
	stack = 0xFFFFFFFF - 7;
	mode = 0b11010010;
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     548:	e3a030d2 	mov	r3, #210	; 0xd2
     54c:	e129f003 	msr	CPSR_fc, r3
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
     550:	e3e03007 	mvn	r3, #7
     554:	e1a0d003 	mov	sp, r3
	
	mode = 0b11010011;
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     558:	e3a030d3 	mov	r3, #211	; 0xd3
     55c:	e129f003 	msr	CPSR_fc, r3
     560:	e12fff1e 	bx	lr

00000564 <config_interrupt>:
}

void config_interrupt(int ID, int CPU) {
     564:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
	int reg_offset;
	int index;
	int value;
	int address;
	
	reg_offset = (ID>>3) & 0xFFFFFFFC;
     568:	e1a031c0 	asr	r3, r0, #3
     56c:	e3c33003 	bic	r3, r3, #3
	index = ID & 0x1F;
	value = 1<<index;
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
     570:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
	int index;
	int value;
	int address;
	
	reg_offset = (ID>>3) & 0xFFFFFFFC;
	index = ID & 0x1F;
     574:	e200201f 	and	r2, r0, #31
	value = 1<<index;
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
	*(int *)address |= value;
     578:	e513c300 	ldr	r12, [r3, #-768]	; 0xfffffd00
     57c:	e3a04001 	mov	r4, #1
     580:	e18c2214 	orr	r2, r12, r4, lsl r2
     584:	e5032300 	str	r2, [r3, #-768]	; 0xfffffd00
	
	reg_offset = (ID & 0xFFFFFFFC);
	index = ID & 3;
	address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
	*(char *)address = (char)CPU;
     588:	e2400b4a 	sub	r0, r0, #75776	; 0x12800
     58c:	e5c01000 	strb	r1, [r0]
}
     590:	e8bd0010 	ldmfd	sp!, {r4}
     594:	e12fff1e 	bx	lr

00000598 <config_GIC>:

void config_GIC(int len, int* IDs) {
     598:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
	int i;
	for(i=0 ; i<len ; i++)
     59c:	e2506000 	subs	r6, r0, #0
     5a0:	da000008 	ble	5c8 <config_GIC+0x30>
	index = ID & 3;
	address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
	*(char *)address = (char)CPU;
}

void config_GIC(int len, int* IDs) {
     5a4:	e2415004 	sub	r5, r1, #4
	int i;
	for(i=0 ; i<len ; i++)
     5a8:	e3a04000 	mov	r4, #0
		config_interrupt(IDs[i],1);
     5ac:	e3a07001 	mov	r7, #1
     5b0:	e5b50004 	ldr	r0, [r5, #4]!
     5b4:	e1a01007 	mov	r1, r7
     5b8:	ebffffe9 	bl	564 <config_interrupt>
	*(char *)address = (char)CPU;
}

void config_GIC(int len, int* IDs) {
	int i;
	for(i=0 ; i<len ; i++)
     5bc:	e2844001 	add	r4, r4, #1
     5c0:	e1540006 	cmp	r4, r6
     5c4:	1afffff9 	bne	5b0 <config_GIC+0x18>
		config_interrupt(IDs[i],1);
	*((int *) (MPCORE_GIC_CPUIF + ICCPMR)) = 0xFFFF;
     5c8:	e3e02a13 	mvn	r2, #77824	; 0x13000
     5cc:	e30f3fff 	movw	r3, #65535	; 0xffff
     5d0:	e5023efb 	str	r3, [r2, #-3835]	; 0xfffff105
	*((int *) (MPCORE_GIC_CPUIF)) = 1;
     5d4:	e3a03001 	mov	r3, #1
     5d8:	e5023eff 	str	r3, [r2, #-3839]	; 0xfffff101
	*((int *) (MPCORE_GIC_DIST)) = 1;
     5dc:	e3e02a12 	mvn	r2, #73728	; 0x12000
     5e0:	e5023fff 	str	r3, [r2, #-4095]	; 0xfffff001
     5e4:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}

000005e8 <__cs3_isr_irq>:
}

void __attribute__ ((interrupt)) __cs3_isr_irq() {
     5e8:	e24ee004 	sub	lr, lr, #4
     5ec:	e92d503f 	push	{r0, r1, r2, r3, r4, r5, r12, lr}
	int interrupt_ID = *((int *) (MPCORE_GIC_CPUIF + ICCIAR));
     5f0:	e3e03a13 	mvn	r3, #77824	; 0x13000
     5f4:	e5134ef3 	ldr	r4, [r3, #-3827]	; 0xfffff10d
	
	switch(interrupt_ID) {
     5f8:	e3540053 	cmp	r4, #83	; 0x53
     5fc:	0a000038 	beq	6e4 <__cs3_isr_irq+0xfc>
     600:	ca00000f 	bgt	644 <__cs3_isr_irq+0x5c>
     604:	e354004e 	cmp	r4, #78	; 0x4e
     608:	0a00002d 	beq	6c4 <__cs3_isr_irq+0xdc>
     60c:	ca000006 	bgt	62c <__cs3_isr_irq+0x44>
     610:	e3540048 	cmp	r4, #72	; 0x48
     614:	0a000026 	beq	6b4 <__cs3_isr_irq+0xcc>
     618:	e3540049 	cmp	r4, #73	; 0x49
     61c:	0a000026 	beq	6bc <__cs3_isr_irq+0xd4>
     620:	e354001d 	cmp	r4, #29
     624:	0a000016 	beq	684 <__cs3_isr_irq+0x9c>
     628:	ea000033 	b	6fc <__cs3_isr_irq+0x114>
     62c:	e3540050 	cmp	r4, #80	; 0x50
     630:	0a000027 	beq	6d4 <__cs3_isr_irq+0xec>
     634:	ba000024 	blt	6cc <__cs3_isr_irq+0xe4>
     638:	e3540051 	cmp	r4, #81	; 0x51
     63c:	0a000026 	beq	6dc <__cs3_isr_irq+0xf4>
     640:	ea00002d 	b	6fc <__cs3_isr_irq+0x114>
     644:	e35400c7 	cmp	r4, #199	; 0xc7
     648:	0a000011 	beq	694 <__cs3_isr_irq+0xac>
     64c:	ca000006 	bgt	66c <__cs3_isr_irq+0x84>
     650:	e3540059 	cmp	r4, #89	; 0x59
     654:	0a000026 	beq	6f4 <__cs3_isr_irq+0x10c>
     658:	e35400c5 	cmp	r4, #197	; 0xc5
     65c:	0a00000a 	beq	68c <__cs3_isr_irq+0xa4>
     660:	e3540054 	cmp	r4, #84	; 0x54
     664:	0a000020 	beq	6ec <__cs3_isr_irq+0x104>
     668:	ea000023 	b	6fc <__cs3_isr_irq+0x114>
     66c:	e35400c9 	cmp	r4, #201	; 0xc9
     670:	0a00000b 	beq	6a4 <__cs3_isr_irq+0xbc>
     674:	ba000008 	blt	69c <__cs3_isr_irq+0xb4>
     678:	e35400ca 	cmp	r4, #202	; 0xca
     67c:	0a00000a 	beq	6ac <__cs3_isr_irq+0xc4>
     680:	ea00001d 	b	6fc <__cs3_isr_irq+0x114>
		
		case 29:  A9_PRIV_TIM_ISR(); break;
     684:	eb0001dd 	bl	e00 <A9_PRIV_TIM_ISR>
     688:	ea00001c 	b	700 <__cs3_isr_irq+0x118>
		case 197: HPS_GPIO1_ISR(); break;
     68c:	eb0001dc 	bl	e04 <HPS_GPIO1_ISR>
     690:	ea00001a 	b	700 <__cs3_isr_irq+0x118>
		case 199: HPS_TIM0_ISR(); break;
     694:	eb0001db 	bl	e08 <HPS_TIM0_ISR>
     698:	ea000018 	b	700 <__cs3_isr_irq+0x118>
		case 200: HPS_TIM1_ISR(); break;
     69c:	eb0001e1 	bl	e28 <HPS_TIM1_ISR>
     6a0:	ea000016 	b	700 <__cs3_isr_irq+0x118>
		case 201: HPS_TIM2_ISR(); break;
     6a4:	eb0001e7 	bl	e48 <HPS_TIM2_ISR>
     6a8:	ea000014 	b	700 <__cs3_isr_irq+0x118>
		case 202: HPS_TIM3_ISR(); break;
     6ac:	eb0001e6 	bl	e4c <HPS_TIM3_ISR>
     6b0:	ea000012 	b	700 <__cs3_isr_irq+0x118>
		case 72:  FPGA_INTERVAL_TIM_ISR(); break;
     6b4:	eb0001e5 	bl	e50 <FPGA_INTERVAL_TIM_ISR>
     6b8:	ea000010 	b	700 <__cs3_isr_irq+0x118>
		case 73:  FPGA_PB_KEYS_ISR(); break;
     6bc:	eb0001e4 	bl	e54 <FPGA_PB_KEYS_ISR>
     6c0:	ea00000e 	b	700 <__cs3_isr_irq+0x118>
		case 78:  FPGA_Audio_ISR(); break;
     6c4:	eb0001e3 	bl	e58 <FPGA_Audio_ISR>
     6c8:	ea00000c 	b	700 <__cs3_isr_irq+0x118>
		case 79:  FPGA_PS2_ISR(); break;
     6cc:	eb0001e2 	bl	e5c <FPGA_PS2_ISR>
     6d0:	ea00000a 	b	700 <__cs3_isr_irq+0x118>
		case 80:  FPGA_JTAG_ISR(); break;
     6d4:	eb0001e1 	bl	e60 <FPGA_JTAG_ISR>
     6d8:	ea000008 	b	700 <__cs3_isr_irq+0x118>
		case 81:  FPGA_IrDA_ISR(); break;
     6dc:	eb0001e0 	bl	e64 <FPGA_IrDA_ISR>
     6e0:	ea000006 	b	700 <__cs3_isr_irq+0x118>
		case 83:  FPGA_JP1_ISR(); break;
     6e4:	eb0001df 	bl	e68 <FPGA_JP1_ISR>
     6e8:	ea000004 	b	700 <__cs3_isr_irq+0x118>
		case 84:  FPGA_JP2_ISR(); break;
     6ec:	eb0001de 	bl	e6c <FPGA_JP2_ISR>
     6f0:	ea000002 	b	700 <__cs3_isr_irq+0x118>
		case 89:  FPGA_PS2_DUAL_ISR(); break;
     6f4:	eb0001dd 	bl	e70 <FPGA_PS2_DUAL_ISR>
     6f8:	ea000000 	b	700 <__cs3_isr_irq+0x118>
     6fc:	eafffffe 	b	6fc <__cs3_isr_irq+0x114>
	
		default: while(1); break;
	}
	
	*((int *) (MPCORE_GIC_CPUIF + ICCEOIR)) = interrupt_ID;
     700:	e3e03a13 	mvn	r3, #77824	; 0x13000
     704:	e5034eef 	str	r4, [r3, #-3823]	; 0xfffff111
     708:	e8fd903f 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r12, pc}^

0000070c <__cs3_reset>:
}

void __attribute__ ((interrupt)) __cs3_reset (void) {
     70c:	eafffffe 	b	70c <__cs3_reset>

00000710 <__cs3_isr_undef>:
	while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void) {
     710:	eafffffe 	b	710 <__cs3_isr_undef>

00000714 <__cs3_isr_swi>:
	while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void) {
     714:	eafffffe 	b	714 <__cs3_isr_swi>

00000718 <__cs3_isr_pabort>:
	while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void) {
     718:	eafffffe 	b	718 <__cs3_isr_pabort>

0000071c <__cs3_isr_dabort>:
	while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void) {
     71c:	eafffffe 	b	71c <__cs3_isr_dabort>

00000720 <__cs3_isr_fiq>:
	while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void) {
     720:	eafffffe 	b	720 <__cs3_isr_fiq>

00000724 <fix_bug>:
	while(1);
}

void fix_bug() {
	volatile int * addr = (int *)0xFFFED198;
	*addr = 0x000C0000;
     724:	e3a02703 	mov	r2, #786432	; 0xc0000
     728:	e3e03a12 	mvn	r3, #73728	; 0x12000
     72c:	e5032e67 	str	r2, [r3, #-3687]	; 0xfffff199
     730:	e12fff1e 	bx	lr

00000734 <int_setup>:
}

void int_setup(int len, int* IDs) {
     734:	e92d4038 	push	{r3, r4, r5, lr}
     738:	e1a05000 	mov	r5, r0
     73c:	e1a04001 	mov	r4, r1
	disable_A9_interrupts();
     740:	ebffff7a 	bl	530 <disable_A9_interrupts>
	set_A9_IRQ_stack();
     744:	ebffff7f 	bl	548 <set_A9_IRQ_stack>
	fix_bug();
     748:	ebfffff5 	bl	724 <fix_bug>
	config_GIC(len, IDs);
     74c:	e1a00005 	mov	r0, r5
     750:	e1a01004 	mov	r1, r4
     754:	ebffff8f 	bl	598 <config_GIC>
	enable_A9_interrupts();
     758:	ebffff77 	bl	53c <enable_A9_interrupts>
     75c:	e8bd8038 	pop	{r3, r4, r5, pc}

00000760 <handle_note_pressed_listener>:
#include "../inc/kbd_listener_util.h"

void handle_note_pressed_listener(int is_pressed[], int * is_break, char * read, int * ampl) {
	switch (*read) {
     760:	e5d22000 	ldrb	r2, [r2]
     764:	e352002a 	cmp	r2, #42	; 0x2a
     768:	0a000085 	beq	984 <ICDIPTR+0x184>
     76c:	8a000013 	bhi	7c0 <handle_note_pressed_listener+0x60>
     770:	e352001c 	cmp	r2, #28
     774:	0a00002a 	beq	824 <ICDIPTR+0x24>
     778:	8a000005 	bhi	794 <handle_note_pressed_listener+0x34>
     77c:	e352001a 	cmp	r2, #26
     780:	0a000067 	beq	924 <ICDIPTR+0x124>
     784:	8a00002e 	bhi	844 <ICDIPTR+0x44>
     788:	e3520016 	cmp	r2, #22
     78c:	1a0000bf 	bne	a90 <ICDIPTR+0x290>
     790:	ea00009b 	b	a04 <ICDIPTR+0x204>
     794:	e3520021 	cmp	r2, #33	; 0x21
     798:	0a000071 	beq	964 <ICDIPTR+0x164>
     79c:	8a000002 	bhi	7ac <handle_note_pressed_listener+0x4c>
     7a0:	e352001e 	cmp	r2, #30
     7a4:	1a0000b9 	bne	a90 <ICDIPTR+0x290>
     7a8:	ea0000a5 	b	a44 <ICDIPTR+0x244>
     7ac:	e3520022 	cmp	r2, #34	; 0x22
     7b0:	0a000063 	beq	944 <ICDIPTR+0x144>
     7b4:	e3520023 	cmp	r2, #35	; 0x23
     7b8:	1a0000b4 	bne	a90 <ICDIPTR+0x290>
     7bc:	ea000028 	b	864 <ICDIPTR+0x64>
     7c0:	e352003b 	cmp	r2, #59	; 0x3b
     7c4:	0a000036 	beq	8a4 <ICDIPTR+0xa4>
     7c8:	8a00000a 	bhi	7f8 <handle_note_pressed_listener+0x98>
     7cc:	e3520031 	cmp	r2, #49	; 0x31
     7d0:	0a00007b 	beq	9c4 <ICDIPTR+0x1c4>
     7d4:	8a000002 	bhi	7e4 <handle_note_pressed_listener+0x84>
     7d8:	e352002b 	cmp	r2, #43	; 0x2b
     7dc:	1a0000ab 	bne	a90 <ICDIPTR+0x290>
     7e0:	ea000027 	b	884 <ICDIPTR+0x84>
     7e4:	e3520032 	cmp	r2, #50	; 0x32
     7e8:	0a00006d 	beq	9a4 <ICDIPTR+0x1a4>
     7ec:	e352003a 	cmp	r2, #58	; 0x3a
     7f0:	1a0000a6 	bne	a90 <ICDIPTR+0x290>
     7f4:	ea00007a 	b	9e4 <ICDIPTR+0x1e4>
     7f8:	e352004b 	cmp	r2, #75	; 0x4b
     7fc:	0a000038 	beq	8e4 <ICDIPTR+0xe4>
     800:	8a000002 	bhi	810 <ICDIPTR+0x10>
     804:	e3520042 	cmp	r2, #66	; 0x42
     808:	1a0000a0 	bne	a90 <ICDIPTR+0x290>
     80c:	ea00002c 	b	8c4 <ICDIPTR+0xc4>
     810:	e352004c 	cmp	r2, #76	; 0x4c
     814:	0a00003a 	beq	904 <ICDIPTR+0x104>
     818:	e35200f0 	cmp	r2, #240	; 0xf0
     81c:	1a00009b 	bne	a90 <ICDIPTR+0x290>
     820:	ea000097 	b	a84 <ICDIPTR+0x284>
		case 0x1C: // A -> C
			if (*is_break) {
     824:	e5913000 	ldr	r3, [r1]
     828:	e3530000 	cmp	r3, #0
				is_pressed[0] = 0;
     82c:	13a03000 	movne	r3, #0
     830:	15803000 	strne	r3, [r0]
				*is_break = 0;
     834:	15813000 	strne	r3, [r1]
			} else {
				is_pressed[0] = 1;
     838:	03a03001 	moveq	r3, #1
     83c:	05803000 	streq	r3, [r0]
     840:	e12fff1e 	bx	lr
			}
			break;
		case 0x1B: // S -> D
			if (*is_break) {
     844:	e5913000 	ldr	r3, [r1]
     848:	e3530000 	cmp	r3, #0
				is_pressed[1] = 0;
     84c:	13a03000 	movne	r3, #0
     850:	15803004 	strne	r3, [r0, #4]
				*is_break = 0;
     854:	15813000 	strne	r3, [r1]
			} else {
				is_pressed[1] = 1;
     858:	03a03001 	moveq	r3, #1
     85c:	05803004 	streq	r3, [r0, #4]
     860:	e12fff1e 	bx	lr
			}
			break;
		case 0x23: // D -> E
			if (*is_break) {
     864:	e5913000 	ldr	r3, [r1]
     868:	e3530000 	cmp	r3, #0
				is_pressed[2] = 0;
     86c:	13a03000 	movne	r3, #0
     870:	15803008 	strne	r3, [r0, #8]
				*is_break = 0;
     874:	15813000 	strne	r3, [r1]
			} else {
				is_pressed[2] = 1;
     878:	03a03001 	moveq	r3, #1
     87c:	05803008 	streq	r3, [r0, #8]
     880:	e12fff1e 	bx	lr
			}
			break;
		case 0x2B: // F -> F
			if (*is_break) {
     884:	e5913000 	ldr	r3, [r1]
     888:	e3530000 	cmp	r3, #0
				is_pressed[3] = 0;
     88c:	13a03000 	movne	r3, #0
     890:	1580300c 	strne	r3, [r0, #12]
				*is_break = 0;
     894:	15813000 	strne	r3, [r1]
			} else {
				is_pressed[3] = 1;
     898:	03a03001 	moveq	r3, #1
     89c:	0580300c 	streq	r3, [r0, #12]
     8a0:	e12fff1e 	bx	lr
			}
			break;
		case 0x3B: // J -> G
			if (*is_break) {
     8a4:	e5913000 	ldr	r3, [r1]
     8a8:	e3530000 	cmp	r3, #0
				is_pressed[4] = 0;
     8ac:	13a03000 	movne	r3, #0
     8b0:	15803010 	strne	r3, [r0, #16]
				*is_break = 0;
     8b4:	15813000 	strne	r3, [r1]
			} else {
				is_pressed[4] = 1;
     8b8:	03a03001 	moveq	r3, #1
     8bc:	05803010 	streq	r3, [r0, #16]
     8c0:	e12fff1e 	bx	lr
			}
			break;
		case 0x42: // K -> A
			if (*is_break) {
     8c4:	e5913000 	ldr	r3, [r1]
     8c8:	e3530000 	cmp	r3, #0
				is_pressed[5] = 0;
     8cc:	13a03000 	movne	r3, #0
     8d0:	15803014 	strne	r3, [r0, #20]
				*is_break = 0;
     8d4:	15813000 	strne	r3, [r1]
			} else {
				is_pressed[5] = 1;
     8d8:	03a03001 	moveq	r3, #1
     8dc:	05803014 	streq	r3, [r0, #20]
     8e0:	e12fff1e 	bx	lr
			}
			break;
		case 0x4B: // L -> B
			if (*is_break) {
     8e4:	e5913000 	ldr	r3, [r1]
     8e8:	e3530000 	cmp	r3, #0
				is_pressed[6] = 0;
     8ec:	13a03000 	movne	r3, #0
     8f0:	15803018 	strne	r3, [r0, #24]
				*is_break = 0;
     8f4:	15813000 	strne	r3, [r1]
			} else {
				is_pressed[6] = 1;
     8f8:	03a03001 	moveq	r3, #1
     8fc:	05803018 	streq	r3, [r0, #24]
     900:	e12fff1e 	bx	lr
			}
			break;
		case 0x4C: // ; -> HC
			if (*is_break) {
     904:	e5913000 	ldr	r3, [r1]
     908:	e3530000 	cmp	r3, #0
				is_pressed[7] = 0;
     90c:	13a03000 	movne	r3, #0
     910:	1580301c 	strne	r3, [r0, #28]
				*is_break = 0;
     914:	15813000 	strne	r3, [r1]
			} else {
				is_pressed[7] = 1;
     918:	03a03001 	moveq	r3, #1
     91c:	0580301c 	streq	r3, [r0, #28]
     920:	e12fff1e 	bx	lr
			}
			break;
		case 0x1A: // Z -> HD
			if (*is_break) {
     924:	e5913000 	ldr	r3, [r1]
     928:	e3530000 	cmp	r3, #0
				is_pressed[8] = 0;
     92c:	13a03000 	movne	r3, #0
     930:	15803020 	strne	r3, [r0, #32]
				*is_break = 0;
     934:	15813000 	strne	r3, [r1]
			} else {
				is_pressed[8] = 1;
     938:	03a03001 	moveq	r3, #1
     93c:	05803020 	streq	r3, [r0, #32]
     940:	e12fff1e 	bx	lr
			}
			break;
		case 0x22: // X -> HE
			if (*is_break) {
     944:	e5913000 	ldr	r3, [r1]
     948:	e3530000 	cmp	r3, #0
				is_pressed[9] = 0;
     94c:	13a03000 	movne	r3, #0
     950:	15803024 	strne	r3, [r0, #36]	; 0x24
				*is_break = 0;
     954:	15813000 	strne	r3, [r1]
			} else {
				is_pressed[9] = 1;
     958:	03a03001 	moveq	r3, #1
     95c:	05803024 	streq	r3, [r0, #36]	; 0x24
     960:	e12fff1e 	bx	lr
			}
			break;
		case 0x21: // C -> HF
			if (*is_break) {
     964:	e5913000 	ldr	r3, [r1]
     968:	e3530000 	cmp	r3, #0
				is_pressed[10] = 0;
     96c:	13a03000 	movne	r3, #0
     970:	15803028 	strne	r3, [r0, #40]	; 0x28
				*is_break = 0;
     974:	15813000 	strne	r3, [r1]
			} else {
				is_pressed[10] = 1;
     978:	03a03001 	moveq	r3, #1
     97c:	05803028 	streq	r3, [r0, #40]	; 0x28
     980:	e12fff1e 	bx	lr
			}
			break;
		case 0x2A: // V -> HG
			if (*is_break) {
     984:	e5913000 	ldr	r3, [r1]
     988:	e3530000 	cmp	r3, #0
				is_pressed[11] = 0;
     98c:	13a03000 	movne	r3, #0
     990:	1580302c 	strne	r3, [r0, #44]	; 0x2c
				*is_break = 0;
     994:	15813000 	strne	r3, [r1]
			} else {
				is_pressed[11] = 1;
     998:	03a03001 	moveq	r3, #1
     99c:	0580302c 	streq	r3, [r0, #44]	; 0x2c
     9a0:	e12fff1e 	bx	lr
			}
			break;
		case 0x32: // B -> HA
			if (*is_break) {
     9a4:	e5913000 	ldr	r3, [r1]
     9a8:	e3530000 	cmp	r3, #0
				is_pressed[12] = 0;
     9ac:	13a03000 	movne	r3, #0
     9b0:	15803030 	strne	r3, [r0, #48]	; 0x30
				*is_break = 0;
     9b4:	15813000 	strne	r3, [r1]
			} else {
				is_pressed[12] = 1;
     9b8:	03a03001 	moveq	r3, #1
     9bc:	05803030 	streq	r3, [r0, #48]	; 0x30
     9c0:	e12fff1e 	bx	lr
			}
			break;
		case 0x31: // N -> HB
			if (*is_break) {
     9c4:	e5913000 	ldr	r3, [r1]
     9c8:	e3530000 	cmp	r3, #0
				is_pressed[13] = 0;
     9cc:	13a03000 	movne	r3, #0
     9d0:	15803034 	strne	r3, [r0, #52]	; 0x34
				*is_break = 0;
     9d4:	15813000 	strne	r3, [r1]
			} else {
				is_pressed[13] = 1;
     9d8:	03a03001 	moveq	r3, #1
     9dc:	05803034 	streq	r3, [r0, #52]	; 0x34
     9e0:	e12fff1e 	bx	lr
			}
			break;
		case 0x3A: // M -> HHC
			if (*is_break) {
     9e4:	e5913000 	ldr	r3, [r1]
     9e8:	e3530000 	cmp	r3, #0
				is_pressed[14] = 0;
     9ec:	13a03000 	movne	r3, #0
     9f0:	15803038 	strne	r3, [r0, #56]	; 0x38
				*is_break = 0;
     9f4:	15813000 	strne	r3, [r1]
			} else {
				is_pressed[14] = 1;
     9f8:	03a03001 	moveq	r3, #1
     9fc:	05803038 	streq	r3, [r0, #56]	; 0x38
     a00:	e12fff1e 	bx	lr
			}
			break;
		case 0x16:
			if (*is_break) {
     a04:	e5912000 	ldr	r2, [r1]
     a08:	e3520000 	cmp	r2, #0
     a0c:	012fff1e 	bxeq	lr
				*ampl = (*ampl - 1) % 10;
     a10:	e5932000 	ldr	r2, [r3]
     a14:	e2422001 	sub	r2, r2, #1
     a18:	e3060667 	movw	r0, #26215	; 0x6667
     a1c:	e3460666 	movt	r0, #26214	; 0x6666
     a20:	e0c0c290 	smull	r12, r0, r0, r2
     a24:	e1a0cfc2 	asr	r12, r2, #31
     a28:	e06c0140 	rsb	r0, r12, r0, asr #2
     a2c:	e0800100 	add	r0, r0, r0, lsl #2
     a30:	e0422080 	sub	r2, r2, r0, lsl #1
     a34:	e5832000 	str	r2, [r3]
				*is_break = 0;
     a38:	e3a03000 	mov	r3, #0
     a3c:	e5813000 	str	r3, [r1]
     a40:	e12fff1e 	bx	lr
			}
			break;
		case 0x1E:
			if (*is_break) {
     a44:	e5912000 	ldr	r2, [r1]
     a48:	e3520000 	cmp	r2, #0
     a4c:	012fff1e 	bxeq	lr
				*ampl = (*ampl + 1) % 10;
     a50:	e5932000 	ldr	r2, [r3]
     a54:	e2822001 	add	r2, r2, #1
     a58:	e3060667 	movw	r0, #26215	; 0x6667
     a5c:	e3460666 	movt	r0, #26214	; 0x6666
     a60:	e0c0c290 	smull	r12, r0, r0, r2
     a64:	e1a0cfc2 	asr	r12, r2, #31
     a68:	e06c0140 	rsb	r0, r12, r0, asr #2
     a6c:	e0800100 	add	r0, r0, r0, lsl #2
     a70:	e0422080 	sub	r2, r2, r0, lsl #1
     a74:	e5832000 	str	r2, [r3]
				*is_break = 0;
     a78:	e3a03000 	mov	r3, #0
     a7c:	e5813000 	str	r3, [r1]
     a80:	e12fff1e 	bx	lr
			}
			break;
		case 0xF0:
			*is_break = 1;
     a84:	e3a03001 	mov	r3, #1
     a88:	e5813000 	str	r3, [r1]
			break;
     a8c:	e12fff1e 	bx	lr
		default:
			*is_break = 0;
     a90:	e3a03000 	mov	r3, #0
     a94:	e5813000 	str	r3, [r1]
     a98:	e12fff1e 	bx	lr

00000a9c <clear_ispressed>:

const int SAMPLE_RATE = 48000;
const double NOTE_LOOKUP[] = {130.813, 146.832, 164.814, 174.614, 195.998, 220.000, 246.942, 261.626, 293.665, 329.628, 349.228, 391.995, 440.000, 493.883, 523.251};
const int NUM_NOTES = 15; 

void clear_ispressed(int is_pressed[]) {
     a9c:	e3a03000 	mov	r3, #0
	int i; 
	for (i = 0; i < NUM_NOTES; i++) is_pressed[i] = 0; 
     aa0:	e1a02003 	mov	r2, r3
     aa4:	e7802003 	str	r2, [r0, r3]
     aa8:	e2833004 	add	r3, r3, #4
     aac:	e353003c 	cmp	r3, #60	; 0x3c
     ab0:	1afffffb 	bne	aa4 <clear_ispressed+0x8>
}
     ab4:	e12fff1e 	bx	lr

00000ab8 <make_wave>:

double make_wave(int instant, double frequency) {
     ab8:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
     abc:	e1a04002 	mov	r4, r2
     ac0:	e1a05003 	mov	r5, r3
	int index = (int)(frequency * (double)instant) % SAMPLE_RATE;
     ac4:	eb0003ab 	bl	1978 <__aeabi_i2d>
     ac8:	e1a02004 	mov	r2, r4
     acc:	e1a03005 	mov	r3, r5
     ad0:	eb0003df 	bl	1a54 <__aeabi_dmul>
     ad4:	eb000505 	bl	1ef0 <__aeabi_d2iz>
     ad8:	e30179f1 	movw	r7, #6641	; 0x19f1
     adc:	e3407576 	movt	r7, #1398	; 0x576
     ae0:	e0c73097 	smull	r3, r7, r7, r0
     ae4:	e1a03fc0 	asr	r3, r0, #31
     ae8:	e0637547 	rsb	r7, r3, r7, asr #10
     aec:	e30b3b80 	movw	r3, #48000	; 0xbb80
     af0:	e0670793 	mls	r7, r3, r7, r0
	double interpolation = (double)(index - (int)index);
	double signals = (1.0 - interpolation) * (double)sine[(int)index] +
     af4:	e3026480 	movw	r6, #9344	; 0x2480
     af8:	e3406000 	movt	r6, #0
     afc:	e7960107 	ldr	r0, [r6, r7, lsl #2]
     b00:	eb00039c 	bl	1978 <__aeabi_i2d>
     b04:	e1a04000 	mov	r4, r0
     b08:	e1a05001 	mov	r5, r1
						   (interpolation) * (double)sine[(int)index + 1];
     b0c:	e2877001 	add	r7, r7, #1
     b10:	e7960107 	ldr	r0, [r6, r7, lsl #2]
     b14:	eb000397 	bl	1978 <__aeabi_i2d>
     b18:	e3a02000 	mov	r2, #0
     b1c:	e3a03000 	mov	r3, #0
     b20:	eb0003cb 	bl	1a54 <__aeabi_dmul>
     b24:	e1a02000 	mov	r2, r0
     b28:	e1a03001 	mov	r3, r1
}

double make_wave(int instant, double frequency) {
	int index = (int)(frequency * (double)instant) % SAMPLE_RATE;
	double interpolation = (double)(index - (int)index);
	double signals = (1.0 - interpolation) * (double)sine[(int)index] +
     b2c:	e1a00004 	mov	r0, r4
     b30:	e1a01005 	mov	r1, r5
     b34:	eb0002c2 	bl	1644 <__adddf3>
						   (interpolation) * (double)sine[(int)index + 1];
	return signals;
}
     b38:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}

00000b3c <synthesis_sound>:

void synthesis_sound(double * signal, int is_pressed[], int * instance, int volume) {
     b3c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     b40:	e24dd00c 	sub	sp, sp, #12
     b44:	e1a0b000 	mov	r11, r0
     b48:	e1a08001 	mov	r8, r1
     b4c:	e1a0a002 	mov	r10, r2
     b50:	e58d3004 	str	r3, [sp, #4]
     b54:	e3a06000 	mov	r6, #0
	int i = 0, count_note = 0;
	double total = 0; 
     b58:	e3a04000 	mov	r4, #0
     b5c:	e3a05000 	mov	r5, #0
						   (interpolation) * (double)sine[(int)index + 1];
	return signals;
}

void synthesis_sound(double * signal, int is_pressed[], int * instance, int volume) {
	int i = 0, count_note = 0;
     b60:	e1a07006 	mov	r7, r6
	double total = 0; 
	for (i = 0; i < NUM_NOTES; i++) {
		if (is_pressed[i]) {
			total = total + make_wave(*instance, NOTE_LOOKUP[i]);
     b64:	e30293a0 	movw	r9, #9120	; 0x23a0
     b68:	e3409000 	movt	r9, #0

void synthesis_sound(double * signal, int is_pressed[], int * instance, int volume) {
	int i = 0, count_note = 0;
	double total = 0; 
	for (i = 0; i < NUM_NOTES; i++) {
		if (is_pressed[i]) {
     b6c:	e7983006 	ldr	r3, [r8, r6]
     b70:	e3530000 	cmp	r3, #0
     b74:	0a00000b 	beq	ba8 <synthesis_sound+0x6c>
	double signals = (1.0 - interpolation) * (double)sine[(int)index] +
						   (interpolation) * (double)sine[(int)index + 1];
	return signals;
}

void synthesis_sound(double * signal, int is_pressed[], int * instance, int volume) {
     b78:	e1a03086 	lsl	r3, r6, #1
	int i = 0, count_note = 0;
	double total = 0; 
	for (i = 0; i < NUM_NOTES; i++) {
		if (is_pressed[i]) {
			total = total + make_wave(*instance, NOTE_LOOKUP[i]);
     b7c:	e59a0000 	ldr	r0, [r10]
     b80:	e18320d9 	ldrd	r2, [r3, r9]
     b84:	ebffffcb 	bl	ab8 <make_wave>
     b88:	e1a02000 	mov	r2, r0
     b8c:	e1a03001 	mov	r3, r1
     b90:	e1a00004 	mov	r0, r4
     b94:	e1a01005 	mov	r1, r5
     b98:	eb0002a9 	bl	1644 <__adddf3>
     b9c:	e1a04000 	mov	r4, r0
     ba0:	e1a05001 	mov	r5, r1
			count_note = count_note + 1;
     ba4:	e2877001 	add	r7, r7, #1
     ba8:	e2866004 	add	r6, r6, #4
}

void synthesis_sound(double * signal, int is_pressed[], int * instance, int volume) {
	int i = 0, count_note = 0;
	double total = 0; 
	for (i = 0; i < NUM_NOTES; i++) {
     bac:	e356003c 	cmp	r6, #60	; 0x3c
     bb0:	1affffed 	bne	b6c <synthesis_sound+0x30>
		if (is_pressed[i]) {
			total = total + make_wave(*instance, NOTE_LOOKUP[i]);
			count_note = count_note + 1;
		}
	}
	if (count_note > 0) *signal = (total * volume) / (10 * count_note); 
     bb4:	e3570000 	cmp	r7, #0
     bb8:	da000012 	ble	c08 <ICDICFR+0x8>
     bbc:	e59d0004 	ldr	r0, [sp, #4]
     bc0:	eb00036c 	bl	1978 <__aeabi_i2d>
     bc4:	e1a02000 	mov	r2, r0
     bc8:	e1a03001 	mov	r3, r1
     bcc:	e1a00004 	mov	r0, r4
     bd0:	e1a01005 	mov	r1, r5
     bd4:	eb00039e 	bl	1a54 <__aeabi_dmul>
     bd8:	e1a04000 	mov	r4, r0
     bdc:	e1a05001 	mov	r5, r1
     be0:	e0870107 	add	r0, r7, r7, lsl #2
     be4:	e1a00080 	lsl	r0, r0, #1
     be8:	eb000362 	bl	1978 <__aeabi_i2d>
     bec:	e1a02000 	mov	r2, r0
     bf0:	e1a03001 	mov	r3, r1
     bf4:	e1a00004 	mov	r0, r4
     bf8:	e1a01005 	mov	r1, r5
     bfc:	eb000438 	bl	1ce4 <__aeabi_ddiv>
     c00:	e1cb00f0 	strd	r0, [r11]
     c04:	ea000002 	b	c14 <ICDICFR+0x14>
	else *signal = 0.0;
     c08:	e3a02000 	mov	r2, #0
     c0c:	e3a03000 	mov	r3, #0
     c10:	e1cb20f0 	strd	r2, [r11]
    *instance = (*instance + 1) % 48000;
     c14:	e59a3000 	ldr	r3, [r10]
     c18:	e2833001 	add	r3, r3, #1
     c1c:	e30129f1 	movw	r2, #6641	; 0x19f1
     c20:	e3402576 	movt	r2, #1398	; 0x576
     c24:	e0c21392 	smull	r1, r2, r2, r3
     c28:	e1a01fc3 	asr	r1, r3, #31
     c2c:	e0612542 	rsb	r2, r1, r2, asr #10
     c30:	e30b1b80 	movw	r1, #48000	; 0xbb80
     c34:	e0633291 	mls	r3, r1, r2, r3
     c38:	e58a3000 	str	r3, [r10]
}
     c3c:	e28dd00c 	add	sp, sp, #12
     c40:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00000c44 <HEX_clear_ASM>:
     c44:	e3a01000 	mov	r1, #0
     c48:	ea000004 	b	c60 <WRITE>

00000c4c <HEX_flood_ASM>:
     c4c:	e3a0107f 	mov	r1, #127	; 0x7f
     c50:	ea000002 	b	c60 <WRITE>

00000c54 <HEX_write_ASM>:
     c54:	e59f2064 	ldr	r2, [pc, #100]	; cc0 <PATTERNS+0x14>
     c58:	e7d21001 	ldrb	r1, [r2, r1]
     c5c:	eaffffff 	b	c60 <WRITE>

00000c60 <WRITE>:
     c60:	e92d0030 	push	{r4, r5}
     c64:	e59f2058 	ldr	r2, [pc, #88]	; cc4 <PATTERNS+0x18>
     c68:	e3a03000 	mov	r3, #0
     c6c:	e3e050ff 	mvn	r5, #255	; 0xff

00000c70 <LOOP>:
     c70:	e3100001 	tst	r0, #1
     c74:	0a000003 	beq	c88 <CONTINUE>
     c78:	e5924000 	ldr	r4, [r2]
     c7c:	e0044005 	and	r4, r4, r5
     c80:	e1844001 	orr	r4, r4, r1
     c84:	e5824000 	str	r4, [r2]

00000c88 <CONTINUE>:
     c88:	e1a05c65 	ror	r5, r5, #24
     c8c:	e1a01c61 	ror	r1, r1, #24
     c90:	e2833001 	add	r3, r3, #1
     c94:	e3530004 	cmp	r3, #4
     c98:	059f2028 	ldreq	r2, [pc, #40]	; cc8 <PATTERNS+0x1c>
     c9c:	e1b000a0 	lsrs	r0, r0, #1
     ca0:	1afffff2 	bne	c70 <LOOP>
     ca4:	e8bd0030 	pop	{r4, r5}
     ca8:	e12fff1e 	bx	lr

00000cac <PATTERNS>:
     cac:	4f5b063f 	.word	0x4f5b063f
     cb0:	077d6d66 	.word	0x077d6d66
     cb4:	7c776f7f 	.word	0x7c776f7f
     cb8:	71795e39 	.word	0x71795e39
     cbc:	000000ff 	.word	0x000000ff
     cc0:	00000cac 	.word	0x00000cac
     cc4:	ff200020 	.word	0xff200020
     cc8:	ff200030 	.word	0xff200030

00000ccc <HPS_TIM_config_ASM>:
     ccc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
     cd0:	e3a01000 	mov	r1, #0
     cd4:	e3a02001 	mov	r2, #1
     cd8:	e5907000 	ldr	r7, [r0]
     cdc:	eaffffff 	b	ce0 <LOOP>

00000ce0 <LOOP>:
     ce0:	e1170112 	tst	r7, r2, lsl r1
     ce4:	0a000000 	beq	cec <CONTINUE>
     ce8:	eb000004 	bl	d00 <CONFIG>

00000cec <CONTINUE>:
     cec:	e2811001 	add	r1, r1, #1
     cf0:	e3510004 	cmp	r1, #4
     cf4:	bafffff9 	blt	ce0 <LOOP>

00000cf8 <DONE>:
     cf8:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
     cfc:	e12fff1e 	bx	lr

00000d00 <CONFIG>:
     d00:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     d04:	e59f30e4 	ldr	r3, [pc, #228]	; df0 <HPS_TIM_BASE+0x10>
     d08:	e7934101 	ldr	r4, [r3, r1, lsl #2]
     d0c:	eb000005 	bl	d28 <DISABLE>
     d10:	eb000008 	bl	d38 <SET_LOAD_VAL>
     d14:	eb00000e 	bl	d54 <SET_LOAD_BIT>
     d18:	eb000013 	bl	d6c <SET_INT_BIT>
     d1c:	eb000019 	bl	d88 <SET_EN_BIT>
     d20:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     d24:	e12fff1e 	bx	lr

00000d28 <DISABLE>:
     d28:	e5945008 	ldr	r5, [r4, #8]
     d2c:	e3c55001 	bic	r5, r5, #1
     d30:	e5845008 	str	r5, [r4, #8]
     d34:	e12fff1e 	bx	lr

00000d38 <SET_LOAD_VAL>:
     d38:	e5905004 	ldr	r5, [r0, #4]
     d3c:	e3a06019 	mov	r6, #25
     d40:	e0050695 	mul	r5, r5, r6
     d44:	e3510002 	cmp	r1, #2
     d48:	b1a05105 	lsllt	r5, r5, #2
     d4c:	e5845000 	str	r5, [r4]
     d50:	e12fff1e 	bx	lr

00000d54 <SET_LOAD_BIT>:
     d54:	e5945008 	ldr	r5, [r4, #8]
     d58:	e5906008 	ldr	r6, [r0, #8]
     d5c:	e3c55002 	bic	r5, r5, #2
     d60:	e1855086 	orr	r5, r5, r6, lsl #1
     d64:	e5845008 	str	r5, [r4, #8]
     d68:	e12fff1e 	bx	lr

00000d6c <SET_INT_BIT>:
     d6c:	e5945008 	ldr	r5, [r4, #8]
     d70:	e590600c 	ldr	r6, [r0, #12]
     d74:	e2266001 	eor	r6, r6, #1
     d78:	e3c55004 	bic	r5, r5, #4
     d7c:	e1855106 	orr	r5, r5, r6, lsl #2
     d80:	e5845008 	str	r5, [r4, #8]
     d84:	e12fff1e 	bx	lr

00000d88 <SET_EN_BIT>:
     d88:	e5945008 	ldr	r5, [r4, #8]
     d8c:	e5906010 	ldr	r6, [r0, #16]
     d90:	e3c55001 	bic	r5, r5, #1
     d94:	e1855006 	orr	r5, r5, r6
     d98:	e5845008 	str	r5, [r4, #8]
     d9c:	e12fff1e 	bx	lr

00000da0 <HPS_TIM_clear_INT_ASM>:
     da0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     da4:	e3a01000 	mov	r1, #0
     da8:	e3a02001 	mov	r2, #1
     dac:	eaffffff 	b	db0 <INT_LOOP>

00000db0 <INT_LOOP>:
     db0:	e1100112 	tst	r0, r2, lsl r1
     db4:	0a000000 	beq	dbc <INT_CONTINUE>
     db8:	eb000004 	bl	dd0 <CLEAR_IT>

00000dbc <INT_CONTINUE>:
     dbc:	e2811001 	add	r1, r1, #1
     dc0:	e3510004 	cmp	r1, #4
     dc4:	bafffff9 	blt	db0 <INT_LOOP>

00000dc8 <INT_DONE>:
     dc8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     dcc:	e12fff1e 	bx	lr

00000dd0 <CLEAR_IT>:
     dd0:	e59f3018 	ldr	r3, [pc, #24]	; df0 <HPS_TIM_BASE+0x10>
     dd4:	e7933101 	ldr	r3, [r3, r1, lsl #2]
     dd8:	e593300c 	ldr	r3, [r3, #12]
     ddc:	e12fff1e 	bx	lr

00000de0 <HPS_TIM_BASE>:
     de0:	ffc08000 	.word	0xffc08000
     de4:	ffc09000 	.word	0xffc09000
     de8:	ffd00000 	.word	0xffd00000
     dec:	ffd01000 	.word	0xffd01000
     df0:	00000de0 	.word	0x00000de0

00000df4 <hps_tim0_int_flag>:
     df4:	00000000 	.word	0x00000000

00000df8 <hps_tim1_int_flag>:
     df8:	00000000 	.word	0x00000000

00000dfc <pushbtn_int_flag>:
     dfc:	00000000 	.word	0x00000000

00000e00 <A9_PRIV_TIM_ISR>:

pushbtn_int_flag:   
	.word 0x0

A9_PRIV_TIM_ISR:
	BX LR
     e00:	e12fff1e 	bx	lr

00000e04 <HPS_GPIO1_ISR>:
	
HPS_GPIO1_ISR:
	BX LR
     e04:	e12fff1e 	bx	lr

00000e08 <HPS_TIM0_ISR>:
	
HPS_TIM0_ISR:
	PUSH {LR}
     e08:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    MOV R0, #0x1
     e0c:	e3a00001 	mov	r0, #1
    BL HPS_TIM_clear_INT_ASM
     e10:	ebffffe2 	bl	da0 <HPS_TIM_clear_INT_ASM>
    LDR R0, =hps_tim0_int_flag
     e14:	e59f0058 	ldr	r0, [pc, #88]	; e74 <FPGA_PS2_DUAL_ISR+0x4>
    MOV R1, #1
     e18:	e3a01001 	mov	r1, #1
    STR R1, [R0]
     e1c:	e5801000 	str	r1, [r0]
    POP {LR}
     e20:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     e24:	e12fff1e 	bx	lr

00000e28 <HPS_TIM1_ISR>:
	
HPS_TIM1_ISR:
	PUSH {LR}
     e28:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    MOV R0, #0b0010
     e2c:	e3a00002 	mov	r0, #2
    BL HPS_TIM_clear_INT_ASM
     e30:	ebffffda 	bl	da0 <HPS_TIM_clear_INT_ASM>
    LDR R0, =hps_tim1_int_flag
     e34:	e59f003c 	ldr	r0, [pc, #60]	; e78 <FPGA_PS2_DUAL_ISR+0x8>
    MOV R1, #1
     e38:	e3a01001 	mov	r1, #1
    STR R1, [R0]
     e3c:	e5801000 	str	r1, [r0]
    POP {LR}
     e40:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     e44:	e12fff1e 	bx	lr

00000e48 <HPS_TIM2_ISR>:
	
HPS_TIM2_ISR:
	BX LR
     e48:	e12fff1e 	bx	lr

00000e4c <HPS_TIM3_ISR>:
	
HPS_TIM3_ISR:
	BX LR
     e4c:	e12fff1e 	bx	lr

00000e50 <FPGA_INTERVAL_TIM_ISR>:
	
FPGA_INTERVAL_TIM_ISR:
	BX LR
     e50:	e12fff1e 	bx	lr

00000e54 <FPGA_PB_KEYS_ISR>:
	
FPGA_PB_KEYS_ISR:
	BX LR
     e54:	e12fff1e 	bx	lr

00000e58 <FPGA_Audio_ISR>:
	
FPGA_Audio_ISR:
	BX LR
     e58:	e12fff1e 	bx	lr

00000e5c <FPGA_PS2_ISR>:
	
FPGA_PS2_ISR:
	BX LR
     e5c:	e12fff1e 	bx	lr

00000e60 <FPGA_JTAG_ISR>:
	
FPGA_JTAG_ISR:
	BX LR
     e60:	e12fff1e 	bx	lr

00000e64 <FPGA_IrDA_ISR>:
	
FPGA_IrDA_ISR:
	BX LR
     e64:	e12fff1e 	bx	lr

00000e68 <FPGA_JP1_ISR>:
	
FPGA_JP1_ISR:
	BX LR
     e68:	e12fff1e 	bx	lr

00000e6c <FPGA_JP2_ISR>:
	
FPGA_JP2_ISR:
	BX LR
     e6c:	e12fff1e 	bx	lr

00000e70 <FPGA_PS2_DUAL_ISR>:
	
FPGA_PS2_DUAL_ISR:
	BX LR
     e70:	e12fff1e 	bx	lr
	
HPS_TIM0_ISR:
	PUSH {LR}
    MOV R0, #0x1
    BL HPS_TIM_clear_INT_ASM
    LDR R0, =hps_tim0_int_flag
     e74:	00000df4 	.word	0x00000df4
	
HPS_TIM1_ISR:
	PUSH {LR}
    MOV R0, #0b0010
    BL HPS_TIM_clear_INT_ASM
    LDR R0, =hps_tim1_int_flag
     e78:	00000df8 	.word	0x00000df8

00000e7c <read_LEDs_ASM>:
     e7c:	e59f1010 	ldr	r1, [pc, #16]	; e94 <write_LEDs_ASM+0xc>
     e80:	e5910000 	ldr	r0, [r1]
     e84:	e12fff1e 	bx	lr

00000e88 <write_LEDs_ASM>:
     e88:	e59f1004 	ldr	r1, [pc, #4]	; e94 <write_LEDs_ASM+0xc>
     e8c:	e5810000 	str	r0, [r1]
     e90:	e12fff1e 	bx	lr
     e94:	ff200000 	.word	0xff200000

00000e98 <audio_read_data_ASM>:
     e98:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     e9c:	e92d0003 	push	{r0, r1}
     ea0:	eb000093 	bl	10f4 <audio_read_ralc_ASM>
     ea4:	e3500000 	cmp	r0, #0
     ea8:	08bd0003 	popeq	{r0, r1}
     eac:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     eb0:	03a00000 	moveq	r0, #0
     eb4:	012fff1e 	bxeq	lr
     eb8:	eb000092 	bl	1108 <audio_read_rarc_ASM>
     ebc:	e3500000 	cmp	r0, #0
     ec0:	08bd0003 	popeq	{r0, r1}
     ec4:	03a00000 	moveq	r0, #0
     ec8:	012fff1e 	bxeq	lr
     ecc:	e8bd0003 	pop	{r0, r1}
     ed0:	e59f2240 	ldr	r2, [pc, #576]	; 1118 <audio_read_rarc_ASM+0x10>
     ed4:	e5922000 	ldr	r2, [r2]
     ed8:	e5802000 	str	r2, [r0]
     edc:	e59f3238 	ldr	r3, [pc, #568]	; 111c <audio_read_rarc_ASM+0x14>
     ee0:	e5933000 	ldr	r3, [r3]
     ee4:	e5813000 	str	r3, [r1]
     ee8:	e3a00001 	mov	r0, #1

00000eec <audio_read_leftdata_ASM>:
     eec:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     ef0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     ef4:	eb00007e 	bl	10f4 <audio_read_ralc_ASM>
     ef8:	e3500000 	cmp	r0, #0
     efc:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     f00:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     f04:	03a00000 	moveq	r0, #0
     f08:	012fff1e 	bxeq	lr
     f0c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     f10:	e59f2200 	ldr	r2, [pc, #512]	; 1118 <audio_read_rarc_ASM+0x10>
     f14:	e5922000 	ldr	r2, [r2]
     f18:	e5802000 	str	r2, [r0]
     f1c:	e3a00001 	mov	r0, #1
     f20:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     f24:	e12fff1e 	bx	lr

00000f28 <audio_read_rightdata_ASM>:
     f28:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     f2c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     f30:	eb000074 	bl	1108 <audio_read_rarc_ASM>
     f34:	e3500000 	cmp	r0, #0
     f38:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     f3c:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     f40:	03a00000 	moveq	r0, #0
     f44:	012fff1e 	bxeq	lr
     f48:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     f4c:	e59f21c8 	ldr	r2, [pc, #456]	; 111c <audio_read_rarc_ASM+0x14>
     f50:	e5922000 	ldr	r2, [r2]
     f54:	e5802000 	str	r2, [r0]
     f58:	e3a00001 	mov	r0, #1
     f5c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     f60:	e12fff1e 	bx	lr

00000f64 <audio_write_data_ASM>:
     f64:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     f68:	e92d0003 	push	{r0, r1}
     f6c:	eb000056 	bl	10cc <audio_read_wslc_ASM>
     f70:	e3500000 	cmp	r0, #0
     f74:	08bd0003 	popeq	{r0, r1}
     f78:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     f7c:	03a00000 	moveq	r0, #0
     f80:	012fff1e 	bxeq	lr
     f84:	eb000055 	bl	10e0 <audio_read_wsrc_ASM>
     f88:	e3500000 	cmp	r0, #0
     f8c:	08bd0003 	popeq	{r0, r1}
     f90:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     f94:	03a00000 	moveq	r0, #0
     f98:	012fff1e 	bxeq	lr
     f9c:	e8bd0003 	pop	{r0, r1}
     fa0:	e59f2170 	ldr	r2, [pc, #368]	; 1118 <audio_read_rarc_ASM+0x10>
     fa4:	e5820000 	str	r0, [r2]
     fa8:	e59f316c 	ldr	r3, [pc, #364]	; 111c <audio_read_rarc_ASM+0x14>
     fac:	e5831000 	str	r1, [r3]
     fb0:	e3a00001 	mov	r0, #1
     fb4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     fb8:	e12fff1e 	bx	lr

00000fbc <audio_write_leftdata_ASM>:
     fbc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     fc0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     fc4:	eb000040 	bl	10cc <audio_read_wslc_ASM>
     fc8:	e3500000 	cmp	r0, #0
     fcc:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     fd0:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     fd4:	03a00000 	moveq	r0, #0
     fd8:	012fff1e 	bxeq	lr
     fdc:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     fe0:	e59f2130 	ldr	r2, [pc, #304]	; 1118 <audio_read_rarc_ASM+0x10>
     fe4:	e5820000 	str	r0, [r2]
     fe8:	e3a00001 	mov	r0, #1
     fec:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     ff0:	e12fff1e 	bx	lr

00000ff4 <audio_write_rightdata_ASM>:
     ff4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     ff8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     ffc:	eb000037 	bl	10e0 <audio_read_wsrc_ASM>
    1000:	e3500000 	cmp	r0, #0
    1004:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
    1008:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
    100c:	03a00000 	moveq	r0, #0
    1010:	012fff1e 	bxeq	lr
    1014:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    1018:	e59f20fc 	ldr	r2, [pc, #252]	; 111c <audio_read_rarc_ASM+0x14>
    101c:	e5820000 	str	r0, [r2]
    1020:	e3a00001 	mov	r0, #1
    1024:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    1028:	e12fff1e 	bx	lr

0000102c <audio_enable_read_fifo_clear_ASM>:
    102c:	e59f00ec 	ldr	r0, [pc, #236]	; 1120 <audio_read_rarc_ASM+0x18>
    1030:	e5901000 	ldr	r1, [r0]
    1034:	e3811004 	orr	r1, r1, #4
    1038:	e5801000 	str	r1, [r0]
    103c:	e12fff1e 	bx	lr

00001040 <audio_enable_write_fifo_clear_ASM>:
    1040:	e59f00d8 	ldr	r0, [pc, #216]	; 1120 <audio_read_rarc_ASM+0x18>
    1044:	e5901000 	ldr	r1, [r0]
    1048:	e3811008 	orr	r1, r1, #8
    104c:	e5801000 	str	r1, [r0]
    1050:	e12fff1e 	bx	lr

00001054 <audio_disable_read_fifo_clear_ASM>:
    1054:	e59f00c4 	ldr	r0, [pc, #196]	; 1120 <audio_read_rarc_ASM+0x18>
    1058:	e5901000 	ldr	r1, [r0]
    105c:	e3c11004 	bic	r1, r1, #4
    1060:	e5801000 	str	r1, [r0]
    1064:	e12fff1e 	bx	lr

00001068 <audio_disable_write_fifo_clear_ASM>:
    1068:	e59f00b0 	ldr	r0, [pc, #176]	; 1120 <audio_read_rarc_ASM+0x18>
    106c:	e5901000 	ldr	r1, [r0]
    1070:	e3c11008 	bic	r1, r1, #8
    1074:	e5801000 	str	r1, [r0]
    1078:	e12fff1e 	bx	lr

0000107c <audio_enable_read_int_ASM>:
    107c:	e59f009c 	ldr	r0, [pc, #156]	; 1120 <audio_read_rarc_ASM+0x18>
    1080:	e5901000 	ldr	r1, [r0]
    1084:	e3811001 	orr	r1, r1, #1
    1088:	e5801000 	str	r1, [r0]
    108c:	e12fff1e 	bx	lr

00001090 <audio_enable_write_int_ASM>:
    1090:	e59f0088 	ldr	r0, [pc, #136]	; 1120 <audio_read_rarc_ASM+0x18>
    1094:	e5901000 	ldr	r1, [r0]
    1098:	e3811002 	orr	r1, r1, #2
    109c:	e5801000 	str	r1, [r0]
    10a0:	e12fff1e 	bx	lr

000010a4 <audio_disable_read_int_ASM>:
    10a4:	e59f0074 	ldr	r0, [pc, #116]	; 1120 <audio_read_rarc_ASM+0x18>
    10a8:	e5901000 	ldr	r1, [r0]
    10ac:	e3c11001 	bic	r1, r1, #1
    10b0:	e5801000 	str	r1, [r0]
    10b4:	e12fff1e 	bx	lr

000010b8 <audio_disable_write_int_ASM>:
    10b8:	e59f0060 	ldr	r0, [pc, #96]	; 1120 <audio_read_rarc_ASM+0x18>
    10bc:	e5901000 	ldr	r1, [r0]
    10c0:	e3c11002 	bic	r1, r1, #2
    10c4:	e5801000 	str	r1, [r0]
    10c8:	e12fff1e 	bx	lr

000010cc <audio_read_wslc_ASM>:
    10cc:	e59f0050 	ldr	r0, [pc, #80]	; 1124 <audio_read_rarc_ASM+0x1c>
    10d0:	e5900000 	ldr	r0, [r0]
    10d4:	e1a00c20 	lsr	r0, r0, #24
    10d8:	e20000ff 	and	r0, r0, #255	; 0xff
    10dc:	e12fff1e 	bx	lr

000010e0 <audio_read_wsrc_ASM>:
    10e0:	e59f003c 	ldr	r0, [pc, #60]	; 1124 <audio_read_rarc_ASM+0x1c>
    10e4:	e5900000 	ldr	r0, [r0]
    10e8:	e1a00820 	lsr	r0, r0, #16
    10ec:	e20000ff 	and	r0, r0, #255	; 0xff
    10f0:	e12fff1e 	bx	lr

000010f4 <audio_read_ralc_ASM>:
    10f4:	e59f0028 	ldr	r0, [pc, #40]	; 1124 <audio_read_rarc_ASM+0x1c>
    10f8:	e5900000 	ldr	r0, [r0]
    10fc:	e1a00420 	lsr	r0, r0, #8
    1100:	e20000ff 	and	r0, r0, #255	; 0xff
    1104:	e12fff1e 	bx	lr

00001108 <audio_read_rarc_ASM>:
    1108:	e59f0014 	ldr	r0, [pc, #20]	; 1124 <audio_read_rarc_ASM+0x1c>
    110c:	e5900000 	ldr	r0, [r0]
    1110:	e20000ff 	and	r0, r0, #255	; 0xff
    1114:	e12fff1e 	bx	lr
    1118:	ff203048 	.word	0xff203048
    111c:	ff20304c 	.word	0xff20304c
    1120:	ff203040 	.word	0xff203040
    1124:	ff203044 	.word	0xff203044

00001128 <read_ps2_data_ASM>:
    1128:	e59f114c 	ldr	r1, [pc, #332]	; 127c <ps2_fifo_ravail+0x4>
    112c:	e5911000 	ldr	r1, [r1]
    1130:	e3a02902 	mov	r2, #32768	; 0x8000
    1134:	e1110002 	tst	r1, r2
    1138:	03a00000 	moveq	r0, #0
    113c:	012fff1e 	bxeq	lr
    1140:	e20120ff 	and	r2, r1, #255	; 0xff
    1144:	e5c02000 	strb	r2, [r0]
    1148:	e59f2130 	ldr	r2, [pc, #304]	; 1280 <ps2_fifo_ravail+0x8>
    114c:	e0010002 	and	r0, r1, r2
    1150:	e1a00820 	lsr	r0, r0, #16
    1154:	e12fff1e 	bx	lr

00001158 <enable_ps2_int_ASM>:
    1158:	e59f011c 	ldr	r0, [pc, #284]	; 127c <ps2_fifo_ravail+0x4>
    115c:	e3a01001 	mov	r1, #1
    1160:	e5c01004 	strb	r1, [r0, #4]
    1164:	e12fff1e 	bx	lr

00001168 <disable_ps2_int_ASM>:
    1168:	e59f010c 	ldr	r0, [pc, #268]	; 127c <ps2_fifo_ravail+0x4>
    116c:	e3a01000 	mov	r1, #0
    1170:	e5c01004 	strb	r1, [r0, #4]
    1174:	e12fff1e 	bx	lr

00001178 <ps2_fifo_data>:
	...

00001278 <ps2_fifo_ravail>:
    1278:	00000000 	.word	0x00000000
    127c:	ff200100 	.word	0xff200100
    1280:	ffff0000 	.word	0xffff0000

00001284 <read_PB_data_ASM>:
    1284:	e59f1074 	ldr	r1, [pc, #116]	; 1300 <disable_PB_INT_ASM+0x14>
    1288:	e5910000 	ldr	r0, [r1]
    128c:	e12fff1e 	bx	lr

00001290 <PB_data_is_pressed_ASM>:
    1290:	e59f1068 	ldr	r1, [pc, #104]	; 1300 <disable_PB_INT_ASM+0x14>
    1294:	e5912000 	ldr	r2, [r1]
    1298:	e0000002 	and	r0, r0, r2
    129c:	e3300000 	teq	r0, #0
    12a0:	13a00001 	movne	r0, #1
    12a4:	e12fff1e 	bx	lr

000012a8 <read_PB_edgecap_ASM>:
    12a8:	e59f1054 	ldr	r1, [pc, #84]	; 1304 <disable_PB_INT_ASM+0x18>
    12ac:	e5910000 	ldr	r0, [r1]
    12b0:	e12fff1e 	bx	lr

000012b4 <PB_edgecap_is_pressed_ASM>:
    12b4:	e59f1048 	ldr	r1, [pc, #72]	; 1304 <disable_PB_INT_ASM+0x18>
    12b8:	e5912000 	ldr	r2, [r1]
    12bc:	e0000002 	and	r0, r0, r2
    12c0:	e3300000 	teq	r0, #0
    12c4:	13a00001 	movne	r0, #1
    12c8:	e12fff1e 	bx	lr

000012cc <PB_clear_edgecp_ASM>:
    12cc:	e59f1030 	ldr	r1, [pc, #48]	; 1304 <disable_PB_INT_ASM+0x18>
    12d0:	e5810000 	str	r0, [r1]
    12d4:	e12fff1e 	bx	lr

000012d8 <enable_PB_INT_ASM>:
    12d8:	e59f1028 	ldr	r1, [pc, #40]	; 1308 <disable_PB_INT_ASM+0x1c>
    12dc:	e5912000 	ldr	r2, [r1]
    12e0:	e1800002 	orr	r0, r0, r2
    12e4:	e5810000 	str	r0, [r1]
    12e8:	e12fff1e 	bx	lr

000012ec <disable_PB_INT_ASM>:
    12ec:	e59f1014 	ldr	r1, [pc, #20]	; 1308 <disable_PB_INT_ASM+0x1c>
    12f0:	e5912000 	ldr	r2, [r1]
    12f4:	e1c00002 	bic	r0, r0, r2
    12f8:	e5810000 	str	r0, [r1]
    12fc:	e12fff1e 	bx	lr
    1300:	ff200050 	.word	0xff200050
    1304:	ff20005c 	.word	0xff20005c
    1308:	ff200058 	.word	0xff200058

0000130c <read_slider_switches_ASM>:
    130c:	e59f1004 	ldr	r1, [pc, #4]	; 1318 <read_slider_switches_ASM+0xc>
    1310:	e5910000 	ldr	r0, [r1]
    1314:	e12fff1e 	bx	lr
    1318:	ff200040 	.word	0xff200040

0000131c <VGA_clear_charbuff_ASM>:
    131c:	e92d0030 	push	{r4, r5}
    1320:	e3a02000 	mov	r2, #0
    1324:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    1328:	e3a00000 	mov	r0, #0

0000132c <CHAR_LOOPX>:
    132c:	e3a01000 	mov	r1, #0
    1330:	e0834000 	add	r4, r3, r0

00001334 <CHAR_LOOPY>:
    1334:	e0845381 	add	r5, r4, r1, lsl #7
    1338:	e5c52000 	strb	r2, [r5]
    133c:	e2811001 	add	r1, r1, #1
    1340:	e351003c 	cmp	r1, #60	; 0x3c
    1344:	bafffffa 	blt	1334 <CHAR_LOOPY>
    1348:	e2800001 	add	r0, r0, #1
    134c:	e3500050 	cmp	r0, #80	; 0x50
    1350:	bafffff5 	blt	132c <CHAR_LOOPX>
    1354:	e8bd0030 	pop	{r4, r5}
    1358:	e12fff1e 	bx	lr

0000135c <VGA_clear_pixelbuff_ASM>:
    135c:	e92d0030 	push	{r4, r5}
    1360:	e3a02000 	mov	r2, #0
    1364:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
    1368:	e3a00000 	mov	r0, #0

0000136c <PIXEL_LOOPX>:
    136c:	e3a01000 	mov	r1, #0
    1370:	e0834080 	add	r4, r3, r0, lsl #1

00001374 <PIXEL_LOOPY>:
    1374:	e0845501 	add	r5, r4, r1, lsl #10
    1378:	e1c520b0 	strh	r2, [r5]
    137c:	e2811001 	add	r1, r1, #1
    1380:	e35100f0 	cmp	r1, #240	; 0xf0
    1384:	bafffffa 	blt	1374 <PIXEL_LOOPY>
    1388:	e2800001 	add	r0, r0, #1
    138c:	e3500d05 	cmp	r0, #320	; 0x140
    1390:	bafffff5 	blt	136c <PIXEL_LOOPX>
    1394:	e8bd0030 	pop	{r4, r5}
    1398:	e12fff1e 	bx	lr

0000139c <VGA_write_char_ASM>:
    139c:	e3500000 	cmp	r0, #0
    13a0:	b12fff1e 	bxlt	lr
    13a4:	e3510000 	cmp	r1, #0
    13a8:	b12fff1e 	bxlt	lr
    13ac:	e350004f 	cmp	r0, #79	; 0x4f
    13b0:	c12fff1e 	bxgt	lr
    13b4:	e351003b 	cmp	r1, #59	; 0x3b
    13b8:	c12fff1e 	bxgt	lr
    13bc:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    13c0:	e0833000 	add	r3, r3, r0
    13c4:	e0833381 	add	r3, r3, r1, lsl #7
    13c8:	e5c32000 	strb	r2, [r3]
    13cc:	e12fff1e 	bx	lr

000013d0 <VGA_write_byte_ASM>:
    13d0:	e3500000 	cmp	r0, #0
    13d4:	b12fff1e 	bxlt	lr
    13d8:	e3510000 	cmp	r1, #0
    13dc:	b12fff1e 	bxlt	lr
    13e0:	e350004e 	cmp	r0, #78	; 0x4e
    13e4:	c12fff1e 	bxgt	lr
    13e8:	e351003b 	cmp	r1, #59	; 0x3b
    13ec:	c12fff1e 	bxgt	lr
    13f0:	e92d0030 	push	{r4, r5}
    13f4:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    13f8:	e20250f0 	and	r5, r2, #240	; 0xf0
    13fc:	e1a05225 	lsr	r5, r5, #4
    1400:	e202400f 	and	r4, r2, #15
    1404:	e59f2068 	ldr	r2, [pc, #104]	; 1474 <HEX_ASCII+0x10>
    1408:	e7d25005 	ldrb	r5, [r2, r5]
    140c:	e7d24004 	ldrb	r4, [r2, r4]
    1410:	e0833000 	add	r3, r3, r0
    1414:	e0833381 	add	r3, r3, r1, lsl #7
    1418:	e5c35000 	strb	r5, [r3]
    141c:	e2833001 	add	r3, r3, #1
    1420:	e5c34000 	strb	r4, [r3]
    1424:	e8bd0030 	pop	{r4, r5}
    1428:	e12fff1e 	bx	lr

0000142c <VGA_draw_point_ASM>:
    142c:	e59f3044 	ldr	r3, [pc, #68]	; 1478 <HEX_ASCII+0x14>
    1430:	e3500000 	cmp	r0, #0
    1434:	b12fff1e 	bxlt	lr
    1438:	e3510000 	cmp	r1, #0
    143c:	b12fff1e 	bxlt	lr
    1440:	e1500003 	cmp	r0, r3
    1444:	c12fff1e 	bxgt	lr
    1448:	e35100ef 	cmp	r1, #239	; 0xef
    144c:	c12fff1e 	bxgt	lr
    1450:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
    1454:	e0833080 	add	r3, r3, r0, lsl #1
    1458:	e0833501 	add	r3, r3, r1, lsl #10
    145c:	e1c320b0 	strh	r2, [r3]
    1460:	e12fff1e 	bx	lr

00001464 <HEX_ASCII>:
    1464:	33323130 	.word	0x33323130
    1468:	37363534 	.word	0x37363534
    146c:	42413938 	.word	0x42413938
    1470:	46454443 	.word	0x46454443
    1474:	00001464 	.word	0x00001464
    1478:	0000013f 	.word	0x0000013f

0000147c <main>:
#include "./drivers/inc/sound_util.h"
#include "./drivers/inc/kbd_listener_util.h"

#define RENDER_FREQ 5

int main() {
    147c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1480:	e28db020 	add	r11, sp, #32
    1484:	e24dd044 	sub	sp, sp, #68	; 0x44

	// Application States declearation
	int display[VGA_COL_LEN];
    1488:	e3023374 	movw	r3, #9076	; 0x2374
    148c:	e3403000 	movt	r3, #0
    1490:	e5932000 	ldr	r2, [r3]
    1494:	e1a02102 	lsl	r2, r2, #2
    1498:	e282200a 	add	r2, r2, #10
    149c:	e3c22007 	bic	r2, r2, #7
    14a0:	e04dd002 	sub	sp, sp, r2
    14a4:	e1a0000d 	mov	r0, sp
	int is_specific_btn_pressed[NUM_NOTES];
    14a8:	e3023418 	movw	r3, #9240	; 0x2418
    14ac:	e3403000 	movt	r3, #0
    14b0:	e5933000 	ldr	r3, [r3]
    14b4:	e1a03103 	lsl	r3, r3, #2
    14b8:	e283300a 	add	r3, r3, #10
    14bc:	e3c33007 	bic	r3, r3, #7
    14c0:	e04dd003 	sub	sp, sp, r3
    14c4:	e1a0500d 	mov	r5, sp
	int current_pixels[VGA_COL_LEN]; 
    14c8:	e04dd002 	sub	sp, sp, r2
    14cc:	e1a0900d 	mov	r9, sp
	int is_break = 0;
    14d0:	e3a04000 	mov	r4, #0
    14d4:	e50b402c 	str	r4, [r11, #-44]	; 0xffffffd4
	int ampl = 5;
    14d8:	e3a03005 	mov	r3, #5
    14dc:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
	int instance = 0;
    14e0:	e50b4034 	str	r4, [r11, #-52]	; 0xffffffcc

	// Application States initiallization
	clear_signal(display, current_pixels);
    14e4:	e50b0060 	str	r0, [r11, #-96]	; 0xffffffa0
    14e8:	e50bd064 	str	sp, [r11, #-100]	; 0xffffff9c
    14ec:	e1a0100d 	mov	r1, sp
    14f0:	ebfffb59 	bl	25c <clear_signal>
	clear_ispressed(is_specific_btn_pressed);
    14f4:	e1a08005 	mov	r8, r5
    14f8:	e1a00005 	mov	r0, r5
    14fc:	ebfffd66 	bl	a9c <clear_ispressed>
	VGA_clear_charbuff_ASM();
    1500:	ebffff85 	bl	131c <VGA_clear_charbuff_ASM>
	VGA_clear_pixelbuff_ASM();
    1504:	ebffff94 	bl	135c <VGA_clear_pixelbuff_ASM>

	// Transfer Variables
	double signal = 0;
    1508:	e3a02000 	mov	r2, #0
    150c:	e3a03000 	mov	r3, #0
    1510:	e14b23fc 	strd	r2, [r11, #-60]	; 0xffffffc4
	char to_read = 0;
    1514:	e54b403d 	strb	r4, [r11, #-61]	; 0xffffffc3

	// Interrupt Timer for Sampling
	int_setup(1, (int []){199});
    1518:	e24b1024 	sub	r1, r11, #36	; 0x24
    151c:	e3a030c7 	mov	r3, #199	; 0xc7
    1520:	e5213004 	str	r3, [r1, #-4]!
    1524:	e3a00001 	mov	r0, #1
    1528:	ebfffc81 	bl	734 <int_setup>

	HPS_TIM_config_t hps_tim_aud;

	hps_tim_aud.tim = TIM0;
    152c:	e3a03001 	mov	r3, #1
    1530:	e54b3058 	strb	r3, [r11, #-88]	; 0xffffffa8
	hps_tim_aud.timeout = 20;
    1534:	e3a02014 	mov	r2, #20
    1538:	e50b2054 	str	r2, [r11, #-84]	; 0xffffffac
	hps_tim_aud.LD_en = 1;
    153c:	e50b3050 	str	r3, [r11, #-80]	; 0xffffffb0
	hps_tim_aud.INT_en = 1;
    1540:	e50b304c 	str	r3, [r11, #-76]	; 0xffffffb4
	hps_tim_aud.enable = 1;
    1544:	e50b3048 	str	r3, [r11, #-72]	; 0xffffffb8

	HPS_TIM_config_ASM(&hps_tim_aud);
    1548:	e24b0058 	sub	r0, r11, #88	; 0x58
    154c:	ebfffdde 	bl	ccc <HPS_TIM_config_ASM>
	// Point of Injection
	while(1) {

		if (read_ps2_data_ASM(&to_read)) handle_note_pressed_listener(is_specific_btn_pressed, &is_break, &to_read, &ampl);

		if(hps_tim0_int_flag == 1) {
    1550:	e3006df4 	movw	r6, #3572	; 0xdf4
    1554:	e3406000 	movt	r6, #0

			hps_tim0_int_flag = 0;

			audio_write_data_ASM(signal * 8, signal * 8);
    1558:	e3a04000 	mov	r4, #0
    155c:	e3a05000 	mov	r5, #0
    1560:	e3445020 	movt	r5, #16416	; 0x4020

			synthesis_sound(&signal, is_specific_btn_pressed, &instance, ampl);

			int col = instance % (48000 / RENDER_FREQ); 
    1564:	e308a1b5 	movw	r10, #33205	; 0x81b5
    1568:	e341ab4e 	movt	r10, #6990	; 0x1b4e
	HPS_TIM_config_ASM(&hps_tim_aud);

	// Point of Injection
	while(1) {

		if (read_ps2_data_ASM(&to_read)) handle_note_pressed_listener(is_specific_btn_pressed, &is_break, &to_read, &ampl);
    156c:	e24b003d 	sub	r0, r11, #61	; 0x3d
    1570:	ebfffeec 	bl	1128 <read_ps2_data_ASM>
    1574:	e3500000 	cmp	r0, #0
    1578:	0a000004 	beq	1590 <main+0x114>
    157c:	e1a00008 	mov	r0, r8
    1580:	e24b102c 	sub	r1, r11, #44	; 0x2c
    1584:	e24b203d 	sub	r2, r11, #61	; 0x3d
    1588:	e24b3030 	sub	r3, r11, #48	; 0x30
    158c:	ebfffc73 	bl	760 <handle_note_pressed_listener>

		if(hps_tim0_int_flag == 1) {
    1590:	e5963000 	ldr	r3, [r6]
    1594:	e3530001 	cmp	r3, #1
    1598:	1afffff3 	bne	156c <main+0xf0>

			hps_tim0_int_flag = 0;
    159c:	e3a03000 	mov	r3, #0
    15a0:	e5863000 	str	r3, [r6]

			audio_write_data_ASM(signal * 8, signal * 8);
    15a4:	e24b7024 	sub	r7, r11, #36	; 0x24
    15a8:	e16701d8 	ldrd	r0, [r7, #-24]!	; 0xffffffe8
    15ac:	e1a02004 	mov	r2, r4
    15b0:	e1a03005 	mov	r3, r5
    15b4:	eb000126 	bl	1a54 <__aeabi_dmul>
    15b8:	eb00024c 	bl	1ef0 <__aeabi_d2iz>
    15bc:	e1a01000 	mov	r1, r0
    15c0:	ebfffe67 	bl	f64 <audio_write_data_ASM>

			synthesis_sound(&signal, is_specific_btn_pressed, &instance, ampl);
    15c4:	e1a00007 	mov	r0, r7
    15c8:	e1a01008 	mov	r1, r8
    15cc:	e24b2034 	sub	r2, r11, #52	; 0x34
    15d0:	e51b3030 	ldr	r3, [r11, #-48]	; 0xffffffd0
    15d4:	ebfffd58 	bl	b3c <synthesis_sound>

			int col = instance % (48000 / RENDER_FREQ); 
    15d8:	e51b3034 	ldr	r3, [r11, #-52]	; 0xffffffcc
    15dc:	e0c7239a 	smull	r2, r7, r10, r3
    15e0:	e1a02fc3 	asr	r2, r3, #31
    15e4:	e0627547 	rsb	r7, r2, r7, asr #10
    15e8:	e3a02d96 	mov	r2, #9600	; 0x2580
    15ec:	e0673792 	mls	r7, r2, r7, r3
			
			if (col >=0 && col <=319) current_pixels[col] = signal; 
    15f0:	e3570d05 	cmp	r7, #320	; 0x140
    15f4:	2a000002 	bcs	1604 <main+0x188>
    15f8:	e14b03dc 	ldrd	r0, [r11, #-60]	; 0xffffffc4
    15fc:	eb00023b 	bl	1ef0 <__aeabi_d2iz>
    1600:	e7890107 	str	r0, [r9, r7, lsl #2]

			if (col % (48000 / RENDER_FREQ) == 320) render(display, current_pixels, ampl, is_specific_btn_pressed);
    1604:	e0c2379a 	smull	r3, r2, r10, r7
    1608:	e1a03fc7 	asr	r3, r7, #31
    160c:	e0633542 	rsb	r3, r3, r2, asr #10
    1610:	e3a02d96 	mov	r2, #9600	; 0x2580
    1614:	e0677392 	mls	r7, r2, r3, r7
    1618:	e3570d05 	cmp	r7, #320	; 0x140
    161c:	1affffd2 	bne	156c <main+0xf0>
    1620:	e51b0060 	ldr	r0, [r11, #-96]	; 0xffffffa0
    1624:	e51b1064 	ldr	r1, [r11, #-100]	; 0xffffff9c
    1628:	e51b2030 	ldr	r2, [r11, #-48]	; 0xffffffd0
    162c:	e1a03008 	mov	r3, r8
    1630:	ebfffb33 	bl	304 <render>
    1634:	eaffffcc 	b	156c <main+0xf0>

00001638 <__aeabi_drsub>:
    1638:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
    163c:	ea000000 	b	1644 <__adddf3>

00001640 <__aeabi_dsub>:
    1640:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

00001644 <__adddf3>:
    1644:	e92d4030 	push	{r4, r5, lr}
    1648:	e1a04081 	lsl	r4, r1, #1
    164c:	e1a05083 	lsl	r5, r3, #1
    1650:	e1340005 	teq	r4, r5
    1654:	01300002 	teqeq	r0, r2
    1658:	1194c000 	orrsne	r12, r4, r0
    165c:	1195c002 	orrsne	r12, r5, r2
    1660:	11f0cac4 	mvnsne	r12, r4, asr #21
    1664:	11f0cac5 	mvnsne	r12, r5, asr #21
    1668:	0a00008c 	beq	18a0 <__adddf3+0x25c>
    166c:	e1a04aa4 	lsr	r4, r4, #21
    1670:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
    1674:	b2655000 	rsblt	r5, r5, #0
    1678:	da000006 	ble	1698 <__adddf3+0x54>
    167c:	e0844005 	add	r4, r4, r5
    1680:	e0202002 	eor	r2, r0, r2
    1684:	e0213003 	eor	r3, r1, r3
    1688:	e0220000 	eor	r0, r2, r0
    168c:	e0231001 	eor	r1, r3, r1
    1690:	e0202002 	eor	r2, r0, r2
    1694:	e0213003 	eor	r3, r1, r3
    1698:	e3550036 	cmp	r5, #54	; 0x36
    169c:	88bd4030 	pophi	{r4, r5, lr}
    16a0:	812fff1e 	bxhi	lr
    16a4:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    16a8:	e1a01601 	lsl	r1, r1, #12
    16ac:	e3a0c601 	mov	r12, #1048576	; 0x100000
    16b0:	e18c1621 	orr	r1, r12, r1, lsr #12
    16b4:	0a000001 	beq	16c0 <__adddf3+0x7c>
    16b8:	e2700000 	rsbs	r0, r0, #0
    16bc:	e2e11000 	rsc	r1, r1, #0
    16c0:	e3130102 	tst	r3, #-2147483648	; 0x80000000
    16c4:	e1a03603 	lsl	r3, r3, #12
    16c8:	e18c3623 	orr	r3, r12, r3, lsr #12
    16cc:	0a000001 	beq	16d8 <__adddf3+0x94>
    16d0:	e2722000 	rsbs	r2, r2, #0
    16d4:	e2e33000 	rsc	r3, r3, #0
    16d8:	e1340005 	teq	r4, r5
    16dc:	0a000069 	beq	1888 <__adddf3+0x244>
    16e0:	e2444001 	sub	r4, r4, #1
    16e4:	e275e020 	rsbs	lr, r5, #32
    16e8:	ba000005 	blt	1704 <__adddf3+0xc0>
    16ec:	e1a0ce12 	lsl	r12, r2, lr
    16f0:	e0900532 	adds	r0, r0, r2, lsr r5
    16f4:	e2a11000 	adc	r1, r1, #0
    16f8:	e0900e13 	adds	r0, r0, r3, lsl lr
    16fc:	e0b11553 	adcs	r1, r1, r3, asr r5
    1700:	ea000006 	b	1720 <__adddf3+0xdc>
    1704:	e2455020 	sub	r5, r5, #32
    1708:	e28ee020 	add	lr, lr, #32
    170c:	e3520001 	cmp	r2, #1
    1710:	e1a0ce13 	lsl	r12, r3, lr
    1714:	238cc002 	orrcs	r12, r12, #2
    1718:	e0900553 	adds	r0, r0, r3, asr r5
    171c:	e0b11fc3 	adcs	r1, r1, r3, asr #31
    1720:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1724:	5a000002 	bpl	1734 <__adddf3+0xf0>
    1728:	e27cc000 	rsbs	r12, r12, #0
    172c:	e2f00000 	rscs	r0, r0, #0
    1730:	e2e11000 	rsc	r1, r1, #0
    1734:	e3510601 	cmp	r1, #1048576	; 0x100000
    1738:	3a00000f 	bcc	177c <__adddf3+0x138>
    173c:	e3510602 	cmp	r1, #2097152	; 0x200000
    1740:	3a000006 	bcc	1760 <__adddf3+0x11c>
    1744:	e1b010a1 	lsrs	r1, r1, #1
    1748:	e1b00060 	rrxs	r0, r0
    174c:	e1a0c06c 	rrx	r12, r12
    1750:	e2844001 	add	r4, r4, #1
    1754:	e1a02a84 	lsl	r2, r4, #21
    1758:	e3720501 	cmn	r2, #4194304	; 0x400000
    175c:	2a00006b 	bcs	1910 <__adddf3+0x2cc>
    1760:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    1764:	01b0c0a0 	lsrseq	r12, r0, #1
    1768:	e2b00000 	adcs	r0, r0, #0
    176c:	e0a11a04 	adc	r1, r1, r4, lsl #20
    1770:	e1811005 	orr	r1, r1, r5
    1774:	e8bd4030 	pop	{r4, r5, lr}
    1778:	e12fff1e 	bx	lr
    177c:	e1b0c08c 	lsls	r12, r12, #1
    1780:	e0b00000 	adcs	r0, r0, r0
    1784:	e0a11001 	adc	r1, r1, r1
    1788:	e3110601 	tst	r1, #1048576	; 0x100000
    178c:	e2444001 	sub	r4, r4, #1
    1790:	1afffff2 	bne	1760 <__adddf3+0x11c>
    1794:	e3310000 	teq	r1, #0
    1798:	13a03014 	movne	r3, #20
    179c:	03a03034 	moveq	r3, #52	; 0x34
    17a0:	01a01000 	moveq	r1, r0
    17a4:	03a00000 	moveq	r0, #0
    17a8:	e1a02001 	mov	r2, r1
    17ac:	e3520801 	cmp	r2, #65536	; 0x10000
    17b0:	21a02822 	lsrcs	r2, r2, #16
    17b4:	22433010 	subcs	r3, r3, #16
    17b8:	e3520c01 	cmp	r2, #256	; 0x100
    17bc:	21a02422 	lsrcs	r2, r2, #8
    17c0:	22433008 	subcs	r3, r3, #8
    17c4:	e3520010 	cmp	r2, #16
    17c8:	21a02222 	lsrcs	r2, r2, #4
    17cc:	22433004 	subcs	r3, r3, #4
    17d0:	e3520004 	cmp	r2, #4
    17d4:	22433002 	subcs	r3, r3, #2
    17d8:	304330a2 	subcc	r3, r3, r2, lsr #1
    17dc:	e04331a2 	sub	r3, r3, r2, lsr #3
    17e0:	e2532020 	subs	r2, r3, #32
    17e4:	aa000007 	bge	1808 <__adddf3+0x1c4>
    17e8:	e292200c 	adds	r2, r2, #12
    17ec:	da000004 	ble	1804 <__adddf3+0x1c0>
    17f0:	e282c014 	add	r12, r2, #20
    17f4:	e262200c 	rsb	r2, r2, #12
    17f8:	e1a00c11 	lsl	r0, r1, r12
    17fc:	e1a01231 	lsr	r1, r1, r2
    1800:	ea000004 	b	1818 <__adddf3+0x1d4>
    1804:	e2822014 	add	r2, r2, #20
    1808:	d262c020 	rsble	r12, r2, #32
    180c:	e1a01211 	lsl	r1, r1, r2
    1810:	d1811c30 	orrle	r1, r1, r0, lsr r12
    1814:	d1a00210 	lslle	r0, r0, r2
    1818:	e0544003 	subs	r4, r4, r3
    181c:	a0811a04 	addge	r1, r1, r4, lsl #20
    1820:	a1811005 	orrge	r1, r1, r5
    1824:	a8bd4030 	popge	{r4, r5, lr}
    1828:	a12fff1e 	bxge	lr
    182c:	e1e04004 	mvn	r4, r4
    1830:	e254401f 	subs	r4, r4, #31
    1834:	aa00000f 	bge	1878 <__adddf3+0x234>
    1838:	e294400c 	adds	r4, r4, #12
    183c:	ca000006 	bgt	185c <__adddf3+0x218>
    1840:	e2844014 	add	r4, r4, #20
    1844:	e2642020 	rsb	r2, r4, #32
    1848:	e1a00430 	lsr	r0, r0, r4
    184c:	e1800211 	orr	r0, r0, r1, lsl r2
    1850:	e1851431 	orr	r1, r5, r1, lsr r4
    1854:	e8bd4030 	pop	{r4, r5, lr}
    1858:	e12fff1e 	bx	lr
    185c:	e264400c 	rsb	r4, r4, #12
    1860:	e2642020 	rsb	r2, r4, #32
    1864:	e1a00230 	lsr	r0, r0, r2
    1868:	e1800411 	orr	r0, r0, r1, lsl r4
    186c:	e1a01005 	mov	r1, r5
    1870:	e8bd4030 	pop	{r4, r5, lr}
    1874:	e12fff1e 	bx	lr
    1878:	e1a00431 	lsr	r0, r1, r4
    187c:	e1a01005 	mov	r1, r5
    1880:	e8bd4030 	pop	{r4, r5, lr}
    1884:	e12fff1e 	bx	lr
    1888:	e3340000 	teq	r4, #0
    188c:	e2233601 	eor	r3, r3, #1048576	; 0x100000
    1890:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
    1894:	02844001 	addeq	r4, r4, #1
    1898:	12455001 	subne	r5, r5, #1
    189c:	eaffff8f 	b	16e0 <__adddf3+0x9c>
    18a0:	e1f0cac4 	mvns	r12, r4, asr #21
    18a4:	11f0cac5 	mvnsne	r12, r5, asr #21
    18a8:	0a00001d 	beq	1924 <__adddf3+0x2e0>
    18ac:	e1340005 	teq	r4, r5
    18b0:	01300002 	teqeq	r0, r2
    18b4:	0a000004 	beq	18cc <__adddf3+0x288>
    18b8:	e194c000 	orrs	r12, r4, r0
    18bc:	01a01003 	moveq	r1, r3
    18c0:	01a00002 	moveq	r0, r2
    18c4:	e8bd4030 	pop	{r4, r5, lr}
    18c8:	e12fff1e 	bx	lr
    18cc:	e1310003 	teq	r1, r3
    18d0:	13a01000 	movne	r1, #0
    18d4:	13a00000 	movne	r0, #0
    18d8:	18bd4030 	popne	{r4, r5, lr}
    18dc:	112fff1e 	bxne	lr
    18e0:	e1b0caa4 	lsrs	r12, r4, #21
    18e4:	1a000004 	bne	18fc <__adddf3+0x2b8>
    18e8:	e1b00080 	lsls	r0, r0, #1
    18ec:	e0b11001 	adcs	r1, r1, r1
    18f0:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
    18f4:	e8bd4030 	pop	{r4, r5, lr}
    18f8:	e12fff1e 	bx	lr
    18fc:	e2944501 	adds	r4, r4, #4194304	; 0x400000
    1900:	32811601 	addcc	r1, r1, #1048576	; 0x100000
    1904:	38bd4030 	popcc	{r4, r5, lr}
    1908:	312fff1e 	bxcc	lr
    190c:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1910:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
    1914:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    1918:	e3a00000 	mov	r0, #0
    191c:	e8bd4030 	pop	{r4, r5, lr}
    1920:	e12fff1e 	bx	lr
    1924:	e1f0cac4 	mvns	r12, r4, asr #21
    1928:	11a01003 	movne	r1, r3
    192c:	11a00002 	movne	r0, r2
    1930:	01f0cac5 	mvnseq	r12, r5, asr #21
    1934:	11a03001 	movne	r3, r1
    1938:	11a02000 	movne	r2, r0
    193c:	e1904601 	orrs	r4, r0, r1, lsl #12
    1940:	01925603 	orrseq	r5, r2, r3, lsl #12
    1944:	01310003 	teqeq	r1, r3
    1948:	13811702 	orrne	r1, r1, #524288	; 0x80000
    194c:	e8bd4030 	pop	{r4, r5, lr}
    1950:	e12fff1e 	bx	lr

00001954 <__aeabi_ui2d>:
    1954:	e3300000 	teq	r0, #0
    1958:	03a01000 	moveq	r1, #0
    195c:	012fff1e 	bxeq	lr
    1960:	e92d4030 	push	{r4, r5, lr}
    1964:	e3a04b01 	mov	r4, #1024	; 0x400
    1968:	e2844032 	add	r4, r4, #50	; 0x32
    196c:	e3a05000 	mov	r5, #0
    1970:	e3a01000 	mov	r1, #0
    1974:	eaffff86 	b	1794 <__adddf3+0x150>

00001978 <__aeabi_i2d>:
    1978:	e3300000 	teq	r0, #0
    197c:	03a01000 	moveq	r1, #0
    1980:	012fff1e 	bxeq	lr
    1984:	e92d4030 	push	{r4, r5, lr}
    1988:	e3a04b01 	mov	r4, #1024	; 0x400
    198c:	e2844032 	add	r4, r4, #50	; 0x32
    1990:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
    1994:	42600000 	rsbmi	r0, r0, #0
    1998:	e3a01000 	mov	r1, #0
    199c:	eaffff7c 	b	1794 <__adddf3+0x150>

000019a0 <__aeabi_f2d>:
    19a0:	e1b02080 	lsls	r2, r0, #1
    19a4:	e1a011c2 	asr	r1, r2, #3
    19a8:	e1a01061 	rrx	r1, r1
    19ac:	e1a00e02 	lsl	r0, r2, #28
    19b0:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
    19b4:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    19b8:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
    19bc:	112fff1e 	bxne	lr
    19c0:	e3320000 	teq	r2, #0
    19c4:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    19c8:	012fff1e 	bxeq	lr
    19cc:	e92d4030 	push	{r4, r5, lr}
    19d0:	e3a04d0e 	mov	r4, #896	; 0x380
    19d4:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    19d8:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    19dc:	eaffff6c 	b	1794 <__adddf3+0x150>

000019e0 <__aeabi_ul2d>:
    19e0:	e1902001 	orrs	r2, r0, r1
    19e4:	012fff1e 	bxeq	lr
    19e8:	e92d4030 	push	{r4, r5, lr}
    19ec:	e3a05000 	mov	r5, #0
    19f0:	ea000006 	b	1a10 <__aeabi_l2d+0x1c>

000019f4 <__aeabi_l2d>:
    19f4:	e1902001 	orrs	r2, r0, r1
    19f8:	012fff1e 	bxeq	lr
    19fc:	e92d4030 	push	{r4, r5, lr}
    1a00:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
    1a04:	5a000001 	bpl	1a10 <__aeabi_l2d+0x1c>
    1a08:	e2700000 	rsbs	r0, r0, #0
    1a0c:	e2e11000 	rsc	r1, r1, #0
    1a10:	e3a04b01 	mov	r4, #1024	; 0x400
    1a14:	e2844032 	add	r4, r4, #50	; 0x32
    1a18:	e1b0cb21 	lsrs	r12, r1, #22
    1a1c:	0affff44 	beq	1734 <__adddf3+0xf0>
    1a20:	e3a02003 	mov	r2, #3
    1a24:	e1b0c1ac 	lsrs	r12, r12, #3
    1a28:	12822003 	addne	r2, r2, #3
    1a2c:	e1b0c1ac 	lsrs	r12, r12, #3
    1a30:	12822003 	addne	r2, r2, #3
    1a34:	e08221ac 	add	r2, r2, r12, lsr #3
    1a38:	e2623020 	rsb	r3, r2, #32
    1a3c:	e1a0c310 	lsl	r12, r0, r3
    1a40:	e1a00230 	lsr	r0, r0, r2
    1a44:	e1800311 	orr	r0, r0, r1, lsl r3
    1a48:	e1a01231 	lsr	r1, r1, r2
    1a4c:	e0844002 	add	r4, r4, r2
    1a50:	eaffff37 	b	1734 <__adddf3+0xf0>

00001a54 <__aeabi_dmul>:
    1a54:	e92d4070 	push	{r4, r5, r6, lr}
    1a58:	e3a0c0ff 	mov	r12, #255	; 0xff
    1a5c:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    1a60:	e01c4a21 	ands	r4, r12, r1, lsr #20
    1a64:	101c5a23 	andsne	r5, r12, r3, lsr #20
    1a68:	1134000c 	teqne	r4, r12
    1a6c:	1135000c 	teqne	r5, r12
    1a70:	0b000075 	bleq	1c4c <__aeabi_dmul+0x1f8>
    1a74:	e0844005 	add	r4, r4, r5
    1a78:	e0216003 	eor	r6, r1, r3
    1a7c:	e1c11a8c 	bic	r1, r1, r12, lsl #21
    1a80:	e1c33a8c 	bic	r3, r3, r12, lsl #21
    1a84:	e1905601 	orrs	r5, r0, r1, lsl #12
    1a88:	11925603 	orrsne	r5, r2, r3, lsl #12
    1a8c:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    1a90:	e3833601 	orr	r3, r3, #1048576	; 0x100000
    1a94:	0a00001d 	beq	1b10 <__aeabi_dmul+0xbc>
    1a98:	e08ec290 	umull	r12, lr, r0, r2
    1a9c:	e3a05000 	mov	r5, #0
    1aa0:	e0a5e291 	umlal	lr, r5, r1, r2
    1aa4:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
    1aa8:	e0a5e390 	umlal	lr, r5, r0, r3
    1aac:	e3a06000 	mov	r6, #0
    1ab0:	e0a65391 	umlal	r5, r6, r1, r3
    1ab4:	e33c0000 	teq	r12, #0
    1ab8:	138ee001 	orrne	lr, lr, #1
    1abc:	e24440ff 	sub	r4, r4, #255	; 0xff
    1ac0:	e3560c02 	cmp	r6, #512	; 0x200
    1ac4:	e2c44c03 	sbc	r4, r4, #768	; 0x300
    1ac8:	2a000002 	bcs	1ad8 <__aeabi_dmul+0x84>
    1acc:	e1b0e08e 	lsls	lr, lr, #1
    1ad0:	e0b55005 	adcs	r5, r5, r5
    1ad4:	e0a66006 	adc	r6, r6, r6
    1ad8:	e1821586 	orr	r1, r2, r6, lsl #11
    1adc:	e1811aa5 	orr	r1, r1, r5, lsr #21
    1ae0:	e1a00585 	lsl	r0, r5, #11
    1ae4:	e1800aae 	orr	r0, r0, lr, lsr #21
    1ae8:	e1a0e58e 	lsl	lr, lr, #11
    1aec:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    1af0:	835c0c07 	cmphi	r12, #1792	; 0x700
    1af4:	8a000011 	bhi	1b40 <__aeabi_dmul+0xec>
    1af8:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
    1afc:	01b0e0a0 	lsrseq	lr, r0, #1
    1b00:	e2b00000 	adcs	r0, r0, #0
    1b04:	e0a11a04 	adc	r1, r1, r4, lsl #20
    1b08:	e8bd4070 	pop	{r4, r5, r6, lr}
    1b0c:	e12fff1e 	bx	lr
    1b10:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
    1b14:	e1861001 	orr	r1, r6, r1
    1b18:	e1800002 	orr	r0, r0, r2
    1b1c:	e0211003 	eor	r1, r1, r3
    1b20:	e05440ac 	subs	r4, r4, r12, lsr #1
    1b24:	c074500c 	rsbsgt	r5, r4, r12
    1b28:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    1b2c:	c8bd4070 	popgt	{r4, r5, r6, lr}
    1b30:	c12fff1e 	bxgt	lr
    1b34:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    1b38:	e3a0e000 	mov	lr, #0
    1b3c:	e2544001 	subs	r4, r4, #1
    1b40:	ca00005d 	bgt	1cbc <__aeabi_dmul+0x268>
    1b44:	e3740036 	cmn	r4, #54	; 0x36
    1b48:	d3a00000 	movle	r0, #0
    1b4c:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
    1b50:	d8bd4070 	pople	{r4, r5, r6, lr}
    1b54:	d12fff1e 	bxle	lr
    1b58:	e2644000 	rsb	r4, r4, #0
    1b5c:	e2544020 	subs	r4, r4, #32
    1b60:	aa00001a 	bge	1bd0 <__aeabi_dmul+0x17c>
    1b64:	e294400c 	adds	r4, r4, #12
    1b68:	ca00000c 	bgt	1ba0 <__aeabi_dmul+0x14c>
    1b6c:	e2844014 	add	r4, r4, #20
    1b70:	e2645020 	rsb	r5, r4, #32
    1b74:	e1a03510 	lsl	r3, r0, r5
    1b78:	e1a00430 	lsr	r0, r0, r4
    1b7c:	e1800511 	orr	r0, r0, r1, lsl r5
    1b80:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
    1b84:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    1b88:	e0900fa3 	adds	r0, r0, r3, lsr #31
    1b8c:	e0a21431 	adc	r1, r2, r1, lsr r4
    1b90:	e19ee083 	orrs	lr, lr, r3, lsl #1
    1b94:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    1b98:	e8bd4070 	pop	{r4, r5, r6, lr}
    1b9c:	e12fff1e 	bx	lr
    1ba0:	e264400c 	rsb	r4, r4, #12
    1ba4:	e2645020 	rsb	r5, r4, #32
    1ba8:	e1a03410 	lsl	r3, r0, r4
    1bac:	e1a00530 	lsr	r0, r0, r5
    1bb0:	e1800411 	orr	r0, r0, r1, lsl r4
    1bb4:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1bb8:	e0900fa3 	adds	r0, r0, r3, lsr #31
    1bbc:	e2a11000 	adc	r1, r1, #0
    1bc0:	e19ee083 	orrs	lr, lr, r3, lsl #1
    1bc4:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    1bc8:	e8bd4070 	pop	{r4, r5, r6, lr}
    1bcc:	e12fff1e 	bx	lr
    1bd0:	e2645020 	rsb	r5, r4, #32
    1bd4:	e18ee510 	orr	lr, lr, r0, lsl r5
    1bd8:	e1a03430 	lsr	r3, r0, r4
    1bdc:	e1833511 	orr	r3, r3, r1, lsl r5
    1be0:	e1a00431 	lsr	r0, r1, r4
    1be4:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1be8:	e1c00431 	bic	r0, r0, r1, lsr r4
    1bec:	e0800fa3 	add	r0, r0, r3, lsr #31
    1bf0:	e19ee083 	orrs	lr, lr, r3, lsl #1
    1bf4:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    1bf8:	e8bd4070 	pop	{r4, r5, r6, lr}
    1bfc:	e12fff1e 	bx	lr
    1c00:	e3340000 	teq	r4, #0
    1c04:	1a000008 	bne	1c2c <__aeabi_dmul+0x1d8>
    1c08:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
    1c0c:	e1b00080 	lsls	r0, r0, #1
    1c10:	e0a11001 	adc	r1, r1, r1
    1c14:	e3110601 	tst	r1, #1048576	; 0x100000
    1c18:	02444001 	subeq	r4, r4, #1
    1c1c:	0afffffa 	beq	1c0c <__aeabi_dmul+0x1b8>
    1c20:	e1811006 	orr	r1, r1, r6
    1c24:	e3350000 	teq	r5, #0
    1c28:	112fff1e 	bxne	lr
    1c2c:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
    1c30:	e1b02082 	lsls	r2, r2, #1
    1c34:	e0a33003 	adc	r3, r3, r3
    1c38:	e3130601 	tst	r3, #1048576	; 0x100000
    1c3c:	02455001 	subeq	r5, r5, #1
    1c40:	0afffffa 	beq	1c30 <__aeabi_dmul+0x1dc>
    1c44:	e1833006 	orr	r3, r3, r6
    1c48:	e12fff1e 	bx	lr
    1c4c:	e134000c 	teq	r4, r12
    1c50:	e00c5a23 	and	r5, r12, r3, lsr #20
    1c54:	1135000c 	teqne	r5, r12
    1c58:	0a000007 	beq	1c7c <__aeabi_dmul+0x228>
    1c5c:	e1906081 	orrs	r6, r0, r1, lsl #1
    1c60:	11926083 	orrsne	r6, r2, r3, lsl #1
    1c64:	1affffe5 	bne	1c00 <__aeabi_dmul+0x1ac>
    1c68:	e0211003 	eor	r1, r1, r3
    1c6c:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1c70:	e3a00000 	mov	r0, #0
    1c74:	e8bd4070 	pop	{r4, r5, r6, lr}
    1c78:	e12fff1e 	bx	lr
    1c7c:	e1906081 	orrs	r6, r0, r1, lsl #1
    1c80:	01a00002 	moveq	r0, r2
    1c84:	01a01003 	moveq	r1, r3
    1c88:	11926083 	orrsne	r6, r2, r3, lsl #1
    1c8c:	0a000010 	beq	1cd4 <__aeabi_dmul+0x280>
    1c90:	e134000c 	teq	r4, r12
    1c94:	1a000001 	bne	1ca0 <__aeabi_dmul+0x24c>
    1c98:	e1906601 	orrs	r6, r0, r1, lsl #12
    1c9c:	1a00000c 	bne	1cd4 <__aeabi_dmul+0x280>
    1ca0:	e135000c 	teq	r5, r12
    1ca4:	1a000003 	bne	1cb8 <__aeabi_dmul+0x264>
    1ca8:	e1926603 	orrs	r6, r2, r3, lsl #12
    1cac:	11a00002 	movne	r0, r2
    1cb0:	11a01003 	movne	r1, r3
    1cb4:	1a000006 	bne	1cd4 <__aeabi_dmul+0x280>
    1cb8:	e0211003 	eor	r1, r1, r3
    1cbc:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1cc0:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    1cc4:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    1cc8:	e3a00000 	mov	r0, #0
    1ccc:	e8bd4070 	pop	{r4, r5, r6, lr}
    1cd0:	e12fff1e 	bx	lr
    1cd4:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    1cd8:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
    1cdc:	e8bd4070 	pop	{r4, r5, r6, lr}
    1ce0:	e12fff1e 	bx	lr

00001ce4 <__aeabi_ddiv>:
    1ce4:	e92d4070 	push	{r4, r5, r6, lr}
    1ce8:	e3a0c0ff 	mov	r12, #255	; 0xff
    1cec:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    1cf0:	e01c4a21 	ands	r4, r12, r1, lsr #20
    1cf4:	101c5a23 	andsne	r5, r12, r3, lsr #20
    1cf8:	1134000c 	teqne	r4, r12
    1cfc:	1135000c 	teqne	r5, r12
    1d00:	0b00005e 	bleq	1e80 <__aeabi_ddiv+0x19c>
    1d04:	e0444005 	sub	r4, r4, r5
    1d08:	e021e003 	eor	lr, r1, r3
    1d0c:	e1925603 	orrs	r5, r2, r3, lsl #12
    1d10:	e1a01601 	lsl	r1, r1, #12
    1d14:	0a00004c 	beq	1e4c <__aeabi_ddiv+0x168>
    1d18:	e1a03603 	lsl	r3, r3, #12
    1d1c:	e3a05201 	mov	r5, #268435456	; 0x10000000
    1d20:	e1853223 	orr	r3, r5, r3, lsr #4
    1d24:	e1833c22 	orr	r3, r3, r2, lsr #24
    1d28:	e1a02402 	lsl	r2, r2, #8
    1d2c:	e1855221 	orr	r5, r5, r1, lsr #4
    1d30:	e1855c20 	orr	r5, r5, r0, lsr #24
    1d34:	e1a06400 	lsl	r6, r0, #8
    1d38:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
    1d3c:	e1550003 	cmp	r5, r3
    1d40:	01560002 	cmpeq	r6, r2
    1d44:	e2a440fd 	adc	r4, r4, #253	; 0xfd
    1d48:	e2844c03 	add	r4, r4, #768	; 0x300
    1d4c:	2a000001 	bcs	1d58 <__aeabi_ddiv+0x74>
    1d50:	e1b030a3 	lsrs	r3, r3, #1
    1d54:	e1a02062 	rrx	r2, r2
    1d58:	e0566002 	subs	r6, r6, r2
    1d5c:	e0c55003 	sbc	r5, r5, r3
    1d60:	e1b030a3 	lsrs	r3, r3, #1
    1d64:	e1a02062 	rrx	r2, r2
    1d68:	e3a00601 	mov	r0, #1048576	; 0x100000
    1d6c:	e3a0c702 	mov	r12, #524288	; 0x80000
    1d70:	e056e002 	subs	lr, r6, r2
    1d74:	e0d5e003 	sbcs	lr, r5, r3
    1d78:	20466002 	subcs	r6, r6, r2
    1d7c:	21a0500e 	movcs	r5, lr
    1d80:	2180000c 	orrcs	r0, r0, r12
    1d84:	e1b030a3 	lsrs	r3, r3, #1
    1d88:	e1a02062 	rrx	r2, r2
    1d8c:	e056e002 	subs	lr, r6, r2
    1d90:	e0d5e003 	sbcs	lr, r5, r3
    1d94:	20466002 	subcs	r6, r6, r2
    1d98:	21a0500e 	movcs	r5, lr
    1d9c:	218000ac 	orrcs	r0, r0, r12, lsr #1
    1da0:	e1b030a3 	lsrs	r3, r3, #1
    1da4:	e1a02062 	rrx	r2, r2
    1da8:	e056e002 	subs	lr, r6, r2
    1dac:	e0d5e003 	sbcs	lr, r5, r3
    1db0:	20466002 	subcs	r6, r6, r2
    1db4:	21a0500e 	movcs	r5, lr
    1db8:	2180012c 	orrcs	r0, r0, r12, lsr #2
    1dbc:	e1b030a3 	lsrs	r3, r3, #1
    1dc0:	e1a02062 	rrx	r2, r2
    1dc4:	e056e002 	subs	lr, r6, r2
    1dc8:	e0d5e003 	sbcs	lr, r5, r3
    1dcc:	20466002 	subcs	r6, r6, r2
    1dd0:	21a0500e 	movcs	r5, lr
    1dd4:	218001ac 	orrcs	r0, r0, r12, lsr #3
    1dd8:	e195e006 	orrs	lr, r5, r6
    1ddc:	0a00000d 	beq	1e18 <__aeabi_ddiv+0x134>
    1de0:	e1a05205 	lsl	r5, r5, #4
    1de4:	e1855e26 	orr	r5, r5, r6, lsr #28
    1de8:	e1a06206 	lsl	r6, r6, #4
    1dec:	e1a03183 	lsl	r3, r3, #3
    1df0:	e1833ea2 	orr	r3, r3, r2, lsr #29
    1df4:	e1a02182 	lsl	r2, r2, #3
    1df8:	e1b0c22c 	lsrs	r12, r12, #4
    1dfc:	1affffdb 	bne	1d70 <__aeabi_ddiv+0x8c>
    1e00:	e3110601 	tst	r1, #1048576	; 0x100000
    1e04:	1a000006 	bne	1e24 <__aeabi_ddiv+0x140>
    1e08:	e1811000 	orr	r1, r1, r0
    1e0c:	e3a00000 	mov	r0, #0
    1e10:	e3a0c102 	mov	r12, #-2147483648	; 0x80000000
    1e14:	eaffffd5 	b	1d70 <__aeabi_ddiv+0x8c>
    1e18:	e3110601 	tst	r1, #1048576	; 0x100000
    1e1c:	01811000 	orreq	r1, r1, r0
    1e20:	03a00000 	moveq	r0, #0
    1e24:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    1e28:	835c0c07 	cmphi	r12, #1792	; 0x700
    1e2c:	8affff43 	bhi	1b40 <__aeabi_dmul+0xec>
    1e30:	e055c003 	subs	r12, r5, r3
    1e34:	0056c002 	subseq	r12, r6, r2
    1e38:	01b0c0a0 	lsrseq	r12, r0, #1
    1e3c:	e2b00000 	adcs	r0, r0, #0
    1e40:	e0a11a04 	adc	r1, r1, r4, lsl #20
    1e44:	e8bd4070 	pop	{r4, r5, r6, lr}
    1e48:	e12fff1e 	bx	lr
    1e4c:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
    1e50:	e18e1621 	orr	r1, lr, r1, lsr #12
    1e54:	e09440ac 	adds	r4, r4, r12, lsr #1
    1e58:	c074500c 	rsbsgt	r5, r4, r12
    1e5c:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    1e60:	c8bd4070 	popgt	{r4, r5, r6, lr}
    1e64:	c12fff1e 	bxgt	lr
    1e68:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    1e6c:	e3a0e000 	mov	lr, #0
    1e70:	e2544001 	subs	r4, r4, #1
    1e74:	eaffff31 	b	1b40 <__aeabi_dmul+0xec>
    1e78:	e185e006 	orr	lr, r5, r6
    1e7c:	eaffff2f 	b	1b40 <__aeabi_dmul+0xec>
    1e80:	e00c5a23 	and	r5, r12, r3, lsr #20
    1e84:	e134000c 	teq	r4, r12
    1e88:	0135000c 	teqeq	r5, r12
    1e8c:	0affff90 	beq	1cd4 <__aeabi_dmul+0x280>
    1e90:	e134000c 	teq	r4, r12
    1e94:	1a000006 	bne	1eb4 <__aeabi_ddiv+0x1d0>
    1e98:	e1904601 	orrs	r4, r0, r1, lsl #12
    1e9c:	1affff8c 	bne	1cd4 <__aeabi_dmul+0x280>
    1ea0:	e135000c 	teq	r5, r12
    1ea4:	1affff83 	bne	1cb8 <__aeabi_dmul+0x264>
    1ea8:	e1a00002 	mov	r0, r2
    1eac:	e1a01003 	mov	r1, r3
    1eb0:	eaffff87 	b	1cd4 <__aeabi_dmul+0x280>
    1eb4:	e135000c 	teq	r5, r12
    1eb8:	1a000004 	bne	1ed0 <__aeabi_ddiv+0x1ec>
    1ebc:	e1925603 	orrs	r5, r2, r3, lsl #12
    1ec0:	0affff68 	beq	1c68 <__aeabi_dmul+0x214>
    1ec4:	e1a00002 	mov	r0, r2
    1ec8:	e1a01003 	mov	r1, r3
    1ecc:	eaffff80 	b	1cd4 <__aeabi_dmul+0x280>
    1ed0:	e1906081 	orrs	r6, r0, r1, lsl #1
    1ed4:	11926083 	orrsne	r6, r2, r3, lsl #1
    1ed8:	1affff48 	bne	1c00 <__aeabi_dmul+0x1ac>
    1edc:	e1904081 	orrs	r4, r0, r1, lsl #1
    1ee0:	1affff74 	bne	1cb8 <__aeabi_dmul+0x264>
    1ee4:	e1925083 	orrs	r5, r2, r3, lsl #1
    1ee8:	1affff5e 	bne	1c68 <__aeabi_dmul+0x214>
    1eec:	eaffff78 	b	1cd4 <__aeabi_dmul+0x280>

00001ef0 <__aeabi_d2iz>:
    1ef0:	e1a02081 	lsl	r2, r1, #1
    1ef4:	e2922602 	adds	r2, r2, #2097152	; 0x200000
    1ef8:	2a00000c 	bcs	1f30 <__aeabi_d2iz+0x40>
    1efc:	5a000009 	bpl	1f28 <__aeabi_d2iz+0x38>
    1f00:	e3e03e3e 	mvn	r3, #992	; 0x3e0
    1f04:	e0532ac2 	subs	r2, r3, r2, asr #21
    1f08:	9a00000a 	bls	1f38 <__aeabi_d2iz+0x48>
    1f0c:	e1a03581 	lsl	r3, r1, #11
    1f10:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    1f14:	e1833aa0 	orr	r3, r3, r0, lsr #21
    1f18:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    1f1c:	e1a00233 	lsr	r0, r3, r2
    1f20:	12600000 	rsbne	r0, r0, #0
    1f24:	e12fff1e 	bx	lr
    1f28:	e3a00000 	mov	r0, #0
    1f2c:	e12fff1e 	bx	lr
    1f30:	e1900601 	orrs	r0, r0, r1, lsl #12
    1f34:	1a000002 	bne	1f44 <__aeabi_d2iz+0x54>
    1f38:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
    1f3c:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    1f40:	e12fff1e 	bx	lr
    1f44:	e3a00000 	mov	r0, #0
    1f48:	e12fff1e 	bx	lr

00001f4c <atexit>:
    1f4c:	e1a01000 	mov	r1, r0
    1f50:	e3a00000 	mov	r0, #0
    1f54:	e92d4008 	push	{r3, lr}
    1f58:	e1a02000 	mov	r2, r0
    1f5c:	e1a03000 	mov	r3, r0
    1f60:	eb00000e 	bl	1fa0 <__register_exitproc>
    1f64:	e8bd4008 	pop	{r3, lr}
    1f68:	e12fff1e 	bx	lr

00001f6c <exit>:
    1f6c:	e92d4008 	push	{r3, lr}
    1f70:	e3a01000 	mov	r1, #0
    1f74:	e1a04000 	mov	r4, r0
    1f78:	eb000045 	bl	2094 <__call_exitprocs>
    1f7c:	e59f3018 	ldr	r3, [pc, #24]	; 1f9c <exit+0x30>
    1f80:	e5930000 	ldr	r0, [r3]
    1f84:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    1f88:	e3530000 	cmp	r3, #0
    1f8c:	11a0e00f 	movne	lr, pc
    1f90:	112fff13 	bxne	r3
    1f94:	e1a00004 	mov	r0, r4
    1f98:	eb0000c9 	bl	22c4 <_exit>
    1f9c:	00002420 	.word	0x00002420

00001fa0 <__register_exitproc>:
    1fa0:	e59fc0e4 	ldr	r12, [pc, #228]	; 208c <__register_exitproc+0xec>
    1fa4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    1fa8:	e59c4000 	ldr	r4, [r12]
    1fac:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    1fb0:	e35c0000 	cmp	r12, #0
    1fb4:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    1fb8:	e59c5004 	ldr	r5, [r12, #4]
    1fbc:	0584c148 	streq	r12, [r4, #328]	; 0x148
    1fc0:	e355001f 	cmp	r5, #31
    1fc4:	e24dd010 	sub	sp, sp, #16
    1fc8:	e1a06000 	mov	r6, r0
    1fcc:	da000015 	ble	2028 <__register_exitproc+0x88>
    1fd0:	e59f00b8 	ldr	r0, [pc, #184]	; 2090 <__register_exitproc+0xf0>
    1fd4:	e3500000 	cmp	r0, #0
    1fd8:	1a000001 	bne	1fe4 <__register_exitproc+0x44>
    1fdc:	e3e00000 	mvn	r0, #0
    1fe0:	ea000018 	b	2048 <__register_exitproc+0xa8>
    1fe4:	e3a00e19 	mov	r0, #400	; 0x190
    1fe8:	e58d100c 	str	r1, [sp, #12]
    1fec:	e58d2008 	str	r2, [sp, #8]
    1ff0:	e58d3004 	str	r3, [sp, #4]
    1ff4:	e320f000 	nop	{0}
    1ff8:	e250c000 	subs	r12, r0, #0
    1ffc:	e59d100c 	ldr	r1, [sp, #12]
    2000:	e59d2008 	ldr	r2, [sp, #8]
    2004:	e59d3004 	ldr	r3, [sp, #4]
    2008:	0afffff3 	beq	1fdc <__register_exitproc+0x3c>
    200c:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    2010:	e3a00000 	mov	r0, #0
    2014:	e58c0004 	str	r0, [r12, #4]
    2018:	e58c5000 	str	r5, [r12]
    201c:	e584c148 	str	r12, [r4, #328]	; 0x148
    2020:	e58c0188 	str	r0, [r12, #392]	; 0x188
    2024:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    2028:	e3560000 	cmp	r6, #0
    202c:	e59c4004 	ldr	r4, [r12, #4]
    2030:	1a000007 	bne	2054 <__register_exitproc+0xb4>
    2034:	e2843002 	add	r3, r4, #2
    2038:	e2844001 	add	r4, r4, #1
    203c:	e78c1103 	str	r1, [r12, r3, lsl #2]
    2040:	e58c4004 	str	r4, [r12, #4]
    2044:	e3a00000 	mov	r0, #0
    2048:	e28dd010 	add	sp, sp, #16
    204c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    2050:	e12fff1e 	bx	lr
    2054:	e3a00001 	mov	r0, #1
    2058:	e1a00410 	lsl	r0, r0, r4
    205c:	e08c8104 	add	r8, r12, r4, lsl #2
    2060:	e3560002 	cmp	r6, #2
    2064:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    2068:	e5883108 	str	r3, [r8, #264]	; 0x108
    206c:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    2070:	e1877000 	orr	r7, r7, r0
    2074:	01830000 	orreq	r0, r3, r0
    2078:	e1a05008 	mov	r5, r8
    207c:	e5882088 	str	r2, [r8, #136]	; 0x88
    2080:	e58c7188 	str	r7, [r12, #392]	; 0x188
    2084:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    2088:	eaffffe9 	b	2034 <__register_exitproc+0x94>
    208c:	00002420 	.word	0x00002420
    2090:	00000000 	.word	0x00000000

00002094 <__call_exitprocs>:
    2094:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2098:	e59f3168 	ldr	r3, [pc, #360]	; 2208 <__call_exitprocs+0x174>
    209c:	e5933000 	ldr	r3, [r3]
    20a0:	e24dd014 	sub	sp, sp, #20
    20a4:	e58d3004 	str	r3, [sp, #4]
    20a8:	e2833f52 	add	r3, r3, #328	; 0x148
    20ac:	e58d0008 	str	r0, [sp, #8]
    20b0:	e58d300c 	str	r3, [sp, #12]
    20b4:	e1a07001 	mov	r7, r1
    20b8:	e3a08001 	mov	r8, #1
    20bc:	e59d3004 	ldr	r3, [sp, #4]
    20c0:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    20c4:	e3560000 	cmp	r6, #0
    20c8:	e59db00c 	ldr	r11, [sp, #12]
    20cc:	0a000033 	beq	21a0 <__call_exitprocs+0x10c>
    20d0:	e5965004 	ldr	r5, [r6, #4]
    20d4:	e2554001 	subs	r4, r5, #1
    20d8:	5286a088 	addpl	r10, r6, #136	; 0x88
    20dc:	5285501f 	addpl	r5, r5, #31
    20e0:	508a5105 	addpl	r5, r10, r5, lsl #2
    20e4:	5a000007 	bpl	2108 <__call_exitprocs+0x74>
    20e8:	ea000029 	b	2194 <__call_exitprocs+0x100>
    20ec:	e5953000 	ldr	r3, [r5]
    20f0:	e1530007 	cmp	r3, r7
    20f4:	0a000005 	beq	2110 <__call_exitprocs+0x7c>
    20f8:	e2444001 	sub	r4, r4, #1
    20fc:	e3740001 	cmn	r4, #1
    2100:	e2455004 	sub	r5, r5, #4
    2104:	0a000022 	beq	2194 <__call_exitprocs+0x100>
    2108:	e3570000 	cmp	r7, #0
    210c:	1afffff6 	bne	20ec <__call_exitprocs+0x58>
    2110:	e5963004 	ldr	r3, [r6, #4]
    2114:	e06a2005 	rsb	r2, r10, r5
    2118:	e2433001 	sub	r3, r3, #1
    211c:	e0862002 	add	r2, r6, r2
    2120:	e1530004 	cmp	r3, r4
    2124:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    2128:	13a01000 	movne	r1, #0
    212c:	05864004 	streq	r4, [r6, #4]
    2130:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    2134:	e3530000 	cmp	r3, #0
    2138:	0affffee 	beq	20f8 <__call_exitprocs+0x64>
    213c:	e1a02418 	lsl	r2, r8, r4
    2140:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    2144:	e1120001 	tst	r2, r1
    2148:	e5969004 	ldr	r9, [r6, #4]
    214c:	0a000016 	beq	21ac <__call_exitprocs+0x118>
    2150:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    2154:	e1120001 	tst	r2, r1
    2158:	1a000016 	bne	21b8 <__call_exitprocs+0x124>
    215c:	e59d0008 	ldr	r0, [sp, #8]
    2160:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    2164:	e1a0e00f 	mov	lr, pc
    2168:	e12fff13 	bx	r3
    216c:	e5963004 	ldr	r3, [r6, #4]
    2170:	e1530009 	cmp	r3, r9
    2174:	1affffd0 	bne	20bc <__call_exitprocs+0x28>
    2178:	e59b3000 	ldr	r3, [r11]
    217c:	e1530006 	cmp	r3, r6
    2180:	1affffcd 	bne	20bc <__call_exitprocs+0x28>
    2184:	e2444001 	sub	r4, r4, #1
    2188:	e3740001 	cmn	r4, #1
    218c:	e2455004 	sub	r5, r5, #4
    2190:	1affffdc 	bne	2108 <__call_exitprocs+0x74>
    2194:	e59f1070 	ldr	r1, [pc, #112]	; 220c <__call_exitprocs+0x178>
    2198:	e3510000 	cmp	r1, #0
    219c:	1a000009 	bne	21c8 <__call_exitprocs+0x134>
    21a0:	e28dd014 	add	sp, sp, #20
    21a4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    21a8:	e12fff1e 	bx	lr
    21ac:	e1a0e00f 	mov	lr, pc
    21b0:	e12fff13 	bx	r3
    21b4:	eaffffec 	b	216c <__call_exitprocs+0xd8>
    21b8:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    21bc:	e1a0e00f 	mov	lr, pc
    21c0:	e12fff13 	bx	r3
    21c4:	eaffffe8 	b	216c <__call_exitprocs+0xd8>
    21c8:	e5963004 	ldr	r3, [r6, #4]
    21cc:	e3530000 	cmp	r3, #0
    21d0:	e5963000 	ldr	r3, [r6]
    21d4:	1a000008 	bne	21fc <__call_exitprocs+0x168>
    21d8:	e3530000 	cmp	r3, #0
    21dc:	0a000006 	beq	21fc <__call_exitprocs+0x168>
    21e0:	e1a00006 	mov	r0, r6
    21e4:	e58b3000 	str	r3, [r11]
    21e8:	e320f000 	nop	{0}
    21ec:	e59b6000 	ldr	r6, [r11]
    21f0:	e3560000 	cmp	r6, #0
    21f4:	1affffb5 	bne	20d0 <__call_exitprocs+0x3c>
    21f8:	eaffffe8 	b	21a0 <__call_exitprocs+0x10c>
    21fc:	e1a0b006 	mov	r11, r6
    2200:	e1a06003 	mov	r6, r3
    2204:	eafffff9 	b	21f0 <__call_exitprocs+0x15c>
    2208:	00002420 	.word	0x00002420
    220c:	00000000 	.word	0x00000000

00002210 <register_fini>:
    2210:	e92d4008 	push	{r3, lr}
    2214:	e59f3010 	ldr	r3, [pc, #16]	; 222c <register_fini+0x1c>
    2218:	e3530000 	cmp	r3, #0
    221c:	159f000c 	ldrne	r0, [pc, #12]	; 2230 <register_fini+0x20>
    2220:	1bffff49 	blne	1f4c <atexit>
    2224:	e8bd4008 	pop	{r3, lr}
    2228:	e12fff1e 	bx	lr
    222c:	00002448 	.word	0x00002448
    2230:	00002234 	.word	0x00002234

00002234 <__libc_fini_array>:
    2234:	e92d4038 	push	{r3, r4, r5, lr}
    2238:	e59f5030 	ldr	r5, [pc, #48]	; 2270 <__libc_fini_array+0x3c>
    223c:	e59f4030 	ldr	r4, [pc, #48]	; 2274 <__libc_fini_array+0x40>
    2240:	e0654004 	rsb	r4, r5, r4
    2244:	e1b04144 	asrs	r4, r4, #2
    2248:	10855104 	addne	r5, r5, r4, lsl #2
    224c:	0a000004 	beq	2264 <__libc_fini_array+0x30>
    2250:	e5353004 	ldr	r3, [r5, #-4]!
    2254:	e1a0e00f 	mov	lr, pc
    2258:	e12fff13 	bx	r3
    225c:	e2544001 	subs	r4, r4, #1
    2260:	1afffffa 	bne	2250 <__libc_fini_array+0x1c>
    2264:	eb000077 	bl	2448 <__libc_fini>
    2268:	e8bd4038 	pop	{r3, r4, r5, lr}
    226c:	e12fff1e 	bx	lr
    2270:	00002460 	.word	0x00002460
    2274:	00002464 	.word	0x00002464

00002278 <__cs3_premain>:
    2278:	e92d4008 	push	{r3, lr}
    227c:	eb000017 	bl	22e0 <__libc_init_array>
    2280:	e59f3030 	ldr	r3, [pc, #48]	; 22b8 <__cs3_premain+0x40>
    2284:	e3530000 	cmp	r3, #0
    2288:	15930000 	ldrne	r0, [r3]
    228c:	01a00003 	moveq	r0, r3
    2290:	e59f3024 	ldr	r3, [pc, #36]	; 22bc <__cs3_premain+0x44>
    2294:	e3530000 	cmp	r3, #0
    2298:	15931000 	ldrne	r1, [r3]
    229c:	01a01003 	moveq	r1, r3
    22a0:	e3a02000 	mov	r2, #0
    22a4:	ebfffc74 	bl	147c <main>
    22a8:	e59f3010 	ldr	r3, [pc, #16]	; 22c0 <__cs3_premain+0x48>
    22ac:	e3530000 	cmp	r3, #0
    22b0:	1bffff2d 	blne	1f6c <exit>
    22b4:	eafffffe 	b	22b4 <__cs3_premain+0x3c>
	...
    22c0:	00001f6c 	.word	0x00001f6c

000022c4 <_exit>:
    22c4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    22c8:	e3a00018 	mov	r0, #24
    22cc:	e59f1004 	ldr	r1, [pc, #4]	; 22d8 <_exit+0x14>
    22d0:	ef123456 	svc	0x00123456
    22d4:	eafffffe 	b	22d4 <_exit+0x10>
    22d8:	00020026 	.word	0x00020026

000022dc <__cs3_isr_interrupt>:
    22dc:	eafffffe 	b	22dc <__cs3_isr_interrupt>

000022e0 <__libc_init_array>:
    22e0:	e92d4070 	push	{r4, r5, r6, lr}
    22e4:	e59f506c 	ldr	r5, [pc, #108]	; 2358 <__libc_init_array+0x78>
    22e8:	e59f606c 	ldr	r6, [pc, #108]	; 235c <__libc_init_array+0x7c>
    22ec:	e0656006 	rsb	r6, r5, r6
    22f0:	e1b06146 	asrs	r6, r6, #2
    22f4:	12455004 	subne	r5, r5, #4
    22f8:	13a04000 	movne	r4, #0
    22fc:	0a000005 	beq	2318 <__libc_init_array+0x38>
    2300:	e5b53004 	ldr	r3, [r5, #4]!
    2304:	e2844001 	add	r4, r4, #1
    2308:	e1a0e00f 	mov	lr, pc
    230c:	e12fff13 	bx	r3
    2310:	e1560004 	cmp	r6, r4
    2314:	1afffff9 	bne	2300 <__libc_init_array+0x20>
    2318:	e59f5040 	ldr	r5, [pc, #64]	; 2360 <__libc_init_array+0x80>
    231c:	e59f6040 	ldr	r6, [pc, #64]	; 2364 <__libc_init_array+0x84>
    2320:	e0656006 	rsb	r6, r5, r6
    2324:	eb00003f 	bl	2428 <_init>
    2328:	e1b06146 	asrs	r6, r6, #2
    232c:	12455004 	subne	r5, r5, #4
    2330:	13a04000 	movne	r4, #0
    2334:	0a000005 	beq	2350 <__libc_init_array+0x70>
    2338:	e5b53004 	ldr	r3, [r5, #4]!
    233c:	e2844001 	add	r4, r4, #1
    2340:	e1a0e00f 	mov	lr, pc
    2344:	e12fff13 	bx	r3
    2348:	e1560004 	cmp	r6, r4
    234c:	1afffff9 	bne	2338 <__libc_init_array+0x58>
    2350:	e8bd4070 	pop	{r4, r5, r6, lr}
    2354:	e12fff1e 	bx	lr
    2358:	00002440 	.word	0x00002440
    235c:	00002440 	.word	0x00002440
    2360:	00002440 	.word	0x00002440
    2364:	00002448 	.word	0x00002448

Disassembly of section .rodata:

00002370 <AMP>:
    2370:	00800000                                ....

00002374 <VGA_COL_LEN>:
    2374:	00000140                                @...

00002378 <VGA_ROW_LEN>:
    2378:	000000f0 65726944 726f7463 4f42203a     ....Director: BO
    2388:	4c205353 00000069 756c6f56 203a656d     SS Li...Volume: 
	...

000023a0 <NOTE_LOOKUP>:
    23a0:	189374bc 40605a04 be76c8b4 40625a9f     .t...Z`@..v..Zb@
    23b0:	49ba5e35 40649a0c e353f7cf 4065d3a5     5^.I..d@..S...e@
    23c0:	9db22d0e 40687fef 00000000 406b8000     .-....h@......k@
    23d0:	dd2f1aa0 406ede24 189374bc 40705a04     ../.$.n@.t...Zp@
    23e0:	d70a3d71 40725aa3 49ba5e35 40749a0c     q=...Zr@5^.I..t@
    23f0:	e353f7cf 4075d3a5 851eb852 40787feb     ..S...u@R.....x@
    2400:	00000000 407b8000 c49ba5e3 407ede20     ......{@.... .~@
    2410:	0c49ba5e 40805a02                       ^.I..Z.@

00002418 <NUM_NOTES>:
    2418:	0000000f                                ....

0000241c <SAMPLE_RATE>:
    241c:	0000bb80                                ....

00002420 <_global_impure_ptr>:
    2420:	00031288 00000043                       ....C...

00002428 <_init>:
    2428:	e1a0c00d 	mov	r12, sp
    242c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    2430:	e24cb004 	sub	r11, r12, #4
    2434:	e24bd028 	sub	sp, r11, #40	; 0x28
    2438:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    243c:	e12fff1e 	bx	lr

00002440 <__init_array_start>:
    2440:	00002210 	.word	0x00002210

00002444 <__frame_dummy_init_array_entry>:
    2444:	00000208                                ....

00002448 <__libc_fini>:
    2448:	e1a0c00d 	mov	r12, sp
    244c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    2450:	e24cb004 	sub	r11, r12, #4
    2454:	e24bd028 	sub	sp, r11, #40	; 0x28
    2458:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    245c:	e12fff1e 	bx	lr

00002460 <__fini_array_start>:
    2460:	000001c4 	.word	0x000001c4

00002464 <__cs3_regions>:
    2464:	00000000 	.word	0x00000000
    2468:	00000040 	.word	0x00000040
    246c:	00000040 	.word	0x00000040
    2470:	00031678 	.word	0x00031678
    2474:	00000020 	.word	0x00000020
