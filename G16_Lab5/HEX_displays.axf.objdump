
//campus.mcgill.ca/emf/CPE/yma67/My Documents/G16_Lab5/HEX_displays.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	bc 06 00 00 c0 06 00 00 c4 06 00 00 c8 06 00 00     ................
  30:	cc 06 00 00 ec 21 00 00 98 05 00 00 d0 06 00 00     .....!..........

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb00082b 	bl	2188 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	00002350 	.word	0x00002350

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <ICDISER+0x18>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <ICDISER+0x1c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <ICDISER+0x20>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00031588 	.word	0x00031588

00000124 <__cs3_heap_start_ptr>:
     124:	000315b0 	.word	0x000315b0

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00031590 	.word	0x00031590
     170:	00031593 	.word	0x00031593
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <ICDICER+0x38>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <ICDICER+0x3c>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <ICDICER+0x20>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <ICDICER+0x40>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <ICDICER+0x18>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <ICDICER+0x18>
     1b8:	00031590 	.word	0x00031590
     1bc:	00031590 	.word	0x00031590
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00031590 	.word	0x00031590
     200:	00000000 	.word	0x00000000
     204:	00002278 	.word	0x00002278

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00002278 	.word	0x00002278
     250:	00031594 	.word	0x00031594
     254:	00002350 	.word	0x00002350
     258:	00000000 	.word	0x00000000

0000025c <clear_signal>:
const int VGA_COL_LEN = 320; 
const int AMP = 0x800000;

void clear_signal(int pixel_vector[VGA_ROW_LEN][VGA_COL_LEN]) {
	int i = 0, j = 0;
	for (i = 0; i < VGA_ROW_LEN; i++) for (j = 0; j < VGA_COL_LEN; j++) pixel_vector[i][j] = 0;
     25c:	e3a0c000 	mov	r12, #0
     260:	e1a0200c 	mov	r2, r12
     264:	ea000007 	b	288 <clear_signal+0x2c>
     268:	e7812003 	str	r2, [r1, r3]
     26c:	e2833004 	add	r3, r3, #4
     270:	e3530c05 	cmp	r3, #1280	; 0x500
     274:	1afffffb 	bne	268 <clear_signal+0xc>
     278:	e28cc001 	add	r12, r12, #1
     27c:	e2800c05 	add	r0, r0, #1280	; 0x500
     280:	e35c00f0 	cmp	r12, #240	; 0xf0
     284:	012fff1e 	bxeq	lr
     288:	e1a01000 	mov	r1, r0
     28c:	e1a03002 	mov	r3, r2
     290:	eafffff4 	b	268 <clear_signal+0xc>

00000294 <note_to_pixel>:
}

void note_to_pixel(int pixel_vector[VGA_ROW_LEN][VGA_COL_LEN], int signal) {
     294:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
     298:	e1a09000 	mov	r9, r0
     29c:	e1a0b001 	mov	r11, r1
     2a0:	e1a0a000 	mov	r10, r0
	int i = 0, j = 0;
	for (i = 0; i < VGA_ROW_LEN; i++) {
     2a4:	e3a06000 	mov	r6, #0
void clear_signal(int pixel_vector[VGA_ROW_LEN][VGA_COL_LEN]) {
	int i = 0, j = 0;
	for (i = 0; i < VGA_ROW_LEN; i++) for (j = 0; j < VGA_COL_LEN; j++) pixel_vector[i][j] = 0;
}

void note_to_pixel(int pixel_vector[VGA_ROW_LEN][VGA_COL_LEN], int signal) {
     2a8:	e1a07006 	mov	r7, r6
	int i = 0, j = 0;
	for (i = 0; i < VGA_ROW_LEN; i++) {
		for (j = 0; j < VGA_COL_LEN - 1; j++) {
     2ac:	e300813f 	movw	r8, #319	; 0x13f
     2b0:	ea00000d 	b	2ec <note_to_pixel+0x58>
			pixel_vector[i][j] = pixel_vector[i][j + 1];
     2b4:	e2805001 	add	r5, r0, #1
     2b8:	e5942004 	ldr	r2, [r4, #4]
     2bc:	e5842000 	str	r2, [r4]
			pixel_vector[i][j + 1] = 0; 
     2c0:	e5a47004 	str	r7, [r4, #4]!
			VGA_draw_point_ASM(j, i, pixel_vector[i][j]);
     2c4:	e1a01006 	mov	r1, r6
     2c8:	e6bf2072 	sxth	r2, r2
     2cc:	eb0003dd 	bl	1248 <VGA_draw_point_ASM>
}

void note_to_pixel(int pixel_vector[VGA_ROW_LEN][VGA_COL_LEN], int signal) {
	int i = 0, j = 0;
	for (i = 0; i < VGA_ROW_LEN; i++) {
		for (j = 0; j < VGA_COL_LEN - 1; j++) {
     2d0:	e1a00005 	mov	r0, r5
     2d4:	e1550008 	cmp	r5, r8
     2d8:	1afffff5 	bne	2b4 <note_to_pixel+0x20>
	for (i = 0; i < VGA_ROW_LEN; i++) for (j = 0; j < VGA_COL_LEN; j++) pixel_vector[i][j] = 0;
}

void note_to_pixel(int pixel_vector[VGA_ROW_LEN][VGA_COL_LEN], int signal) {
	int i = 0, j = 0;
	for (i = 0; i < VGA_ROW_LEN; i++) {
     2dc:	e2866001 	add	r6, r6, #1
     2e0:	e28aac05 	add	r10, r10, #1280	; 0x500
     2e4:	e35600f0 	cmp	r6, #240	; 0xf0
     2e8:	0a000002 	beq	2f8 <note_to_pixel+0x64>
void clear_signal(int pixel_vector[VGA_ROW_LEN][VGA_COL_LEN]) {
	int i = 0, j = 0;
	for (i = 0; i < VGA_ROW_LEN; i++) for (j = 0; j < VGA_COL_LEN; j++) pixel_vector[i][j] = 0;
}

void note_to_pixel(int pixel_vector[VGA_ROW_LEN][VGA_COL_LEN], int signal) {
     2ec:	e1a0400a 	mov	r4, r10
     2f0:	e1a00007 	mov	r0, r7
     2f4:	eaffffee 	b	2b4 <note_to_pixel+0x20>
	int i = 0, j = 0;
	for (i = 0; i < VGA_ROW_LEN; i++) {
     2f8:	e3a04000 	mov	r4, #0
			pixel_vector[i][j] = pixel_vector[i][j + 1];
			pixel_vector[i][j + 1] = 0; 
			VGA_draw_point_ASM(j, i, pixel_vector[i][j]);
		}
	}
	for (i = 0; i < VGA_ROW_LEN; i++) VGA_draw_point_ASM(VGA_COL_LEN - 1, i, 0); 
     2fc:	e300613f 	movw	r6, #319	; 0x13f
     300:	e1a05004 	mov	r5, r4
     304:	e1a00006 	mov	r0, r6
     308:	e1a01004 	mov	r1, r4
     30c:	e1a02005 	mov	r2, r5
     310:	eb0003cc 	bl	1248 <VGA_draw_point_ASM>
     314:	e2844001 	add	r4, r4, #1
     318:	e35400f0 	cmp	r4, #240	; 0xf0
     31c:	1afffff8 	bne	304 <note_to_pixel+0x70>
	// scale signal originally ranged from -8388608 to 8388608 to scaled 56 to
	// 183 to fit VGA display
	int scaled_signal = ((signal + AMP) / 131072) + 40;
     320:	e28bb502 	add	r11, r11, #8388608	; 0x800000
     324:	e30f3fff 	movw	r3, #65535	; 0xffff
     328:	e3403001 	movt	r3, #1
     32c:	e08b3003 	add	r3, r11, r3
     330:	e35b0000 	cmp	r11, #0
     334:	b1a0b003 	movlt	r11, r3
     338:	e1a018cb 	asr	r1, r11, #17
     33c:	e2811028 	add	r1, r1, #40	; 0x28
	pixel_vector[scaled_signal][VGA_COL_LEN - 1] = 0xFFFF;
     340:	e0813101 	add	r3, r1, r1, lsl #2
     344:	e0899403 	add	r9, r9, r3, lsl #8
     348:	e30f3fff 	movw	r3, #65535	; 0xffff
     34c:	e58934fc 	str	r3, [r9, #1276]	; 0x4fc
	VGA_draw_point_ASM(VGA_COL_LEN - 1, scaled_signal, 0xFFFF);
     350:	e300013f 	movw	r0, #319	; 0x13f
     354:	e3e02000 	mvn	r2, #0
     358:	eb0003ba 	bl	1248 <VGA_draw_point_ASM>
     35c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}

00000360 <screen_write_cstring>:
	for (i = 0; i < NUM_NOTES; i++) {
		screen_write_cstring((char []){i + 'A', ':', is_pressed[i] + '0', ' ', '\0'}, 46 + i * 4, 2);
	}
}

void screen_write_cstring(char cstr[], int sx, int sy) {
     360:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
     364:	e1a04001 	mov	r4, r1
     368:	e1a05002 	mov	r5, r2
	int i = 0;
	while (cstr[i] != '\0') {
     36c:	e5d02000 	ldrb	r2, [r0]
     370:	e3520000 	cmp	r2, #0
     374:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
     378:	e1a06000 	mov	r6, r0
		VGA_write_char_ASM(sx, sy, cstr[i]);
		if (sx == 78) sy = (sy + 1) % 60;
     37c:	e3088889 	movw	r8, #34953	; 0x8889
     380:	e3488888 	movt	r8, #34952	; 0x8888
		sx = (sx + 1) % 80;
     384:	e3067667 	movw	r7, #26215	; 0x6667
     388:	e3467666 	movt	r7, #26214	; 0x6666
}

void screen_write_cstring(char cstr[], int sx, int sy) {
	int i = 0;
	while (cstr[i] != '\0') {
		VGA_write_char_ASM(sx, sy, cstr[i]);
     38c:	e1a00004 	mov	r0, r4
     390:	e1a01005 	mov	r1, r5
     394:	eb000387 	bl	11b8 <VGA_write_char_ASM>
		if (sx == 78) sy = (sy + 1) % 60;
     398:	e354004e 	cmp	r4, #78	; 0x4e
     39c:	1a000006 	bne	3bc <screen_write_cstring+0x5c>
     3a0:	e2853001 	add	r3, r5, #1
     3a4:	e0c52398 	smull	r2, r5, r8, r3
     3a8:	e0855003 	add	r5, r5, r3
     3ac:	e1a02fc3 	asr	r2, r3, #31
     3b0:	e06252c5 	rsb	r5, r2, r5, asr #5
     3b4:	e0655205 	rsb	r5, r5, r5, lsl #4
     3b8:	e0435105 	sub	r5, r3, r5, lsl #2
		sx = (sx + 1) % 80;
     3bc:	e2843001 	add	r3, r4, #1
     3c0:	e0c42397 	smull	r2, r4, r7, r3
     3c4:	e1a02fc3 	asr	r2, r3, #31
     3c8:	e06242c4 	rsb	r4, r2, r4, asr #5
     3cc:	e0844104 	add	r4, r4, r4, lsl #2
     3d0:	e0434204 	sub	r4, r3, r4, lsl #4
	}
}

void screen_write_cstring(char cstr[], int sx, int sy) {
	int i = 0;
	while (cstr[i] != '\0') {
     3d4:	e5f62001 	ldrb	r2, [r6, #1]!
     3d8:	e3520000 	cmp	r2, #0
     3dc:	1affffea 	bne	38c <screen_write_cstring+0x2c>
     3e0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000003e4 <render>:
	int scaled_signal = ((signal + AMP) / 131072) + 40;
	pixel_vector[scaled_signal][VGA_COL_LEN - 1] = 0xFFFF;
	VGA_draw_point_ASM(VGA_COL_LEN - 1, scaled_signal, 0xFFFF);
}

void render(int pixel_vector[VGA_ROW_LEN][VGA_COL_LEN], int * volume, int signal, int is_pressed[]) {
     3e4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     3e8:	e24dd014 	sub	sp, sp, #20
     3ec:	e1a06000 	mov	r6, r0
     3f0:	e1a04001 	mov	r4, r1
     3f4:	e1a05002 	mov	r5, r2
     3f8:	e1a07003 	mov	r7, r3
	int i;
	VGA_clear_pixelbuff_ASM(); 
     3fc:	eb00035d 	bl	1178 <VGA_clear_pixelbuff_ASM>
	note_to_pixel(pixel_vector, signal);
     400:	e1a00006 	mov	r0, r6
     404:	e1a01005 	mov	r1, r5
     408:	ebffffa1 	bl	294 <note_to_pixel>
	screen_write_cstring("Director: BOSS Li", 21, 0);
     40c:	e302028c 	movw	r0, #8844	; 0x228c
     410:	e3400000 	movt	r0, #0
     414:	e3a01015 	mov	r1, #21
     418:	e3a02000 	mov	r2, #0
     41c:	ebffffcf 	bl	360 <screen_write_cstring>
	screen_write_cstring("Volume: ", 0, 1);
     420:	e30202a0 	movw	r0, #8864	; 0x22a0
     424:	e3400000 	movt	r0, #0
     428:	e3a01000 	mov	r1, #0
     42c:	e3a02001 	mov	r2, #1
     430:	ebffffca 	bl	360 <screen_write_cstring>
	screen_write_cstring((char []){*volume + '0', '\0'}, 8, 1);
     434:	e5943000 	ldr	r3, [r4]
     438:	e2833030 	add	r3, r3, #48	; 0x30
     43c:	e5cd3004 	strb	r3, [sp, #4]
     440:	e3a03000 	mov	r3, #0
     444:	e5cd3005 	strb	r3, [sp, #5]
     448:	e28d0004 	add	r0, sp, #4
     44c:	e3a01008 	mov	r1, #8
     450:	e3a02001 	mov	r2, #1
     454:	ebffffc1 	bl	360 <screen_write_cstring>
	for (i = 0; i < NUM_NOTES; i++) {
     458:	e30232f0 	movw	r3, #8944	; 0x22f0
     45c:	e3403000 	movt	r3, #0
     460:	e5933000 	ldr	r3, [r3]
     464:	e3530000 	cmp	r3, #0
     468:	da00001a 	ble	4d8 <render+0xf4>
	int scaled_signal = ((signal + AMP) / 131072) + 40;
	pixel_vector[scaled_signal][VGA_COL_LEN - 1] = 0xFFFF;
	VGA_draw_point_ASM(VGA_COL_LEN - 1, scaled_signal, 0xFFFF);
}

void render(int pixel_vector[VGA_ROW_LEN][VGA_COL_LEN], int * volume, int signal, int is_pressed[]) {
     46c:	e2471004 	sub	r1, r7, #4
	VGA_clear_pixelbuff_ASM(); 
	note_to_pixel(pixel_vector, signal);
	screen_write_cstring("Director: BOSS Li", 21, 0);
	screen_write_cstring("Volume: ", 0, 1);
	screen_write_cstring((char []){*volume + '0', '\0'}, 8, 1);
	for (i = 0; i < NUM_NOTES; i++) {
     470:	e3a04000 	mov	r4, #0
		screen_write_cstring((char []){i + 'A', ':', is_pressed[i] + '0', ' ', '\0'}, 46 + i * 4, 2);
     474:	e3a0b03a 	mov	r11, #58	; 0x3a
     478:	e3a09020 	mov	r9, #32
     47c:	e1a0a004 	mov	r10, r4
     480:	e3a08002 	mov	r8, #2
	VGA_clear_pixelbuff_ASM(); 
	note_to_pixel(pixel_vector, signal);
	screen_write_cstring("Director: BOSS Li", 21, 0);
	screen_write_cstring("Volume: ", 0, 1);
	screen_write_cstring((char []){*volume + '0', '\0'}, 8, 1);
	for (i = 0; i < NUM_NOTES; i++) {
     484:	e30262f0 	movw	r6, #8944	; 0x22f0
     488:	e3406000 	movt	r6, #0
	int scaled_signal = ((signal + AMP) / 131072) + 40;
	pixel_vector[scaled_signal][VGA_COL_LEN - 1] = 0xFFFF;
	VGA_draw_point_ASM(VGA_COL_LEN - 1, scaled_signal, 0xFFFF);
}

void render(int pixel_vector[VGA_ROW_LEN][VGA_COL_LEN], int * volume, int signal, int is_pressed[]) {
     48c:	e2843041 	add	r3, r4, #65	; 0x41
	note_to_pixel(pixel_vector, signal);
	screen_write_cstring("Director: BOSS Li", 21, 0);
	screen_write_cstring("Volume: ", 0, 1);
	screen_write_cstring((char []){*volume + '0', '\0'}, 8, 1);
	for (i = 0; i < NUM_NOTES; i++) {
		screen_write_cstring((char []){i + 'A', ':', is_pressed[i] + '0', ' ', '\0'}, 46 + i * 4, 2);
     490:	e5cd3008 	strb	r3, [sp, #8]
     494:	e5cdb009 	strb	r11, [sp, #9]
     498:	e2815004 	add	r5, r1, #4
     49c:	e5913004 	ldr	r3, [r1, #4]
     4a0:	e2833030 	add	r3, r3, #48	; 0x30
     4a4:	e5cd300a 	strb	r3, [sp, #10]
     4a8:	e5cd900b 	strb	r9, [sp, #11]
     4ac:	e5cda00c 	strb	r10, [sp, #12]
	int scaled_signal = ((signal + AMP) / 131072) + 40;
	pixel_vector[scaled_signal][VGA_COL_LEN - 1] = 0xFFFF;
	VGA_draw_point_ASM(VGA_COL_LEN - 1, scaled_signal, 0xFFFF);
}

void render(int pixel_vector[VGA_ROW_LEN][VGA_COL_LEN], int * volume, int signal, int is_pressed[]) {
     4b0:	e2811032 	add	r1, r1, #50	; 0x32
	note_to_pixel(pixel_vector, signal);
	screen_write_cstring("Director: BOSS Li", 21, 0);
	screen_write_cstring("Volume: ", 0, 1);
	screen_write_cstring((char []){*volume + '0', '\0'}, 8, 1);
	for (i = 0; i < NUM_NOTES; i++) {
		screen_write_cstring((char []){i + 'A', ':', is_pressed[i] + '0', ' ', '\0'}, 46 + i * 4, 2);
     4b4:	e28d0008 	add	r0, sp, #8
     4b8:	e0671001 	rsb	r1, r7, r1
     4bc:	e1a02008 	mov	r2, r8
     4c0:	ebffffa6 	bl	360 <screen_write_cstring>
	VGA_clear_pixelbuff_ASM(); 
	note_to_pixel(pixel_vector, signal);
	screen_write_cstring("Director: BOSS Li", 21, 0);
	screen_write_cstring("Volume: ", 0, 1);
	screen_write_cstring((char []){*volume + '0', '\0'}, 8, 1);
	for (i = 0; i < NUM_NOTES; i++) {
     4c4:	e2844001 	add	r4, r4, #1
     4c8:	e1a01005 	mov	r1, r5
     4cc:	e5963000 	ldr	r3, [r6]
     4d0:	e1530004 	cmp	r3, r4
     4d4:	caffffec 	bgt	48c <render+0xa8>
		screen_write_cstring((char []){i + 'A', ':', is_pressed[i] + '0', ' ', '\0'}, 46 + i * 4, 2);
	}
}
     4d8:	e28dd014 	add	sp, sp, #20
     4dc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

000004e0 <disable_A9_interrupts>:
#include "../inc/int_setup.h"

void disable_A9_interrupts() {
	int status = 0b11010011;
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     4e0:	e3a030d3 	mov	r3, #211	; 0xd3
     4e4:	e129f003 	msr	CPSR_fc, r3
     4e8:	e12fff1e 	bx	lr

000004ec <enable_A9_interrupts>:
}

void enable_A9_interrupts() {
	int status = 0b01010011;
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     4ec:	e3a03053 	mov	r3, #83	; 0x53
     4f0:	e129f003 	msr	CPSR_fc, r3
     4f4:	e12fff1e 	bx	lr

000004f8 <set_A9_IRQ_stack>:

void set_A9_IRQ_stack() {
	int stack, mode;
	stack = 0xFFFFFFFF - 7;
	mode = 0b11010010;
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     4f8:	e3a030d2 	mov	r3, #210	; 0xd2
     4fc:	e129f003 	msr	CPSR_fc, r3
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
     500:	e3e03007 	mvn	r3, #7
     504:	e1a0d003 	mov	sp, r3
	
	mode = 0b11010011;
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     508:	e3a030d3 	mov	r3, #211	; 0xd3
     50c:	e129f003 	msr	CPSR_fc, r3
     510:	e12fff1e 	bx	lr

00000514 <config_interrupt>:
}

void config_interrupt(int ID, int CPU) {
     514:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
	int reg_offset;
	int index;
	int value;
	int address;
	
	reg_offset = (ID>>3) & 0xFFFFFFFC;
     518:	e1a031c0 	asr	r3, r0, #3
     51c:	e3c33003 	bic	r3, r3, #3
	index = ID & 0x1F;
	value = 1<<index;
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
     520:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
	int index;
	int value;
	int address;
	
	reg_offset = (ID>>3) & 0xFFFFFFFC;
	index = ID & 0x1F;
     524:	e200201f 	and	r2, r0, #31
	value = 1<<index;
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
	*(int *)address |= value;
     528:	e513c300 	ldr	r12, [r3, #-768]	; 0xfffffd00
     52c:	e3a04001 	mov	r4, #1
     530:	e18c2214 	orr	r2, r12, r4, lsl r2
     534:	e5032300 	str	r2, [r3, #-768]	; 0xfffffd00
	
	reg_offset = (ID & 0xFFFFFFFC);
	index = ID & 3;
	address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
	*(char *)address = (char)CPU;
     538:	e2400b4a 	sub	r0, r0, #75776	; 0x12800
     53c:	e5c01000 	strb	r1, [r0]
}
     540:	e8bd0010 	ldmfd	sp!, {r4}
     544:	e12fff1e 	bx	lr

00000548 <config_GIC>:

void config_GIC(int len, int* IDs) {
     548:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
	int i;
	for(i=0 ; i<len ; i++)
     54c:	e2506000 	subs	r6, r0, #0
     550:	da000008 	ble	578 <config_GIC+0x30>
	index = ID & 3;
	address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
	*(char *)address = (char)CPU;
}

void config_GIC(int len, int* IDs) {
     554:	e2415004 	sub	r5, r1, #4
	int i;
	for(i=0 ; i<len ; i++)
     558:	e3a04000 	mov	r4, #0
		config_interrupt(IDs[i],1);
     55c:	e3a07001 	mov	r7, #1
     560:	e5b50004 	ldr	r0, [r5, #4]!
     564:	e1a01007 	mov	r1, r7
     568:	ebffffe9 	bl	514 <config_interrupt>
	*(char *)address = (char)CPU;
}

void config_GIC(int len, int* IDs) {
	int i;
	for(i=0 ; i<len ; i++)
     56c:	e2844001 	add	r4, r4, #1
     570:	e1540006 	cmp	r4, r6
     574:	1afffff9 	bne	560 <config_GIC+0x18>
		config_interrupt(IDs[i],1);
	*((int *) (MPCORE_GIC_CPUIF + ICCPMR)) = 0xFFFF;
     578:	e3e02a13 	mvn	r2, #77824	; 0x13000
     57c:	e30f3fff 	movw	r3, #65535	; 0xffff
     580:	e5023efb 	str	r3, [r2, #-3835]	; 0xfffff105
	*((int *) (MPCORE_GIC_CPUIF)) = 1;
     584:	e3a03001 	mov	r3, #1
     588:	e5023eff 	str	r3, [r2, #-3839]	; 0xfffff101
	*((int *) (MPCORE_GIC_DIST)) = 1;
     58c:	e3e02a12 	mvn	r2, #73728	; 0x12000
     590:	e5023fff 	str	r3, [r2, #-4095]	; 0xfffff001
     594:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}

00000598 <__cs3_isr_irq>:
}

void __attribute__ ((interrupt)) __cs3_isr_irq() {
     598:	e24ee004 	sub	lr, lr, #4
     59c:	e92d503f 	push	{r0, r1, r2, r3, r4, r5, r12, lr}
	int interrupt_ID = *((int *) (MPCORE_GIC_CPUIF + ICCIAR));
     5a0:	e3e03a13 	mvn	r3, #77824	; 0x13000
     5a4:	e5134ef3 	ldr	r4, [r3, #-3827]	; 0xfffff10d
	
	switch(interrupt_ID) {
     5a8:	e3540053 	cmp	r4, #83	; 0x53
     5ac:	0a000038 	beq	694 <__cs3_isr_irq+0xfc>
     5b0:	ca00000f 	bgt	5f4 <__cs3_isr_irq+0x5c>
     5b4:	e354004e 	cmp	r4, #78	; 0x4e
     5b8:	0a00002d 	beq	674 <__cs3_isr_irq+0xdc>
     5bc:	ca000006 	bgt	5dc <__cs3_isr_irq+0x44>
     5c0:	e3540048 	cmp	r4, #72	; 0x48
     5c4:	0a000026 	beq	664 <__cs3_isr_irq+0xcc>
     5c8:	e3540049 	cmp	r4, #73	; 0x49
     5cc:	0a000026 	beq	66c <__cs3_isr_irq+0xd4>
     5d0:	e354001d 	cmp	r4, #29
     5d4:	0a000016 	beq	634 <__cs3_isr_irq+0x9c>
     5d8:	ea000033 	b	6ac <__cs3_isr_irq+0x114>
     5dc:	e3540050 	cmp	r4, #80	; 0x50
     5e0:	0a000027 	beq	684 <__cs3_isr_irq+0xec>
     5e4:	ba000024 	blt	67c <__cs3_isr_irq+0xe4>
     5e8:	e3540051 	cmp	r4, #81	; 0x51
     5ec:	0a000026 	beq	68c <__cs3_isr_irq+0xf4>
     5f0:	ea00002d 	b	6ac <__cs3_isr_irq+0x114>
     5f4:	e35400c7 	cmp	r4, #199	; 0xc7
     5f8:	0a000011 	beq	644 <__cs3_isr_irq+0xac>
     5fc:	ca000006 	bgt	61c <__cs3_isr_irq+0x84>
     600:	e3540059 	cmp	r4, #89	; 0x59
     604:	0a000026 	beq	6a4 <__cs3_isr_irq+0x10c>
     608:	e35400c5 	cmp	r4, #197	; 0xc5
     60c:	0a00000a 	beq	63c <__cs3_isr_irq+0xa4>
     610:	e3540054 	cmp	r4, #84	; 0x54
     614:	0a000020 	beq	69c <__cs3_isr_irq+0x104>
     618:	ea000023 	b	6ac <__cs3_isr_irq+0x114>
     61c:	e35400c9 	cmp	r4, #201	; 0xc9
     620:	0a00000b 	beq	654 <__cs3_isr_irq+0xbc>
     624:	ba000008 	blt	64c <__cs3_isr_irq+0xb4>
     628:	e35400ca 	cmp	r4, #202	; 0xca
     62c:	0a00000a 	beq	65c <__cs3_isr_irq+0xc4>
     630:	ea00001d 	b	6ac <__cs3_isr_irq+0x114>
		
		case 29:  A9_PRIV_TIM_ISR(); break;
     634:	eb000178 	bl	c1c <A9_PRIV_TIM_ISR>
     638:	ea00001c 	b	6b0 <__cs3_isr_irq+0x118>
		case 197: HPS_GPIO1_ISR(); break;
     63c:	eb000177 	bl	c20 <HPS_GPIO1_ISR>
     640:	ea00001a 	b	6b0 <__cs3_isr_irq+0x118>
		case 199: HPS_TIM0_ISR(); break;
     644:	eb000176 	bl	c24 <HPS_TIM0_ISR>
     648:	ea000018 	b	6b0 <__cs3_isr_irq+0x118>
		case 200: HPS_TIM1_ISR(); break;
     64c:	eb00017c 	bl	c44 <HPS_TIM1_ISR>
     650:	ea000016 	b	6b0 <__cs3_isr_irq+0x118>
		case 201: HPS_TIM2_ISR(); break;
     654:	eb000182 	bl	c64 <HPS_TIM2_ISR>
     658:	ea000014 	b	6b0 <__cs3_isr_irq+0x118>
		case 202: HPS_TIM3_ISR(); break;
     65c:	eb000181 	bl	c68 <HPS_TIM3_ISR>
     660:	ea000012 	b	6b0 <__cs3_isr_irq+0x118>
		case 72:  FPGA_INTERVAL_TIM_ISR(); break;
     664:	eb000180 	bl	c6c <FPGA_INTERVAL_TIM_ISR>
     668:	ea000010 	b	6b0 <__cs3_isr_irq+0x118>
		case 73:  FPGA_PB_KEYS_ISR(); break;
     66c:	eb00017f 	bl	c70 <FPGA_PB_KEYS_ISR>
     670:	ea00000e 	b	6b0 <__cs3_isr_irq+0x118>
		case 78:  FPGA_Audio_ISR(); break;
     674:	eb00017e 	bl	c74 <FPGA_Audio_ISR>
     678:	ea00000c 	b	6b0 <__cs3_isr_irq+0x118>
		case 79:  FPGA_PS2_ISR(); break;
     67c:	eb00017d 	bl	c78 <FPGA_PS2_ISR>
     680:	ea00000a 	b	6b0 <__cs3_isr_irq+0x118>
		case 80:  FPGA_JTAG_ISR(); break;
     684:	eb00017c 	bl	c7c <FPGA_JTAG_ISR>
     688:	ea000008 	b	6b0 <__cs3_isr_irq+0x118>
		case 81:  FPGA_IrDA_ISR(); break;
     68c:	eb00017b 	bl	c80 <FPGA_IrDA_ISR>
     690:	ea000006 	b	6b0 <__cs3_isr_irq+0x118>
		case 83:  FPGA_JP1_ISR(); break;
     694:	eb00017a 	bl	c84 <FPGA_JP1_ISR>
     698:	ea000004 	b	6b0 <__cs3_isr_irq+0x118>
		case 84:  FPGA_JP2_ISR(); break;
     69c:	eb000179 	bl	c88 <FPGA_JP2_ISR>
     6a0:	ea000002 	b	6b0 <__cs3_isr_irq+0x118>
		case 89:  FPGA_PS2_DUAL_ISR(); break;
     6a4:	eb000178 	bl	c8c <FPGA_PS2_DUAL_ISR>
     6a8:	ea000000 	b	6b0 <__cs3_isr_irq+0x118>
     6ac:	eafffffe 	b	6ac <__cs3_isr_irq+0x114>
	
		default: while(1); break;
	}
	
	*((int *) (MPCORE_GIC_CPUIF + ICCEOIR)) = interrupt_ID;
     6b0:	e3e03a13 	mvn	r3, #77824	; 0x13000
     6b4:	e5034eef 	str	r4, [r3, #-3823]	; 0xfffff111
     6b8:	e8fd903f 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r12, pc}^

000006bc <__cs3_reset>:
}

void __attribute__ ((interrupt)) __cs3_reset (void) {
     6bc:	eafffffe 	b	6bc <__cs3_reset>

000006c0 <__cs3_isr_undef>:
	while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void) {
     6c0:	eafffffe 	b	6c0 <__cs3_isr_undef>

000006c4 <__cs3_isr_swi>:
	while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void) {
     6c4:	eafffffe 	b	6c4 <__cs3_isr_swi>

000006c8 <__cs3_isr_pabort>:
	while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void) {
     6c8:	eafffffe 	b	6c8 <__cs3_isr_pabort>

000006cc <__cs3_isr_dabort>:
	while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void) {
     6cc:	eafffffe 	b	6cc <__cs3_isr_dabort>

000006d0 <__cs3_isr_fiq>:
	while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void) {
     6d0:	eafffffe 	b	6d0 <__cs3_isr_fiq>

000006d4 <fix_bug>:
	while(1);
}

void fix_bug() {
	volatile int * addr = (int *)0xFFFED198;
	*addr = 0x000C0000;
     6d4:	e3a02703 	mov	r2, #786432	; 0xc0000
     6d8:	e3e03a12 	mvn	r3, #73728	; 0x12000
     6dc:	e5032e67 	str	r2, [r3, #-3687]	; 0xfffff199
     6e0:	e12fff1e 	bx	lr

000006e4 <int_setup>:
}

void int_setup(int len, int* IDs) {
     6e4:	e92d4038 	push	{r3, r4, r5, lr}
     6e8:	e1a05000 	mov	r5, r0
     6ec:	e1a04001 	mov	r4, r1
	disable_A9_interrupts();
     6f0:	ebffff7a 	bl	4e0 <disable_A9_interrupts>
	set_A9_IRQ_stack();
     6f4:	ebffff7f 	bl	4f8 <set_A9_IRQ_stack>
	fix_bug();
     6f8:	ebfffff5 	bl	6d4 <fix_bug>
	config_GIC(len, IDs);
     6fc:	e1a00005 	mov	r0, r5
     700:	e1a01004 	mov	r1, r4
     704:	ebffff8f 	bl	548 <config_GIC>
	enable_A9_interrupts();
     708:	ebffff77 	bl	4ec <enable_A9_interrupts>
     70c:	e8bd8038 	pop	{r3, r4, r5, pc}

00000710 <handle_note_pressed_listener>:
#include "../inc/kbd_listener_util.h"

void handle_note_pressed_listener(int is_pressed[], int * is_break, char * read, int * ampl) {
	switch (*read) {
     710:	e5d22000 	ldrb	r2, [r2]
     714:	e352002b 	cmp	r2, #43	; 0x2b
     718:	0a000032 	beq	7e8 <handle_note_pressed_listener+0xd8>
     71c:	8a00000c 	bhi	754 <handle_note_pressed_listener+0x44>
     720:	e352001c 	cmp	r2, #28
     724:	0a000017 	beq	788 <handle_note_pressed_listener+0x78>
     728:	8a000004 	bhi	740 <handle_note_pressed_listener+0x30>
     72c:	e3520016 	cmp	r2, #22
     730:	0a000054 	beq	888 <ICDIPTR+0x88>
     734:	e352001b 	cmp	r2, #27
     738:	1a000075 	bne	914 <ICDIPTR+0x114>
     73c:	ea000019 	b	7a8 <handle_note_pressed_listener+0x98>
     740:	e352001e 	cmp	r2, #30
     744:	0a00005f 	beq	8c8 <ICDIPTR+0xc8>
     748:	e3520023 	cmp	r2, #35	; 0x23
     74c:	1a000070 	bne	914 <ICDIPTR+0x114>
     750:	ea00001c 	b	7c8 <handle_note_pressed_listener+0xb8>
     754:	e352004b 	cmp	r2, #75	; 0x4b
     758:	0a00003a 	beq	848 <ICDIPTR+0x48>
     75c:	8a000004 	bhi	774 <handle_note_pressed_listener+0x64>
     760:	e352003b 	cmp	r2, #59	; 0x3b
     764:	0a000027 	beq	808 <ICDIPTR+0x8>
     768:	e3520042 	cmp	r2, #66	; 0x42
     76c:	1a000068 	bne	914 <ICDIPTR+0x114>
     770:	ea00002c 	b	828 <ICDIPTR+0x28>
     774:	e352004c 	cmp	r2, #76	; 0x4c
     778:	0a00003a 	beq	868 <ICDIPTR+0x68>
     77c:	e35200f0 	cmp	r2, #240	; 0xf0
     780:	1a000063 	bne	914 <ICDIPTR+0x114>
     784:	ea00005f 	b	908 <ICDIPTR+0x108>
		case 0x1C: // A -> C
			if (*is_break) {
     788:	e5913000 	ldr	r3, [r1]
     78c:	e3530000 	cmp	r3, #0
				is_pressed[0] = 0;
     790:	13a03000 	movne	r3, #0
     794:	15803000 	strne	r3, [r0]
				*is_break = 0;
     798:	15813000 	strne	r3, [r1]
			} else {
				is_pressed[0] = 1;
     79c:	03a03001 	moveq	r3, #1
     7a0:	05803000 	streq	r3, [r0]
     7a4:	e12fff1e 	bx	lr
			}
			break;
		case 0x1B: // S -> D
			if (*is_break) {
     7a8:	e5913000 	ldr	r3, [r1]
     7ac:	e3530000 	cmp	r3, #0
				is_pressed[1] = 0;
     7b0:	13a03000 	movne	r3, #0
     7b4:	15803004 	strne	r3, [r0, #4]
				*is_break = 0;
     7b8:	15813000 	strne	r3, [r1]
			} else {
				is_pressed[1] = 1;
     7bc:	03a03001 	moveq	r3, #1
     7c0:	05803004 	streq	r3, [r0, #4]
     7c4:	e12fff1e 	bx	lr
			}
			break;
		case 0x23: // D -> E
			if (*is_break) {
     7c8:	e5913000 	ldr	r3, [r1]
     7cc:	e3530000 	cmp	r3, #0
				is_pressed[2] = 0;
     7d0:	13a03000 	movne	r3, #0
     7d4:	15803008 	strne	r3, [r0, #8]
				*is_break = 0;
     7d8:	15813000 	strne	r3, [r1]
			} else {
				is_pressed[2] = 1;
     7dc:	03a03001 	moveq	r3, #1
     7e0:	05803008 	streq	r3, [r0, #8]
     7e4:	e12fff1e 	bx	lr
			}
			break;
		case 0x2B: // F -> F
			if (*is_break) {
     7e8:	e5913000 	ldr	r3, [r1]
     7ec:	e3530000 	cmp	r3, #0
				is_pressed[3] = 0;
     7f0:	13a03000 	movne	r3, #0
     7f4:	1580300c 	strne	r3, [r0, #12]
				*is_break = 0;
     7f8:	15813000 	strne	r3, [r1]
			} else {
				is_pressed[3] = 1;
     7fc:	03a03001 	moveq	r3, #1
     800:	0580300c 	streq	r3, [r0, #12]
     804:	e12fff1e 	bx	lr
			}
			break;
		case 0x3B: // J -> G
			if (*is_break) {
     808:	e5913000 	ldr	r3, [r1]
     80c:	e3530000 	cmp	r3, #0
				is_pressed[4] = 0;
     810:	13a03000 	movne	r3, #0
     814:	15803010 	strne	r3, [r0, #16]
				*is_break = 0;
     818:	15813000 	strne	r3, [r1]
			} else {
				is_pressed[4] = 1;
     81c:	03a03001 	moveq	r3, #1
     820:	05803010 	streq	r3, [r0, #16]
     824:	e12fff1e 	bx	lr
			}
			break;
		case 0x42: // K -> A
			if (*is_break) {
     828:	e5913000 	ldr	r3, [r1]
     82c:	e3530000 	cmp	r3, #0
				is_pressed[5] = 0;
     830:	13a03000 	movne	r3, #0
     834:	15803014 	strne	r3, [r0, #20]
				*is_break = 0;
     838:	15813000 	strne	r3, [r1]
			} else {
				is_pressed[5] = 1;
     83c:	03a03001 	moveq	r3, #1
     840:	05803014 	streq	r3, [r0, #20]
     844:	e12fff1e 	bx	lr
			}
			break;
		case 0x4B: // L -> B
			if (*is_break) {
     848:	e5913000 	ldr	r3, [r1]
     84c:	e3530000 	cmp	r3, #0
				is_pressed[6] = 0;
     850:	13a03000 	movne	r3, #0
     854:	15803018 	strne	r3, [r0, #24]
				*is_break = 0;
     858:	15813000 	strne	r3, [r1]
			} else {
				is_pressed[6] = 1;
     85c:	03a03001 	moveq	r3, #1
     860:	05803018 	streq	r3, [r0, #24]
     864:	e12fff1e 	bx	lr
			}
			break;
		case 0x4C: // HC -> HC
			if (*is_break) {
     868:	e5913000 	ldr	r3, [r1]
     86c:	e3530000 	cmp	r3, #0
				is_pressed[7] = 0;
     870:	13a03000 	movne	r3, #0
     874:	1580301c 	strne	r3, [r0, #28]
				*is_break = 0;
     878:	15813000 	strne	r3, [r1]
			} else {
				is_pressed[7] = 1;
     87c:	03a03001 	moveq	r3, #1
     880:	0580301c 	streq	r3, [r0, #28]
     884:	e12fff1e 	bx	lr
			}
			break;
		case 0x16:
			if (*is_break) {
     888:	e5912000 	ldr	r2, [r1]
     88c:	e3520000 	cmp	r2, #0
     890:	012fff1e 	bxeq	lr
				*ampl = (*ampl - 1) % 10;
     894:	e5932000 	ldr	r2, [r3]
     898:	e2422001 	sub	r2, r2, #1
     89c:	e3060667 	movw	r0, #26215	; 0x6667
     8a0:	e3460666 	movt	r0, #26214	; 0x6666
     8a4:	e0c0c290 	smull	r12, r0, r0, r2
     8a8:	e1a0cfc2 	asr	r12, r2, #31
     8ac:	e06c0140 	rsb	r0, r12, r0, asr #2
     8b0:	e0800100 	add	r0, r0, r0, lsl #2
     8b4:	e0422080 	sub	r2, r2, r0, lsl #1
     8b8:	e5832000 	str	r2, [r3]
				*is_break = 0;
     8bc:	e3a03000 	mov	r3, #0
     8c0:	e5813000 	str	r3, [r1]
     8c4:	e12fff1e 	bx	lr
			}
			break;
		case 0x1E:
			if (*is_break) {
     8c8:	e5912000 	ldr	r2, [r1]
     8cc:	e3520000 	cmp	r2, #0
     8d0:	012fff1e 	bxeq	lr
				*ampl = (*ampl + 1) % 10;
     8d4:	e5932000 	ldr	r2, [r3]
     8d8:	e2822001 	add	r2, r2, #1
     8dc:	e3060667 	movw	r0, #26215	; 0x6667
     8e0:	e3460666 	movt	r0, #26214	; 0x6666
     8e4:	e0c0c290 	smull	r12, r0, r0, r2
     8e8:	e1a0cfc2 	asr	r12, r2, #31
     8ec:	e06c0140 	rsb	r0, r12, r0, asr #2
     8f0:	e0800100 	add	r0, r0, r0, lsl #2
     8f4:	e0422080 	sub	r2, r2, r0, lsl #1
     8f8:	e5832000 	str	r2, [r3]
				*is_break = 0;
     8fc:	e3a03000 	mov	r3, #0
     900:	e5813000 	str	r3, [r1]
     904:	e12fff1e 	bx	lr
			}
			break;
		case 0xF0:
			*is_break = 1;
     908:	e3a03001 	mov	r3, #1
     90c:	e5813000 	str	r3, [r1]
			break;
     910:	e12fff1e 	bx	lr
		default:
			*is_break = 0;
     914:	e3a03000 	mov	r3, #0
     918:	e5813000 	str	r3, [r1]
     91c:	e12fff1e 	bx	lr

00000920 <clear_ispressed>:

const int SAMPLE_RATE = 48000;
const double NOTE_LOOKUP[] = {130.813, 146.832, 164.814, 174.614, 195.998, 220.000, 246.942, 261.626};
const int NUM_NOTES = 8; 

void clear_ispressed(int is_pressed[]) {
     920:	e3a03000 	mov	r3, #0
	int i; 
	for (i = 0; i < NUM_NOTES; i++) is_pressed[i] = 0; 
     924:	e1a02003 	mov	r2, r3
     928:	e7802003 	str	r2, [r0, r3]
     92c:	e2833004 	add	r3, r3, #4
     930:	e3530020 	cmp	r3, #32
     934:	1afffffb 	bne	928 <clear_ispressed+0x8>
}
     938:	e12fff1e 	bx	lr

0000093c <make_wave>:

int make_wave(int instant, double frequency) {
     93c:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
     940:	e1a04002 	mov	r4, r2
     944:	e1a05003 	mov	r5, r3
	int index = (int)(frequency * (double)instant) % SAMPLE_RATE;
     948:	eb0003ce 	bl	1888 <__aeabi_i2d>
     94c:	e1a02004 	mov	r2, r4
     950:	e1a03005 	mov	r3, r5
     954:	eb000402 	bl	1964 <__aeabi_dmul>
     958:	eb000528 	bl	1e00 <__aeabi_d2iz>
     95c:	e30179f1 	movw	r7, #6641	; 0x19f1
     960:	e3407576 	movt	r7, #1398	; 0x576
     964:	e0c73097 	smull	r3, r7, r7, r0
     968:	e1a03fc0 	asr	r3, r0, #31
     96c:	e0637547 	rsb	r7, r3, r7, asr #10
     970:	e30b3b80 	movw	r3, #48000	; 0xbb80
     974:	e0670793 	mls	r7, r3, r7, r0
	double interpolation = (double)(index - (int)index);
	int signals = (int)((1.0 - interpolation) * (double)sine[(int)index] +
     978:	e3026358 	movw	r6, #9048	; 0x2358
     97c:	e3406000 	movt	r6, #0
     980:	e7960107 	ldr	r0, [r6, r7, lsl #2]
     984:	eb0003bf 	bl	1888 <__aeabi_i2d>
     988:	e1a04000 	mov	r4, r0
     98c:	e1a05001 	mov	r5, r1
							  (interpolation) * (double)sine[(int)index + 1]);
     990:	e2877001 	add	r7, r7, #1
     994:	e7960107 	ldr	r0, [r6, r7, lsl #2]
     998:	eb0003ba 	bl	1888 <__aeabi_i2d>
     99c:	e3a02000 	mov	r2, #0
     9a0:	e3a03000 	mov	r3, #0
     9a4:	eb0003ee 	bl	1964 <__aeabi_dmul>
     9a8:	e1a02000 	mov	r2, r0
     9ac:	e1a03001 	mov	r3, r1
}

int make_wave(int instant, double frequency) {
	int index = (int)(frequency * (double)instant) % SAMPLE_RATE;
	double interpolation = (double)(index - (int)index);
	int signals = (int)((1.0 - interpolation) * (double)sine[(int)index] +
     9b0:	e1a00004 	mov	r0, r4
     9b4:	e1a01005 	mov	r1, r5
     9b8:	eb0002e5 	bl	1554 <__adddf3>
     9bc:	eb00050f 	bl	1e00 <__aeabi_d2iz>
							  (interpolation) * (double)sine[(int)index + 1]);
	return signals;
}
     9c0:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}

000009c4 <synthesis_sound>:

void synthesis_sound(int * signal, int is_pressed[], int * instance, int * volume) {
     9c4:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
     9c8:	e1a09000 	mov	r9, r0
     9cc:	e1a07001 	mov	r7, r1
     9d0:	e1a08002 	mov	r8, r2
     9d4:	e1a0b003 	mov	r11, r3
     9d8:	e3a04000 	mov	r4, #0
	int i = 0, total = 0, count_note = 0;
     9dc:	e1a05004 	mov	r5, r4
     9e0:	e1a06004 	mov	r6, r4
	for (i = 0; i < NUM_NOTES; i++) {
		if (is_pressed[i]) {
			total = total + make_wave(*instance, NOTE_LOOKUP[i]);
     9e4:	e302a2b0 	movw	r10, #8880	; 0x22b0
     9e8:	e340a000 	movt	r10, #0
}

void synthesis_sound(int * signal, int is_pressed[], int * instance, int * volume) {
	int i = 0, total = 0, count_note = 0;
	for (i = 0; i < NUM_NOTES; i++) {
		if (is_pressed[i]) {
     9ec:	e7973004 	ldr	r3, [r7, r4]
     9f0:	e3530000 	cmp	r3, #0
     9f4:	0a000005 	beq	a10 <synthesis_sound+0x4c>
	int signals = (int)((1.0 - interpolation) * (double)sine[(int)index] +
							  (interpolation) * (double)sine[(int)index + 1]);
	return signals;
}

void synthesis_sound(int * signal, int is_pressed[], int * instance, int * volume) {
     9f8:	e1a03084 	lsl	r3, r4, #1
	int i = 0, total = 0, count_note = 0;
	for (i = 0; i < NUM_NOTES; i++) {
		if (is_pressed[i]) {
			total = total + make_wave(*instance, NOTE_LOOKUP[i]);
     9fc:	e5980000 	ldr	r0, [r8]
     a00:	e18320da 	ldrd	r2, [r3, r10]
     a04:	ebffffcc 	bl	93c <make_wave>
     a08:	e0866000 	add	r6, r6, r0
			count_note = count_note + 1;
     a0c:	e2855001 	add	r5, r5, #1
     a10:	e2844004 	add	r4, r4, #4
	return signals;
}

void synthesis_sound(int * signal, int is_pressed[], int * instance, int * volume) {
	int i = 0, total = 0, count_note = 0;
	for (i = 0; i < NUM_NOTES; i++) {
     a14:	e3540020 	cmp	r4, #32
     a18:	1afffff3 	bne	9ec <synthesis_sound+0x28>
		if (is_pressed[i]) {
			total = total + make_wave(*instance, NOTE_LOOKUP[i]);
			count_note = count_note + 1;
		}
	}
	*signal = (total * (*volume)) / (10 * count_note);
     a1c:	e59b0000 	ldr	r0, [r11]
     a20:	e0851105 	add	r1, r5, r5, lsl #2
     a24:	e0000690 	mul	r0, r0, r6
     a28:	e1a01081 	lsl	r1, r1, #1
     a2c:	eb000272 	bl	13fc <__aeabi_idiv>
     a30:	e5890000 	str	r0, [r9]
    *instance = (*instance + 1) % 48000;
     a34:	e5983000 	ldr	r3, [r8]
     a38:	e2833001 	add	r3, r3, #1
     a3c:	e30129f1 	movw	r2, #6641	; 0x19f1
     a40:	e3402576 	movt	r2, #1398	; 0x576
     a44:	e0c21392 	smull	r1, r2, r2, r3
     a48:	e1a01fc3 	asr	r1, r3, #31
     a4c:	e0612542 	rsb	r2, r1, r2, asr #10
     a50:	e30b1b80 	movw	r1, #48000	; 0xbb80
     a54:	e0633291 	mls	r3, r1, r2, r3
     a58:	e5883000 	str	r3, [r8]
     a5c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}

00000a60 <HEX_clear_ASM>:
     a60:	e3a01000 	mov	r1, #0
     a64:	ea000004 	b	a7c <WRITE>

00000a68 <HEX_flood_ASM>:
     a68:	e3a0107f 	mov	r1, #127	; 0x7f
     a6c:	ea000002 	b	a7c <WRITE>

00000a70 <HEX_write_ASM>:
     a70:	e59f2064 	ldr	r2, [pc, #100]	; adc <PATTERNS+0x14>
     a74:	e7d21001 	ldrb	r1, [r2, r1]
     a78:	eaffffff 	b	a7c <WRITE>

00000a7c <WRITE>:
     a7c:	e92d0030 	push	{r4, r5}
     a80:	e59f2058 	ldr	r2, [pc, #88]	; ae0 <PATTERNS+0x18>
     a84:	e3a03000 	mov	r3, #0
     a88:	e3e050ff 	mvn	r5, #255	; 0xff

00000a8c <LOOP>:
     a8c:	e3100001 	tst	r0, #1
     a90:	0a000003 	beq	aa4 <CONTINUE>
     a94:	e5924000 	ldr	r4, [r2]
     a98:	e0044005 	and	r4, r4, r5
     a9c:	e1844001 	orr	r4, r4, r1
     aa0:	e5824000 	str	r4, [r2]

00000aa4 <CONTINUE>:
     aa4:	e1a05c65 	ror	r5, r5, #24
     aa8:	e1a01c61 	ror	r1, r1, #24
     aac:	e2833001 	add	r3, r3, #1
     ab0:	e3530004 	cmp	r3, #4
     ab4:	059f2028 	ldreq	r2, [pc, #40]	; ae4 <PATTERNS+0x1c>
     ab8:	e1b000a0 	lsrs	r0, r0, #1
     abc:	1afffff2 	bne	a8c <LOOP>
     ac0:	e8bd0030 	pop	{r4, r5}
     ac4:	e12fff1e 	bx	lr

00000ac8 <PATTERNS>:
     ac8:	4f5b063f 	.word	0x4f5b063f
     acc:	077d6d66 	.word	0x077d6d66
     ad0:	7c776f7f 	.word	0x7c776f7f
     ad4:	71795e39 	.word	0x71795e39
     ad8:	000000ff 	.word	0x000000ff
     adc:	00000ac8 	.word	0x00000ac8
     ae0:	ff200020 	.word	0xff200020
     ae4:	ff200030 	.word	0xff200030

00000ae8 <HPS_TIM_config_ASM>:
     ae8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
     aec:	e3a01000 	mov	r1, #0
     af0:	e3a02001 	mov	r2, #1
     af4:	e5907000 	ldr	r7, [r0]
     af8:	eaffffff 	b	afc <LOOP>

00000afc <LOOP>:
     afc:	e1170112 	tst	r7, r2, lsl r1
     b00:	0a000000 	beq	b08 <CONTINUE>
     b04:	eb000004 	bl	b1c <CONFIG>

00000b08 <CONTINUE>:
     b08:	e2811001 	add	r1, r1, #1
     b0c:	e3510004 	cmp	r1, #4
     b10:	bafffff9 	blt	afc <LOOP>

00000b14 <DONE>:
     b14:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
     b18:	e12fff1e 	bx	lr

00000b1c <CONFIG>:
     b1c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     b20:	e59f30e4 	ldr	r3, [pc, #228]	; c0c <ICDICFR+0xc>
     b24:	e7934101 	ldr	r4, [r3, r1, lsl #2]
     b28:	eb000005 	bl	b44 <DISABLE>
     b2c:	eb000008 	bl	b54 <SET_LOAD_VAL>
     b30:	eb00000e 	bl	b70 <SET_LOAD_BIT>
     b34:	eb000013 	bl	b88 <SET_INT_BIT>
     b38:	eb000019 	bl	ba4 <SET_EN_BIT>
     b3c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     b40:	e12fff1e 	bx	lr

00000b44 <DISABLE>:
     b44:	e5945008 	ldr	r5, [r4, #8]
     b48:	e3c55001 	bic	r5, r5, #1
     b4c:	e5845008 	str	r5, [r4, #8]
     b50:	e12fff1e 	bx	lr

00000b54 <SET_LOAD_VAL>:
     b54:	e5905004 	ldr	r5, [r0, #4]
     b58:	e3a06019 	mov	r6, #25
     b5c:	e0050695 	mul	r5, r5, r6
     b60:	e3510002 	cmp	r1, #2
     b64:	b1a05105 	lsllt	r5, r5, #2
     b68:	e5845000 	str	r5, [r4]
     b6c:	e12fff1e 	bx	lr

00000b70 <SET_LOAD_BIT>:
     b70:	e5945008 	ldr	r5, [r4, #8]
     b74:	e5906008 	ldr	r6, [r0, #8]
     b78:	e3c55002 	bic	r5, r5, #2
     b7c:	e1855086 	orr	r5, r5, r6, lsl #1
     b80:	e5845008 	str	r5, [r4, #8]
     b84:	e12fff1e 	bx	lr

00000b88 <SET_INT_BIT>:
     b88:	e5945008 	ldr	r5, [r4, #8]
     b8c:	e590600c 	ldr	r6, [r0, #12]
     b90:	e2266001 	eor	r6, r6, #1
     b94:	e3c55004 	bic	r5, r5, #4
     b98:	e1855106 	orr	r5, r5, r6, lsl #2
     b9c:	e5845008 	str	r5, [r4, #8]
     ba0:	e12fff1e 	bx	lr

00000ba4 <SET_EN_BIT>:
     ba4:	e5945008 	ldr	r5, [r4, #8]
     ba8:	e5906010 	ldr	r6, [r0, #16]
     bac:	e3c55001 	bic	r5, r5, #1
     bb0:	e1855006 	orr	r5, r5, r6
     bb4:	e5845008 	str	r5, [r4, #8]
     bb8:	e12fff1e 	bx	lr

00000bbc <HPS_TIM_clear_INT_ASM>:
     bbc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     bc0:	e3a01000 	mov	r1, #0
     bc4:	e3a02001 	mov	r2, #1
     bc8:	eaffffff 	b	bcc <INT_LOOP>

00000bcc <INT_LOOP>:
     bcc:	e1100112 	tst	r0, r2, lsl r1
     bd0:	0a000000 	beq	bd8 <INT_CONTINUE>
     bd4:	eb000004 	bl	bec <CLEAR_IT>

00000bd8 <INT_CONTINUE>:
     bd8:	e2811001 	add	r1, r1, #1
     bdc:	e3510004 	cmp	r1, #4
     be0:	bafffff9 	blt	bcc <INT_LOOP>

00000be4 <INT_DONE>:
     be4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     be8:	e12fff1e 	bx	lr

00000bec <CLEAR_IT>:
     bec:	e59f3018 	ldr	r3, [pc, #24]	; c0c <ICDICFR+0xc>
     bf0:	e7933101 	ldr	r3, [r3, r1, lsl #2]
     bf4:	e593300c 	ldr	r3, [r3, #12]
     bf8:	e12fff1e 	bx	lr

00000bfc <HPS_TIM_BASE>:
     bfc:	ffc08000 	.word	0xffc08000
     c00:	ffc09000 	.word	0xffc09000
     c04:	ffd00000 	.word	0xffd00000
     c08:	ffd01000 	.word	0xffd01000
     c0c:	00000bfc 	.word	0x00000bfc

00000c10 <hps_tim0_int_flag>:
     c10:	00000000 	.word	0x00000000

00000c14 <hps_tim1_int_flag>:
     c14:	00000000 	.word	0x00000000

00000c18 <pushbtn_int_flag>:
     c18:	00000000 	.word	0x00000000

00000c1c <A9_PRIV_TIM_ISR>:

pushbtn_int_flag:   
	.word 0x0

A9_PRIV_TIM_ISR:
	BX LR
     c1c:	e12fff1e 	bx	lr

00000c20 <HPS_GPIO1_ISR>:
	
HPS_GPIO1_ISR:
	BX LR
     c20:	e12fff1e 	bx	lr

00000c24 <HPS_TIM0_ISR>:
	
HPS_TIM0_ISR:
	PUSH {LR}
     c24:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    MOV R0, #0x1
     c28:	e3a00001 	mov	r0, #1
    BL HPS_TIM_clear_INT_ASM
     c2c:	ebffffe2 	bl	bbc <HPS_TIM_clear_INT_ASM>
    LDR R0, =hps_tim0_int_flag
     c30:	e59f0058 	ldr	r0, [pc, #88]	; c90 <FPGA_PS2_DUAL_ISR+0x4>
    MOV R1, #1
     c34:	e3a01001 	mov	r1, #1
    STR R1, [R0]
     c38:	e5801000 	str	r1, [r0]
    POP {LR}
     c3c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     c40:	e12fff1e 	bx	lr

00000c44 <HPS_TIM1_ISR>:
	
HPS_TIM1_ISR:
	PUSH {LR}
     c44:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    MOV R0, #0b0010
     c48:	e3a00002 	mov	r0, #2
    BL HPS_TIM_clear_INT_ASM
     c4c:	ebffffda 	bl	bbc <HPS_TIM_clear_INT_ASM>
    LDR R0, =hps_tim1_int_flag
     c50:	e59f003c 	ldr	r0, [pc, #60]	; c94 <FPGA_PS2_DUAL_ISR+0x8>
    MOV R1, #1
     c54:	e3a01001 	mov	r1, #1
    STR R1, [R0]
     c58:	e5801000 	str	r1, [r0]
    POP {LR}
     c5c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     c60:	e12fff1e 	bx	lr

00000c64 <HPS_TIM2_ISR>:
	
HPS_TIM2_ISR:
	BX LR
     c64:	e12fff1e 	bx	lr

00000c68 <HPS_TIM3_ISR>:
	
HPS_TIM3_ISR:
	BX LR
     c68:	e12fff1e 	bx	lr

00000c6c <FPGA_INTERVAL_TIM_ISR>:
	
FPGA_INTERVAL_TIM_ISR:
	BX LR
     c6c:	e12fff1e 	bx	lr

00000c70 <FPGA_PB_KEYS_ISR>:
	
FPGA_PB_KEYS_ISR:
	BX LR
     c70:	e12fff1e 	bx	lr

00000c74 <FPGA_Audio_ISR>:
	
FPGA_Audio_ISR:
	BX LR
     c74:	e12fff1e 	bx	lr

00000c78 <FPGA_PS2_ISR>:
	
FPGA_PS2_ISR:
	BX LR
     c78:	e12fff1e 	bx	lr

00000c7c <FPGA_JTAG_ISR>:
	
FPGA_JTAG_ISR:
	BX LR
     c7c:	e12fff1e 	bx	lr

00000c80 <FPGA_IrDA_ISR>:
	
FPGA_IrDA_ISR:
	BX LR
     c80:	e12fff1e 	bx	lr

00000c84 <FPGA_JP1_ISR>:
	
FPGA_JP1_ISR:
	BX LR
     c84:	e12fff1e 	bx	lr

00000c88 <FPGA_JP2_ISR>:
	
FPGA_JP2_ISR:
	BX LR
     c88:	e12fff1e 	bx	lr

00000c8c <FPGA_PS2_DUAL_ISR>:
	
FPGA_PS2_DUAL_ISR:
	BX LR
     c8c:	e12fff1e 	bx	lr
	
HPS_TIM0_ISR:
	PUSH {LR}
    MOV R0, #0x1
    BL HPS_TIM_clear_INT_ASM
    LDR R0, =hps_tim0_int_flag
     c90:	00000c10 	.word	0x00000c10
	
HPS_TIM1_ISR:
	PUSH {LR}
    MOV R0, #0b0010
    BL HPS_TIM_clear_INT_ASM
    LDR R0, =hps_tim1_int_flag
     c94:	00000c14 	.word	0x00000c14

00000c98 <read_LEDs_ASM>:
     c98:	e59f1010 	ldr	r1, [pc, #16]	; cb0 <write_LEDs_ASM+0xc>
     c9c:	e5910000 	ldr	r0, [r1]
     ca0:	e12fff1e 	bx	lr

00000ca4 <write_LEDs_ASM>:
     ca4:	e59f1004 	ldr	r1, [pc, #4]	; cb0 <write_LEDs_ASM+0xc>
     ca8:	e5810000 	str	r0, [r1]
     cac:	e12fff1e 	bx	lr
     cb0:	ff200000 	.word	0xff200000

00000cb4 <audio_read_data_ASM>:
     cb4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     cb8:	e92d0003 	push	{r0, r1}
     cbc:	eb000093 	bl	f10 <audio_read_ralc_ASM>
     cc0:	e3500000 	cmp	r0, #0
     cc4:	08bd0003 	popeq	{r0, r1}
     cc8:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     ccc:	03a00000 	moveq	r0, #0
     cd0:	012fff1e 	bxeq	lr
     cd4:	eb000092 	bl	f24 <audio_read_rarc_ASM>
     cd8:	e3500000 	cmp	r0, #0
     cdc:	08bd0003 	popeq	{r0, r1}
     ce0:	03a00000 	moveq	r0, #0
     ce4:	012fff1e 	bxeq	lr
     ce8:	e8bd0003 	pop	{r0, r1}
     cec:	e59f2240 	ldr	r2, [pc, #576]	; f34 <audio_read_rarc_ASM+0x10>
     cf0:	e5922000 	ldr	r2, [r2]
     cf4:	e5802000 	str	r2, [r0]
     cf8:	e59f3238 	ldr	r3, [pc, #568]	; f38 <audio_read_rarc_ASM+0x14>
     cfc:	e5933000 	ldr	r3, [r3]
     d00:	e5813000 	str	r3, [r1]
     d04:	e3a00001 	mov	r0, #1

00000d08 <audio_read_leftdata_ASM>:
     d08:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     d0c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     d10:	eb00007e 	bl	f10 <audio_read_ralc_ASM>
     d14:	e3500000 	cmp	r0, #0
     d18:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     d1c:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     d20:	03a00000 	moveq	r0, #0
     d24:	012fff1e 	bxeq	lr
     d28:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     d2c:	e59f2200 	ldr	r2, [pc, #512]	; f34 <audio_read_rarc_ASM+0x10>
     d30:	e5922000 	ldr	r2, [r2]
     d34:	e5802000 	str	r2, [r0]
     d38:	e3a00001 	mov	r0, #1
     d3c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     d40:	e12fff1e 	bx	lr

00000d44 <audio_read_rightdata_ASM>:
     d44:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     d48:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     d4c:	eb000074 	bl	f24 <audio_read_rarc_ASM>
     d50:	e3500000 	cmp	r0, #0
     d54:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     d58:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     d5c:	03a00000 	moveq	r0, #0
     d60:	012fff1e 	bxeq	lr
     d64:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     d68:	e59f21c8 	ldr	r2, [pc, #456]	; f38 <audio_read_rarc_ASM+0x14>
     d6c:	e5922000 	ldr	r2, [r2]
     d70:	e5802000 	str	r2, [r0]
     d74:	e3a00001 	mov	r0, #1
     d78:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     d7c:	e12fff1e 	bx	lr

00000d80 <audio_write_data_ASM>:
     d80:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     d84:	e92d0003 	push	{r0, r1}
     d88:	eb000056 	bl	ee8 <audio_read_wslc_ASM>
     d8c:	e3500000 	cmp	r0, #0
     d90:	08bd0003 	popeq	{r0, r1}
     d94:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     d98:	03a00000 	moveq	r0, #0
     d9c:	012fff1e 	bxeq	lr
     da0:	eb000055 	bl	efc <audio_read_wsrc_ASM>
     da4:	e3500000 	cmp	r0, #0
     da8:	08bd0003 	popeq	{r0, r1}
     dac:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     db0:	03a00000 	moveq	r0, #0
     db4:	012fff1e 	bxeq	lr
     db8:	e8bd0003 	pop	{r0, r1}
     dbc:	e59f2170 	ldr	r2, [pc, #368]	; f34 <audio_read_rarc_ASM+0x10>
     dc0:	e5820000 	str	r0, [r2]
     dc4:	e59f316c 	ldr	r3, [pc, #364]	; f38 <audio_read_rarc_ASM+0x14>
     dc8:	e5831000 	str	r1, [r3]
     dcc:	e3a00001 	mov	r0, #1
     dd0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     dd4:	e12fff1e 	bx	lr

00000dd8 <audio_write_leftdata_ASM>:
     dd8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     ddc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     de0:	eb000040 	bl	ee8 <audio_read_wslc_ASM>
     de4:	e3500000 	cmp	r0, #0
     de8:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     dec:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     df0:	03a00000 	moveq	r0, #0
     df4:	012fff1e 	bxeq	lr
     df8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     dfc:	e59f2130 	ldr	r2, [pc, #304]	; f34 <audio_read_rarc_ASM+0x10>
     e00:	e5820000 	str	r0, [r2]
     e04:	e3a00001 	mov	r0, #1
     e08:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     e0c:	e12fff1e 	bx	lr

00000e10 <audio_write_rightdata_ASM>:
     e10:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     e14:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     e18:	eb000037 	bl	efc <audio_read_wsrc_ASM>
     e1c:	e3500000 	cmp	r0, #0
     e20:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     e24:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     e28:	03a00000 	moveq	r0, #0
     e2c:	012fff1e 	bxeq	lr
     e30:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     e34:	e59f20fc 	ldr	r2, [pc, #252]	; f38 <audio_read_rarc_ASM+0x14>
     e38:	e5820000 	str	r0, [r2]
     e3c:	e3a00001 	mov	r0, #1
     e40:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     e44:	e12fff1e 	bx	lr

00000e48 <audio_enable_read_fifo_clear_ASM>:
     e48:	e59f00ec 	ldr	r0, [pc, #236]	; f3c <audio_read_rarc_ASM+0x18>
     e4c:	e5901000 	ldr	r1, [r0]
     e50:	e3811004 	orr	r1, r1, #4
     e54:	e5801000 	str	r1, [r0]
     e58:	e12fff1e 	bx	lr

00000e5c <audio_enable_write_fifo_clear_ASM>:
     e5c:	e59f00d8 	ldr	r0, [pc, #216]	; f3c <audio_read_rarc_ASM+0x18>
     e60:	e5901000 	ldr	r1, [r0]
     e64:	e3811008 	orr	r1, r1, #8
     e68:	e5801000 	str	r1, [r0]
     e6c:	e12fff1e 	bx	lr

00000e70 <audio_disable_read_fifo_clear_ASM>:
     e70:	e59f00c4 	ldr	r0, [pc, #196]	; f3c <audio_read_rarc_ASM+0x18>
     e74:	e5901000 	ldr	r1, [r0]
     e78:	e3c11004 	bic	r1, r1, #4
     e7c:	e5801000 	str	r1, [r0]
     e80:	e12fff1e 	bx	lr

00000e84 <audio_disable_write_fifo_clear_ASM>:
     e84:	e59f00b0 	ldr	r0, [pc, #176]	; f3c <audio_read_rarc_ASM+0x18>
     e88:	e5901000 	ldr	r1, [r0]
     e8c:	e3c11008 	bic	r1, r1, #8
     e90:	e5801000 	str	r1, [r0]
     e94:	e12fff1e 	bx	lr

00000e98 <audio_enable_read_int_ASM>:
     e98:	e59f009c 	ldr	r0, [pc, #156]	; f3c <audio_read_rarc_ASM+0x18>
     e9c:	e5901000 	ldr	r1, [r0]
     ea0:	e3811001 	orr	r1, r1, #1
     ea4:	e5801000 	str	r1, [r0]
     ea8:	e12fff1e 	bx	lr

00000eac <audio_enable_write_int_ASM>:
     eac:	e59f0088 	ldr	r0, [pc, #136]	; f3c <audio_read_rarc_ASM+0x18>
     eb0:	e5901000 	ldr	r1, [r0]
     eb4:	e3811002 	orr	r1, r1, #2
     eb8:	e5801000 	str	r1, [r0]
     ebc:	e12fff1e 	bx	lr

00000ec0 <audio_disable_read_int_ASM>:
     ec0:	e59f0074 	ldr	r0, [pc, #116]	; f3c <audio_read_rarc_ASM+0x18>
     ec4:	e5901000 	ldr	r1, [r0]
     ec8:	e3c11001 	bic	r1, r1, #1
     ecc:	e5801000 	str	r1, [r0]
     ed0:	e12fff1e 	bx	lr

00000ed4 <audio_disable_write_int_ASM>:
     ed4:	e59f0060 	ldr	r0, [pc, #96]	; f3c <audio_read_rarc_ASM+0x18>
     ed8:	e5901000 	ldr	r1, [r0]
     edc:	e3c11002 	bic	r1, r1, #2
     ee0:	e5801000 	str	r1, [r0]
     ee4:	e12fff1e 	bx	lr

00000ee8 <audio_read_wslc_ASM>:
     ee8:	e59f0050 	ldr	r0, [pc, #80]	; f40 <audio_read_rarc_ASM+0x1c>
     eec:	e5900000 	ldr	r0, [r0]
     ef0:	e1a00c20 	lsr	r0, r0, #24
     ef4:	e20000ff 	and	r0, r0, #255	; 0xff
     ef8:	e12fff1e 	bx	lr

00000efc <audio_read_wsrc_ASM>:
     efc:	e59f003c 	ldr	r0, [pc, #60]	; f40 <audio_read_rarc_ASM+0x1c>
     f00:	e5900000 	ldr	r0, [r0]
     f04:	e1a00820 	lsr	r0, r0, #16
     f08:	e20000ff 	and	r0, r0, #255	; 0xff
     f0c:	e12fff1e 	bx	lr

00000f10 <audio_read_ralc_ASM>:
     f10:	e59f0028 	ldr	r0, [pc, #40]	; f40 <audio_read_rarc_ASM+0x1c>
     f14:	e5900000 	ldr	r0, [r0]
     f18:	e1a00420 	lsr	r0, r0, #8
     f1c:	e20000ff 	and	r0, r0, #255	; 0xff
     f20:	e12fff1e 	bx	lr

00000f24 <audio_read_rarc_ASM>:
     f24:	e59f0014 	ldr	r0, [pc, #20]	; f40 <audio_read_rarc_ASM+0x1c>
     f28:	e5900000 	ldr	r0, [r0]
     f2c:	e20000ff 	and	r0, r0, #255	; 0xff
     f30:	e12fff1e 	bx	lr
     f34:	ff203048 	.word	0xff203048
     f38:	ff20304c 	.word	0xff20304c
     f3c:	ff203040 	.word	0xff203040
     f40:	ff203044 	.word	0xff203044

00000f44 <read_ps2_data_ASM>:
     f44:	e59f114c 	ldr	r1, [pc, #332]	; 1098 <ps2_fifo_ravail+0x4>
     f48:	e5911000 	ldr	r1, [r1]
     f4c:	e3a02902 	mov	r2, #32768	; 0x8000
     f50:	e1110002 	tst	r1, r2
     f54:	03a00000 	moveq	r0, #0
     f58:	012fff1e 	bxeq	lr
     f5c:	e20120ff 	and	r2, r1, #255	; 0xff
     f60:	e5c02000 	strb	r2, [r0]
     f64:	e59f2130 	ldr	r2, [pc, #304]	; 109c <ps2_fifo_ravail+0x8>
     f68:	e0010002 	and	r0, r1, r2
     f6c:	e1a00820 	lsr	r0, r0, #16
     f70:	e12fff1e 	bx	lr

00000f74 <enable_ps2_int_ASM>:
     f74:	e59f011c 	ldr	r0, [pc, #284]	; 1098 <ps2_fifo_ravail+0x4>
     f78:	e3a01001 	mov	r1, #1
     f7c:	e5c01004 	strb	r1, [r0, #4]
     f80:	e12fff1e 	bx	lr

00000f84 <disable_ps2_int_ASM>:
     f84:	e59f010c 	ldr	r0, [pc, #268]	; 1098 <ps2_fifo_ravail+0x4>
     f88:	e3a01000 	mov	r1, #0
     f8c:	e5c01004 	strb	r1, [r0, #4]
     f90:	e12fff1e 	bx	lr

00000f94 <ps2_fifo_data>:
	...

00001094 <ps2_fifo_ravail>:
    1094:	00000000 	.word	0x00000000
    1098:	ff200100 	.word	0xff200100
    109c:	ffff0000 	.word	0xffff0000

000010a0 <read_PB_data_ASM>:
    10a0:	e59f1074 	ldr	r1, [pc, #116]	; 111c <disable_PB_INT_ASM+0x14>
    10a4:	e5910000 	ldr	r0, [r1]
    10a8:	e12fff1e 	bx	lr

000010ac <PB_data_is_pressed_ASM>:
    10ac:	e59f1068 	ldr	r1, [pc, #104]	; 111c <disable_PB_INT_ASM+0x14>
    10b0:	e5912000 	ldr	r2, [r1]
    10b4:	e0000002 	and	r0, r0, r2
    10b8:	e3300000 	teq	r0, #0
    10bc:	13a00001 	movne	r0, #1
    10c0:	e12fff1e 	bx	lr

000010c4 <read_PB_edgecap_ASM>:
    10c4:	e59f1054 	ldr	r1, [pc, #84]	; 1120 <disable_PB_INT_ASM+0x18>
    10c8:	e5910000 	ldr	r0, [r1]
    10cc:	e12fff1e 	bx	lr

000010d0 <PB_edgecap_is_pressed_ASM>:
    10d0:	e59f1048 	ldr	r1, [pc, #72]	; 1120 <disable_PB_INT_ASM+0x18>
    10d4:	e5912000 	ldr	r2, [r1]
    10d8:	e0000002 	and	r0, r0, r2
    10dc:	e3300000 	teq	r0, #0
    10e0:	13a00001 	movne	r0, #1
    10e4:	e12fff1e 	bx	lr

000010e8 <PB_clear_edgecp_ASM>:
    10e8:	e59f1030 	ldr	r1, [pc, #48]	; 1120 <disable_PB_INT_ASM+0x18>
    10ec:	e5810000 	str	r0, [r1]
    10f0:	e12fff1e 	bx	lr

000010f4 <enable_PB_INT_ASM>:
    10f4:	e59f1028 	ldr	r1, [pc, #40]	; 1124 <disable_PB_INT_ASM+0x1c>
    10f8:	e5912000 	ldr	r2, [r1]
    10fc:	e1800002 	orr	r0, r0, r2
    1100:	e5810000 	str	r0, [r1]
    1104:	e12fff1e 	bx	lr

00001108 <disable_PB_INT_ASM>:
    1108:	e59f1014 	ldr	r1, [pc, #20]	; 1124 <disable_PB_INT_ASM+0x1c>
    110c:	e5912000 	ldr	r2, [r1]
    1110:	e1c00002 	bic	r0, r0, r2
    1114:	e5810000 	str	r0, [r1]
    1118:	e12fff1e 	bx	lr
    111c:	ff200050 	.word	0xff200050
    1120:	ff20005c 	.word	0xff20005c
    1124:	ff200058 	.word	0xff200058

00001128 <read_slider_switches_ASM>:
    1128:	e59f1004 	ldr	r1, [pc, #4]	; 1134 <read_slider_switches_ASM+0xc>
    112c:	e5910000 	ldr	r0, [r1]
    1130:	e12fff1e 	bx	lr
    1134:	ff200040 	.word	0xff200040

00001138 <VGA_clear_charbuff_ASM>:
    1138:	e92d0030 	push	{r4, r5}
    113c:	e3a02000 	mov	r2, #0
    1140:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    1144:	e3a00000 	mov	r0, #0

00001148 <CHAR_LOOPX>:
    1148:	e3a01000 	mov	r1, #0
    114c:	e0834000 	add	r4, r3, r0

00001150 <CHAR_LOOPY>:
    1150:	e0845381 	add	r5, r4, r1, lsl #7
    1154:	e5c52000 	strb	r2, [r5]
    1158:	e2811001 	add	r1, r1, #1
    115c:	e351003c 	cmp	r1, #60	; 0x3c
    1160:	bafffffa 	blt	1150 <CHAR_LOOPY>
    1164:	e2800001 	add	r0, r0, #1
    1168:	e3500050 	cmp	r0, #80	; 0x50
    116c:	bafffff5 	blt	1148 <CHAR_LOOPX>
    1170:	e8bd0030 	pop	{r4, r5}
    1174:	e12fff1e 	bx	lr

00001178 <VGA_clear_pixelbuff_ASM>:
    1178:	e92d0030 	push	{r4, r5}
    117c:	e3a02000 	mov	r2, #0
    1180:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
    1184:	e3a00000 	mov	r0, #0

00001188 <PIXEL_LOOPX>:
    1188:	e3a01000 	mov	r1, #0
    118c:	e0834080 	add	r4, r3, r0, lsl #1

00001190 <PIXEL_LOOPY>:
    1190:	e0845501 	add	r5, r4, r1, lsl #10
    1194:	e1c520b0 	strh	r2, [r5]
    1198:	e2811001 	add	r1, r1, #1
    119c:	e35100f0 	cmp	r1, #240	; 0xf0
    11a0:	bafffffa 	blt	1190 <PIXEL_LOOPY>
    11a4:	e2800001 	add	r0, r0, #1
    11a8:	e3500d05 	cmp	r0, #320	; 0x140
    11ac:	bafffff5 	blt	1188 <PIXEL_LOOPX>
    11b0:	e8bd0030 	pop	{r4, r5}
    11b4:	e12fff1e 	bx	lr

000011b8 <VGA_write_char_ASM>:
    11b8:	e3500000 	cmp	r0, #0
    11bc:	b12fff1e 	bxlt	lr
    11c0:	e3510000 	cmp	r1, #0
    11c4:	b12fff1e 	bxlt	lr
    11c8:	e350004f 	cmp	r0, #79	; 0x4f
    11cc:	c12fff1e 	bxgt	lr
    11d0:	e351003b 	cmp	r1, #59	; 0x3b
    11d4:	c12fff1e 	bxgt	lr
    11d8:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    11dc:	e0833000 	add	r3, r3, r0
    11e0:	e0833381 	add	r3, r3, r1, lsl #7
    11e4:	e5c32000 	strb	r2, [r3]
    11e8:	e12fff1e 	bx	lr

000011ec <VGA_write_byte_ASM>:
    11ec:	e3500000 	cmp	r0, #0
    11f0:	b12fff1e 	bxlt	lr
    11f4:	e3510000 	cmp	r1, #0
    11f8:	b12fff1e 	bxlt	lr
    11fc:	e350004e 	cmp	r0, #78	; 0x4e
    1200:	c12fff1e 	bxgt	lr
    1204:	e351003b 	cmp	r1, #59	; 0x3b
    1208:	c12fff1e 	bxgt	lr
    120c:	e92d0030 	push	{r4, r5}
    1210:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    1214:	e20250f0 	and	r5, r2, #240	; 0xf0
    1218:	e1a05225 	lsr	r5, r5, #4
    121c:	e202400f 	and	r4, r2, #15
    1220:	e59f2068 	ldr	r2, [pc, #104]	; 1290 <HEX_ASCII+0x10>
    1224:	e7d25005 	ldrb	r5, [r2, r5]
    1228:	e7d24004 	ldrb	r4, [r2, r4]
    122c:	e0833000 	add	r3, r3, r0
    1230:	e0833381 	add	r3, r3, r1, lsl #7
    1234:	e5c35000 	strb	r5, [r3]
    1238:	e2833001 	add	r3, r3, #1
    123c:	e5c34000 	strb	r4, [r3]
    1240:	e8bd0030 	pop	{r4, r5}
    1244:	e12fff1e 	bx	lr

00001248 <VGA_draw_point_ASM>:
    1248:	e59f3044 	ldr	r3, [pc, #68]	; 1294 <HEX_ASCII+0x14>
    124c:	e3500000 	cmp	r0, #0
    1250:	b12fff1e 	bxlt	lr
    1254:	e3510000 	cmp	r1, #0
    1258:	b12fff1e 	bxlt	lr
    125c:	e1500003 	cmp	r0, r3
    1260:	c12fff1e 	bxgt	lr
    1264:	e35100ef 	cmp	r1, #239	; 0xef
    1268:	c12fff1e 	bxgt	lr
    126c:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
    1270:	e0833080 	add	r3, r3, r0, lsl #1
    1274:	e0833501 	add	r3, r3, r1, lsl #10
    1278:	e1c320b0 	strh	r2, [r3]
    127c:	e12fff1e 	bx	lr

00001280 <HEX_ASCII>:
    1280:	33323130 	.word	0x33323130
    1284:	37363534 	.word	0x37363534
    1288:	42413938 	.word	0x42413938
    128c:	46454443 	.word	0x46454443
    1290:	00001280 	.word	0x00001280
    1294:	0000013f 	.word	0x0000013f

00001298 <main>:
#include "./drivers/inc/slider_switches.h"
#include "./drivers/inc/display_util.h"
#include "./drivers/inc/sound_util.h"
#include "./drivers/inc/kbd_listener_util.h"

int main() {
    1298:	e92d4df0 	push	{r4, r5, r6, r7, r8, r10, r11, lr}
    129c:	e28db01c 	add	r11, sp, #28
    12a0:	e24dd030 	sub	sp, sp, #48	; 0x30

	// Application States declearation
	int display[VGA_ROW_LEN][VGA_COL_LEN];
    12a4:	e3022284 	movw	r2, #8836	; 0x2284
    12a8:	e3402000 	movt	r2, #0
    12ac:	e3023288 	movw	r3, #8840	; 0x2288
    12b0:	e3403000 	movt	r3, #0
    12b4:	e5922000 	ldr	r2, [r2]
    12b8:	e5933000 	ldr	r3, [r3]
    12bc:	e0030293 	mul	r3, r3, r2
    12c0:	e1a03103 	lsl	r3, r3, #2
    12c4:	e283300a 	add	r3, r3, #10
    12c8:	e3c33007 	bic	r3, r3, #7
    12cc:	e04dd003 	sub	sp, sp, r3
    12d0:	e1a0000d 	mov	r0, sp
	int is_specific_btn_pressed[NUM_NOTES];
    12d4:	e30232f0 	movw	r3, #8944	; 0x22f0
    12d8:	e3403000 	movt	r3, #0
    12dc:	e5933000 	ldr	r3, [r3]
    12e0:	e1a03103 	lsl	r3, r3, #2
    12e4:	e283300a 	add	r3, r3, #10
    12e8:	e3c33007 	bic	r3, r3, #7
    12ec:	e04dd003 	sub	sp, sp, r3
	int is_break = 0;
    12f0:	e3a04000 	mov	r4, #0
    12f4:	e50b4024 	str	r4, [r11, #-36]	; 0xffffffdc
	int ampl = 5;
    12f8:	e3a03005 	mov	r3, #5
    12fc:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
	int instance = 0;
    1300:	e50b402c 	str	r4, [r11, #-44]	; 0xffffffd4

	// Application States initiallization
	clear_signal(display); 
    1304:	e1a0a000 	mov	r10, r0
    1308:	ebfffbd3 	bl	25c <clear_signal>
	clear_ispressed(is_specific_btn_pressed); 
    130c:	e1a0600d 	mov	r6, sp
    1310:	e1a0000d 	mov	r0, sp
    1314:	ebfffd81 	bl	920 <clear_ispressed>

	// Transfer Variables
	int signal = 0;
    1318:	e50b4030 	str	r4, [r11, #-48]	; 0xffffffd0
	char to_read = 0;
    131c:	e54b4031 	strb	r4, [r11, #-49]	; 0xffffffcf

	// Interrupt Timer for Sampling
	int_setup(1, (int []){199});
    1320:	e24b101c 	sub	r1, r11, #28
    1324:	e3a030c7 	mov	r3, #199	; 0xc7
    1328:	e5213004 	str	r3, [r1, #-4]!
    132c:	e3a00001 	mov	r0, #1
    1330:	ebfffceb 	bl	6e4 <int_setup>

	HPS_TIM_config_t hps_tim_aud;

	hps_tim_aud.tim = TIM0;
    1334:	e3a03001 	mov	r3, #1
    1338:	e54b304c 	strb	r3, [r11, #-76]	; 0xffffffb4
	hps_tim_aud.timeout = 20;
    133c:	e3a02014 	mov	r2, #20
    1340:	e50b2048 	str	r2, [r11, #-72]	; 0xffffffb8
	hps_tim_aud.LD_en = 1;
    1344:	e50b3044 	str	r3, [r11, #-68]	; 0xffffffbc
	hps_tim_aud.INT_en = 1;
    1348:	e50b3040 	str	r3, [r11, #-64]	; 0xffffffc0
	hps_tim_aud.enable = 1;
    134c:	e50b303c 	str	r3, [r11, #-60]	; 0xffffffc4

	HPS_TIM_config_ASM(&hps_tim_aud);
    1350:	e24b004c 	sub	r0, r11, #76	; 0x4c
    1354:	ebfffde3 	bl	ae8 <HPS_TIM_config_ASM>
	// Point of Injection
	while(1) {

		if (read_ps2_data_ASM(&to_read)) handle_note_pressed_listener(is_specific_btn_pressed, &is_break, &to_read, &ampl);

		if(hps_tim0_int_flag == 1) {
    1358:	e3004c10 	movw	r4, #3088	; 0xc10
    135c:	e3404000 	movt	r4, #0

			hps_tim0_int_flag = 0; 
    1360:	e3a08000 	mov	r8, #0

			audio_write_data_ASM(signal, signal);

			synthesis_sound(&signal, is_specific_btn_pressed, &instance, &ampl);

			if (instance % 1600 == 0) render(display, &ampl, signal, is_specific_btn_pressed);
    1364:	e308751f 	movw	r7, #34079	; 0x851f
    1368:	e34571eb 	movt	r7, #20971	; 0x51eb
	HPS_TIM_config_ASM(&hps_tim_aud);

	// Point of Injection
	while(1) {

		if (read_ps2_data_ASM(&to_read)) handle_note_pressed_listener(is_specific_btn_pressed, &is_break, &to_read, &ampl);
    136c:	e24b0031 	sub	r0, r11, #49	; 0x31
    1370:	ebfffef3 	bl	f44 <read_ps2_data_ASM>
    1374:	e3500000 	cmp	r0, #0
    1378:	0a000004 	beq	1390 <main+0xf8>
    137c:	e1a00006 	mov	r0, r6
    1380:	e24b1024 	sub	r1, r11, #36	; 0x24
    1384:	e24b2031 	sub	r2, r11, #49	; 0x31
    1388:	e24b3028 	sub	r3, r11, #40	; 0x28
    138c:	ebfffcdf 	bl	710 <handle_note_pressed_listener>

		if(hps_tim0_int_flag == 1) {
    1390:	e5942000 	ldr	r2, [r4]
    1394:	e3520001 	cmp	r2, #1
    1398:	1afffff3 	bne	136c <main+0xd4>

			hps_tim0_int_flag = 0; 
    139c:	e5848000 	str	r8, [r4]

			audio_write_data_ASM(signal, signal);
    13a0:	e24b501c 	sub	r5, r11, #28
    13a4:	e5351014 	ldr	r1, [r5, #-20]!	; 0xffffffec
    13a8:	e1a00001 	mov	r0, r1
    13ac:	ebfffe73 	bl	d80 <audio_write_data_ASM>

			synthesis_sound(&signal, is_specific_btn_pressed, &instance, &ampl);
    13b0:	e1a00005 	mov	r0, r5
    13b4:	e1a01006 	mov	r1, r6
    13b8:	e24b202c 	sub	r2, r11, #44	; 0x2c
    13bc:	e24b3028 	sub	r3, r11, #40	; 0x28
    13c0:	ebfffd7f 	bl	9c4 <synthesis_sound>

			if (instance % 1600 == 0) render(display, &ampl, signal, is_specific_btn_pressed);
    13c4:	e51b302c 	ldr	r3, [r11, #-44]	; 0xffffffd4
    13c8:	e0c12397 	smull	r2, r1, r7, r3
    13cc:	e1a02fc3 	asr	r2, r3, #31
    13d0:	e06224c1 	rsb	r2, r2, r1, asr #9
    13d4:	e3a01d19 	mov	r1, #1600	; 0x640
    13d8:	e0633291 	mls	r3, r1, r2, r3
    13dc:	e3530000 	cmp	r3, #0
    13e0:	1affffe1 	bne	136c <main+0xd4>
    13e4:	e1a0000a 	mov	r0, r10
    13e8:	e24b1028 	sub	r1, r11, #40	; 0x28
    13ec:	e51b2030 	ldr	r2, [r11, #-48]	; 0xffffffd0
    13f0:	e1a03006 	mov	r3, r6
    13f4:	ebfffbfa 	bl	3e4 <render>
    13f8:	eaffffdb 	b	136c <main+0xd4>

000013fc <__aeabi_idiv>:
    13fc:	e3510000 	cmp	r1, #0
    1400:	0a000043 	beq	1514 <.divsi3_skip_div0_test+0x110>

00001404 <.divsi3_skip_div0_test>:
    1404:	e020c001 	eor	r12, r0, r1
    1408:	42611000 	rsbmi	r1, r1, #0
    140c:	e2512001 	subs	r2, r1, #1
    1410:	0a000027 	beq	14b4 <.divsi3_skip_div0_test+0xb0>
    1414:	e1b03000 	movs	r3, r0
    1418:	42603000 	rsbmi	r3, r0, #0
    141c:	e1530001 	cmp	r3, r1
    1420:	9a000026 	bls	14c0 <.divsi3_skip_div0_test+0xbc>
    1424:	e1110002 	tst	r1, r2
    1428:	0a000028 	beq	14d0 <.divsi3_skip_div0_test+0xcc>
    142c:	e311020e 	tst	r1, #-536870912	; 0xe0000000
    1430:	01a01181 	lsleq	r1, r1, #3
    1434:	03a02008 	moveq	r2, #8
    1438:	13a02001 	movne	r2, #1
    143c:	e3510201 	cmp	r1, #268435456	; 0x10000000
    1440:	31510003 	cmpcc	r1, r3
    1444:	31a01201 	lslcc	r1, r1, #4
    1448:	31a02202 	lslcc	r2, r2, #4
    144c:	3afffffa 	bcc	143c <.divsi3_skip_div0_test+0x38>
    1450:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    1454:	31510003 	cmpcc	r1, r3
    1458:	31a01081 	lslcc	r1, r1, #1
    145c:	31a02082 	lslcc	r2, r2, #1
    1460:	3afffffa 	bcc	1450 <.divsi3_skip_div0_test+0x4c>
    1464:	e3a00000 	mov	r0, #0
    1468:	e1530001 	cmp	r3, r1
    146c:	20433001 	subcs	r3, r3, r1
    1470:	21800002 	orrcs	r0, r0, r2
    1474:	e15300a1 	cmp	r3, r1, lsr #1
    1478:	204330a1 	subcs	r3, r3, r1, lsr #1
    147c:	218000a2 	orrcs	r0, r0, r2, lsr #1
    1480:	e1530121 	cmp	r3, r1, lsr #2
    1484:	20433121 	subcs	r3, r3, r1, lsr #2
    1488:	21800122 	orrcs	r0, r0, r2, lsr #2
    148c:	e15301a1 	cmp	r3, r1, lsr #3
    1490:	204331a1 	subcs	r3, r3, r1, lsr #3
    1494:	218001a2 	orrcs	r0, r0, r2, lsr #3
    1498:	e3530000 	cmp	r3, #0
    149c:	11b02222 	lsrsne	r2, r2, #4
    14a0:	11a01221 	lsrne	r1, r1, #4
    14a4:	1affffef 	bne	1468 <.divsi3_skip_div0_test+0x64>
    14a8:	e35c0000 	cmp	r12, #0
    14ac:	42600000 	rsbmi	r0, r0, #0
    14b0:	e12fff1e 	bx	lr
    14b4:	e13c0000 	teq	r12, r0
    14b8:	42600000 	rsbmi	r0, r0, #0
    14bc:	e12fff1e 	bx	lr
    14c0:	33a00000 	movcc	r0, #0
    14c4:	01a00fcc 	asreq	r0, r12, #31
    14c8:	03800001 	orreq	r0, r0, #1
    14cc:	e12fff1e 	bx	lr
    14d0:	e3510801 	cmp	r1, #65536	; 0x10000
    14d4:	21a01821 	lsrcs	r1, r1, #16
    14d8:	23a02010 	movcs	r2, #16
    14dc:	33a02000 	movcc	r2, #0
    14e0:	e3510c01 	cmp	r1, #256	; 0x100
    14e4:	21a01421 	lsrcs	r1, r1, #8
    14e8:	22822008 	addcs	r2, r2, #8
    14ec:	e3510010 	cmp	r1, #16
    14f0:	21a01221 	lsrcs	r1, r1, #4
    14f4:	22822004 	addcs	r2, r2, #4
    14f8:	e3510004 	cmp	r1, #4
    14fc:	82822003 	addhi	r2, r2, #3
    1500:	908220a1 	addls	r2, r2, r1, lsr #1
    1504:	e35c0000 	cmp	r12, #0
    1508:	e1a00233 	lsr	r0, r3, r2
    150c:	42600000 	rsbmi	r0, r0, #0
    1510:	e12fff1e 	bx	lr
    1514:	e3500000 	cmp	r0, #0
    1518:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
    151c:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
    1520:	ea000007 	b	1544 <__aeabi_idiv0>

00001524 <__aeabi_idivmod>:
    1524:	e3510000 	cmp	r1, #0
    1528:	0afffff9 	beq	1514 <.divsi3_skip_div0_test+0x110>
    152c:	e92d4003 	push	{r0, r1, lr}
    1530:	ebffffb3 	bl	1404 <.divsi3_skip_div0_test>
    1534:	e8bd4006 	pop	{r1, r2, lr}
    1538:	e0030092 	mul	r3, r2, r0
    153c:	e0411003 	sub	r1, r1, r3
    1540:	e12fff1e 	bx	lr

00001544 <__aeabi_idiv0>:
    1544:	e12fff1e 	bx	lr

00001548 <__aeabi_drsub>:
    1548:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
    154c:	ea000000 	b	1554 <__adddf3>

00001550 <__aeabi_dsub>:
    1550:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

00001554 <__adddf3>:
    1554:	e92d4030 	push	{r4, r5, lr}
    1558:	e1a04081 	lsl	r4, r1, #1
    155c:	e1a05083 	lsl	r5, r3, #1
    1560:	e1340005 	teq	r4, r5
    1564:	01300002 	teqeq	r0, r2
    1568:	1194c000 	orrsne	r12, r4, r0
    156c:	1195c002 	orrsne	r12, r5, r2
    1570:	11f0cac4 	mvnsne	r12, r4, asr #21
    1574:	11f0cac5 	mvnsne	r12, r5, asr #21
    1578:	0a00008c 	beq	17b0 <__adddf3+0x25c>
    157c:	e1a04aa4 	lsr	r4, r4, #21
    1580:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
    1584:	b2655000 	rsblt	r5, r5, #0
    1588:	da000006 	ble	15a8 <__adddf3+0x54>
    158c:	e0844005 	add	r4, r4, r5
    1590:	e0202002 	eor	r2, r0, r2
    1594:	e0213003 	eor	r3, r1, r3
    1598:	e0220000 	eor	r0, r2, r0
    159c:	e0231001 	eor	r1, r3, r1
    15a0:	e0202002 	eor	r2, r0, r2
    15a4:	e0213003 	eor	r3, r1, r3
    15a8:	e3550036 	cmp	r5, #54	; 0x36
    15ac:	88bd4030 	pophi	{r4, r5, lr}
    15b0:	812fff1e 	bxhi	lr
    15b4:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    15b8:	e1a01601 	lsl	r1, r1, #12
    15bc:	e3a0c601 	mov	r12, #1048576	; 0x100000
    15c0:	e18c1621 	orr	r1, r12, r1, lsr #12
    15c4:	0a000001 	beq	15d0 <__adddf3+0x7c>
    15c8:	e2700000 	rsbs	r0, r0, #0
    15cc:	e2e11000 	rsc	r1, r1, #0
    15d0:	e3130102 	tst	r3, #-2147483648	; 0x80000000
    15d4:	e1a03603 	lsl	r3, r3, #12
    15d8:	e18c3623 	orr	r3, r12, r3, lsr #12
    15dc:	0a000001 	beq	15e8 <__adddf3+0x94>
    15e0:	e2722000 	rsbs	r2, r2, #0
    15e4:	e2e33000 	rsc	r3, r3, #0
    15e8:	e1340005 	teq	r4, r5
    15ec:	0a000069 	beq	1798 <__adddf3+0x244>
    15f0:	e2444001 	sub	r4, r4, #1
    15f4:	e275e020 	rsbs	lr, r5, #32
    15f8:	ba000005 	blt	1614 <__adddf3+0xc0>
    15fc:	e1a0ce12 	lsl	r12, r2, lr
    1600:	e0900532 	adds	r0, r0, r2, lsr r5
    1604:	e2a11000 	adc	r1, r1, #0
    1608:	e0900e13 	adds	r0, r0, r3, lsl lr
    160c:	e0b11553 	adcs	r1, r1, r3, asr r5
    1610:	ea000006 	b	1630 <__adddf3+0xdc>
    1614:	e2455020 	sub	r5, r5, #32
    1618:	e28ee020 	add	lr, lr, #32
    161c:	e3520001 	cmp	r2, #1
    1620:	e1a0ce13 	lsl	r12, r3, lr
    1624:	238cc002 	orrcs	r12, r12, #2
    1628:	e0900553 	adds	r0, r0, r3, asr r5
    162c:	e0b11fc3 	adcs	r1, r1, r3, asr #31
    1630:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1634:	5a000002 	bpl	1644 <__adddf3+0xf0>
    1638:	e27cc000 	rsbs	r12, r12, #0
    163c:	e2f00000 	rscs	r0, r0, #0
    1640:	e2e11000 	rsc	r1, r1, #0
    1644:	e3510601 	cmp	r1, #1048576	; 0x100000
    1648:	3a00000f 	bcc	168c <__adddf3+0x138>
    164c:	e3510602 	cmp	r1, #2097152	; 0x200000
    1650:	3a000006 	bcc	1670 <__adddf3+0x11c>
    1654:	e1b010a1 	lsrs	r1, r1, #1
    1658:	e1b00060 	rrxs	r0, r0
    165c:	e1a0c06c 	rrx	r12, r12
    1660:	e2844001 	add	r4, r4, #1
    1664:	e1a02a84 	lsl	r2, r4, #21
    1668:	e3720501 	cmn	r2, #4194304	; 0x400000
    166c:	2a00006b 	bcs	1820 <__adddf3+0x2cc>
    1670:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    1674:	01b0c0a0 	lsrseq	r12, r0, #1
    1678:	e2b00000 	adcs	r0, r0, #0
    167c:	e0a11a04 	adc	r1, r1, r4, lsl #20
    1680:	e1811005 	orr	r1, r1, r5
    1684:	e8bd4030 	pop	{r4, r5, lr}
    1688:	e12fff1e 	bx	lr
    168c:	e1b0c08c 	lsls	r12, r12, #1
    1690:	e0b00000 	adcs	r0, r0, r0
    1694:	e0a11001 	adc	r1, r1, r1
    1698:	e3110601 	tst	r1, #1048576	; 0x100000
    169c:	e2444001 	sub	r4, r4, #1
    16a0:	1afffff2 	bne	1670 <__adddf3+0x11c>
    16a4:	e3310000 	teq	r1, #0
    16a8:	13a03014 	movne	r3, #20
    16ac:	03a03034 	moveq	r3, #52	; 0x34
    16b0:	01a01000 	moveq	r1, r0
    16b4:	03a00000 	moveq	r0, #0
    16b8:	e1a02001 	mov	r2, r1
    16bc:	e3520801 	cmp	r2, #65536	; 0x10000
    16c0:	21a02822 	lsrcs	r2, r2, #16
    16c4:	22433010 	subcs	r3, r3, #16
    16c8:	e3520c01 	cmp	r2, #256	; 0x100
    16cc:	21a02422 	lsrcs	r2, r2, #8
    16d0:	22433008 	subcs	r3, r3, #8
    16d4:	e3520010 	cmp	r2, #16
    16d8:	21a02222 	lsrcs	r2, r2, #4
    16dc:	22433004 	subcs	r3, r3, #4
    16e0:	e3520004 	cmp	r2, #4
    16e4:	22433002 	subcs	r3, r3, #2
    16e8:	304330a2 	subcc	r3, r3, r2, lsr #1
    16ec:	e04331a2 	sub	r3, r3, r2, lsr #3
    16f0:	e2532020 	subs	r2, r3, #32
    16f4:	aa000007 	bge	1718 <__adddf3+0x1c4>
    16f8:	e292200c 	adds	r2, r2, #12
    16fc:	da000004 	ble	1714 <__adddf3+0x1c0>
    1700:	e282c014 	add	r12, r2, #20
    1704:	e262200c 	rsb	r2, r2, #12
    1708:	e1a00c11 	lsl	r0, r1, r12
    170c:	e1a01231 	lsr	r1, r1, r2
    1710:	ea000004 	b	1728 <__adddf3+0x1d4>
    1714:	e2822014 	add	r2, r2, #20
    1718:	d262c020 	rsble	r12, r2, #32
    171c:	e1a01211 	lsl	r1, r1, r2
    1720:	d1811c30 	orrle	r1, r1, r0, lsr r12
    1724:	d1a00210 	lslle	r0, r0, r2
    1728:	e0544003 	subs	r4, r4, r3
    172c:	a0811a04 	addge	r1, r1, r4, lsl #20
    1730:	a1811005 	orrge	r1, r1, r5
    1734:	a8bd4030 	popge	{r4, r5, lr}
    1738:	a12fff1e 	bxge	lr
    173c:	e1e04004 	mvn	r4, r4
    1740:	e254401f 	subs	r4, r4, #31
    1744:	aa00000f 	bge	1788 <__adddf3+0x234>
    1748:	e294400c 	adds	r4, r4, #12
    174c:	ca000006 	bgt	176c <__adddf3+0x218>
    1750:	e2844014 	add	r4, r4, #20
    1754:	e2642020 	rsb	r2, r4, #32
    1758:	e1a00430 	lsr	r0, r0, r4
    175c:	e1800211 	orr	r0, r0, r1, lsl r2
    1760:	e1851431 	orr	r1, r5, r1, lsr r4
    1764:	e8bd4030 	pop	{r4, r5, lr}
    1768:	e12fff1e 	bx	lr
    176c:	e264400c 	rsb	r4, r4, #12
    1770:	e2642020 	rsb	r2, r4, #32
    1774:	e1a00230 	lsr	r0, r0, r2
    1778:	e1800411 	orr	r0, r0, r1, lsl r4
    177c:	e1a01005 	mov	r1, r5
    1780:	e8bd4030 	pop	{r4, r5, lr}
    1784:	e12fff1e 	bx	lr
    1788:	e1a00431 	lsr	r0, r1, r4
    178c:	e1a01005 	mov	r1, r5
    1790:	e8bd4030 	pop	{r4, r5, lr}
    1794:	e12fff1e 	bx	lr
    1798:	e3340000 	teq	r4, #0
    179c:	e2233601 	eor	r3, r3, #1048576	; 0x100000
    17a0:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
    17a4:	02844001 	addeq	r4, r4, #1
    17a8:	12455001 	subne	r5, r5, #1
    17ac:	eaffff8f 	b	15f0 <__adddf3+0x9c>
    17b0:	e1f0cac4 	mvns	r12, r4, asr #21
    17b4:	11f0cac5 	mvnsne	r12, r5, asr #21
    17b8:	0a00001d 	beq	1834 <__adddf3+0x2e0>
    17bc:	e1340005 	teq	r4, r5
    17c0:	01300002 	teqeq	r0, r2
    17c4:	0a000004 	beq	17dc <__adddf3+0x288>
    17c8:	e194c000 	orrs	r12, r4, r0
    17cc:	01a01003 	moveq	r1, r3
    17d0:	01a00002 	moveq	r0, r2
    17d4:	e8bd4030 	pop	{r4, r5, lr}
    17d8:	e12fff1e 	bx	lr
    17dc:	e1310003 	teq	r1, r3
    17e0:	13a01000 	movne	r1, #0
    17e4:	13a00000 	movne	r0, #0
    17e8:	18bd4030 	popne	{r4, r5, lr}
    17ec:	112fff1e 	bxne	lr
    17f0:	e1b0caa4 	lsrs	r12, r4, #21
    17f4:	1a000004 	bne	180c <__adddf3+0x2b8>
    17f8:	e1b00080 	lsls	r0, r0, #1
    17fc:	e0b11001 	adcs	r1, r1, r1
    1800:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
    1804:	e8bd4030 	pop	{r4, r5, lr}
    1808:	e12fff1e 	bx	lr
    180c:	e2944501 	adds	r4, r4, #4194304	; 0x400000
    1810:	32811601 	addcc	r1, r1, #1048576	; 0x100000
    1814:	38bd4030 	popcc	{r4, r5, lr}
    1818:	312fff1e 	bxcc	lr
    181c:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1820:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
    1824:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    1828:	e3a00000 	mov	r0, #0
    182c:	e8bd4030 	pop	{r4, r5, lr}
    1830:	e12fff1e 	bx	lr
    1834:	e1f0cac4 	mvns	r12, r4, asr #21
    1838:	11a01003 	movne	r1, r3
    183c:	11a00002 	movne	r0, r2
    1840:	01f0cac5 	mvnseq	r12, r5, asr #21
    1844:	11a03001 	movne	r3, r1
    1848:	11a02000 	movne	r2, r0
    184c:	e1904601 	orrs	r4, r0, r1, lsl #12
    1850:	01925603 	orrseq	r5, r2, r3, lsl #12
    1854:	01310003 	teqeq	r1, r3
    1858:	13811702 	orrne	r1, r1, #524288	; 0x80000
    185c:	e8bd4030 	pop	{r4, r5, lr}
    1860:	e12fff1e 	bx	lr

00001864 <__aeabi_ui2d>:
    1864:	e3300000 	teq	r0, #0
    1868:	03a01000 	moveq	r1, #0
    186c:	012fff1e 	bxeq	lr
    1870:	e92d4030 	push	{r4, r5, lr}
    1874:	e3a04b01 	mov	r4, #1024	; 0x400
    1878:	e2844032 	add	r4, r4, #50	; 0x32
    187c:	e3a05000 	mov	r5, #0
    1880:	e3a01000 	mov	r1, #0
    1884:	eaffff86 	b	16a4 <__adddf3+0x150>

00001888 <__aeabi_i2d>:
    1888:	e3300000 	teq	r0, #0
    188c:	03a01000 	moveq	r1, #0
    1890:	012fff1e 	bxeq	lr
    1894:	e92d4030 	push	{r4, r5, lr}
    1898:	e3a04b01 	mov	r4, #1024	; 0x400
    189c:	e2844032 	add	r4, r4, #50	; 0x32
    18a0:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
    18a4:	42600000 	rsbmi	r0, r0, #0
    18a8:	e3a01000 	mov	r1, #0
    18ac:	eaffff7c 	b	16a4 <__adddf3+0x150>

000018b0 <__aeabi_f2d>:
    18b0:	e1b02080 	lsls	r2, r0, #1
    18b4:	e1a011c2 	asr	r1, r2, #3
    18b8:	e1a01061 	rrx	r1, r1
    18bc:	e1a00e02 	lsl	r0, r2, #28
    18c0:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
    18c4:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    18c8:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
    18cc:	112fff1e 	bxne	lr
    18d0:	e3320000 	teq	r2, #0
    18d4:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    18d8:	012fff1e 	bxeq	lr
    18dc:	e92d4030 	push	{r4, r5, lr}
    18e0:	e3a04d0e 	mov	r4, #896	; 0x380
    18e4:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    18e8:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    18ec:	eaffff6c 	b	16a4 <__adddf3+0x150>

000018f0 <__aeabi_ul2d>:
    18f0:	e1902001 	orrs	r2, r0, r1
    18f4:	012fff1e 	bxeq	lr
    18f8:	e92d4030 	push	{r4, r5, lr}
    18fc:	e3a05000 	mov	r5, #0
    1900:	ea000006 	b	1920 <__aeabi_l2d+0x1c>

00001904 <__aeabi_l2d>:
    1904:	e1902001 	orrs	r2, r0, r1
    1908:	012fff1e 	bxeq	lr
    190c:	e92d4030 	push	{r4, r5, lr}
    1910:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
    1914:	5a000001 	bpl	1920 <__aeabi_l2d+0x1c>
    1918:	e2700000 	rsbs	r0, r0, #0
    191c:	e2e11000 	rsc	r1, r1, #0
    1920:	e3a04b01 	mov	r4, #1024	; 0x400
    1924:	e2844032 	add	r4, r4, #50	; 0x32
    1928:	e1b0cb21 	lsrs	r12, r1, #22
    192c:	0affff44 	beq	1644 <__adddf3+0xf0>
    1930:	e3a02003 	mov	r2, #3
    1934:	e1b0c1ac 	lsrs	r12, r12, #3
    1938:	12822003 	addne	r2, r2, #3
    193c:	e1b0c1ac 	lsrs	r12, r12, #3
    1940:	12822003 	addne	r2, r2, #3
    1944:	e08221ac 	add	r2, r2, r12, lsr #3
    1948:	e2623020 	rsb	r3, r2, #32
    194c:	e1a0c310 	lsl	r12, r0, r3
    1950:	e1a00230 	lsr	r0, r0, r2
    1954:	e1800311 	orr	r0, r0, r1, lsl r3
    1958:	e1a01231 	lsr	r1, r1, r2
    195c:	e0844002 	add	r4, r4, r2
    1960:	eaffff37 	b	1644 <__adddf3+0xf0>

00001964 <__aeabi_dmul>:
    1964:	e92d4070 	push	{r4, r5, r6, lr}
    1968:	e3a0c0ff 	mov	r12, #255	; 0xff
    196c:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    1970:	e01c4a21 	ands	r4, r12, r1, lsr #20
    1974:	101c5a23 	andsne	r5, r12, r3, lsr #20
    1978:	1134000c 	teqne	r4, r12
    197c:	1135000c 	teqne	r5, r12
    1980:	0b000075 	bleq	1b5c <__aeabi_dmul+0x1f8>
    1984:	e0844005 	add	r4, r4, r5
    1988:	e0216003 	eor	r6, r1, r3
    198c:	e1c11a8c 	bic	r1, r1, r12, lsl #21
    1990:	e1c33a8c 	bic	r3, r3, r12, lsl #21
    1994:	e1905601 	orrs	r5, r0, r1, lsl #12
    1998:	11925603 	orrsne	r5, r2, r3, lsl #12
    199c:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    19a0:	e3833601 	orr	r3, r3, #1048576	; 0x100000
    19a4:	0a00001d 	beq	1a20 <__aeabi_dmul+0xbc>
    19a8:	e08ec290 	umull	r12, lr, r0, r2
    19ac:	e3a05000 	mov	r5, #0
    19b0:	e0a5e291 	umlal	lr, r5, r1, r2
    19b4:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
    19b8:	e0a5e390 	umlal	lr, r5, r0, r3
    19bc:	e3a06000 	mov	r6, #0
    19c0:	e0a65391 	umlal	r5, r6, r1, r3
    19c4:	e33c0000 	teq	r12, #0
    19c8:	138ee001 	orrne	lr, lr, #1
    19cc:	e24440ff 	sub	r4, r4, #255	; 0xff
    19d0:	e3560c02 	cmp	r6, #512	; 0x200
    19d4:	e2c44c03 	sbc	r4, r4, #768	; 0x300
    19d8:	2a000002 	bcs	19e8 <__aeabi_dmul+0x84>
    19dc:	e1b0e08e 	lsls	lr, lr, #1
    19e0:	e0b55005 	adcs	r5, r5, r5
    19e4:	e0a66006 	adc	r6, r6, r6
    19e8:	e1821586 	orr	r1, r2, r6, lsl #11
    19ec:	e1811aa5 	orr	r1, r1, r5, lsr #21
    19f0:	e1a00585 	lsl	r0, r5, #11
    19f4:	e1800aae 	orr	r0, r0, lr, lsr #21
    19f8:	e1a0e58e 	lsl	lr, lr, #11
    19fc:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    1a00:	835c0c07 	cmphi	r12, #1792	; 0x700
    1a04:	8a000011 	bhi	1a50 <__aeabi_dmul+0xec>
    1a08:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
    1a0c:	01b0e0a0 	lsrseq	lr, r0, #1
    1a10:	e2b00000 	adcs	r0, r0, #0
    1a14:	e0a11a04 	adc	r1, r1, r4, lsl #20
    1a18:	e8bd4070 	pop	{r4, r5, r6, lr}
    1a1c:	e12fff1e 	bx	lr
    1a20:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
    1a24:	e1861001 	orr	r1, r6, r1
    1a28:	e1800002 	orr	r0, r0, r2
    1a2c:	e0211003 	eor	r1, r1, r3
    1a30:	e05440ac 	subs	r4, r4, r12, lsr #1
    1a34:	c074500c 	rsbsgt	r5, r4, r12
    1a38:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    1a3c:	c8bd4070 	popgt	{r4, r5, r6, lr}
    1a40:	c12fff1e 	bxgt	lr
    1a44:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    1a48:	e3a0e000 	mov	lr, #0
    1a4c:	e2544001 	subs	r4, r4, #1
    1a50:	ca00005d 	bgt	1bcc <__aeabi_dmul+0x268>
    1a54:	e3740036 	cmn	r4, #54	; 0x36
    1a58:	d3a00000 	movle	r0, #0
    1a5c:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
    1a60:	d8bd4070 	pople	{r4, r5, r6, lr}
    1a64:	d12fff1e 	bxle	lr
    1a68:	e2644000 	rsb	r4, r4, #0
    1a6c:	e2544020 	subs	r4, r4, #32
    1a70:	aa00001a 	bge	1ae0 <__aeabi_dmul+0x17c>
    1a74:	e294400c 	adds	r4, r4, #12
    1a78:	ca00000c 	bgt	1ab0 <__aeabi_dmul+0x14c>
    1a7c:	e2844014 	add	r4, r4, #20
    1a80:	e2645020 	rsb	r5, r4, #32
    1a84:	e1a03510 	lsl	r3, r0, r5
    1a88:	e1a00430 	lsr	r0, r0, r4
    1a8c:	e1800511 	orr	r0, r0, r1, lsl r5
    1a90:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
    1a94:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    1a98:	e0900fa3 	adds	r0, r0, r3, lsr #31
    1a9c:	e0a21431 	adc	r1, r2, r1, lsr r4
    1aa0:	e19ee083 	orrs	lr, lr, r3, lsl #1
    1aa4:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    1aa8:	e8bd4070 	pop	{r4, r5, r6, lr}
    1aac:	e12fff1e 	bx	lr
    1ab0:	e264400c 	rsb	r4, r4, #12
    1ab4:	e2645020 	rsb	r5, r4, #32
    1ab8:	e1a03410 	lsl	r3, r0, r4
    1abc:	e1a00530 	lsr	r0, r0, r5
    1ac0:	e1800411 	orr	r0, r0, r1, lsl r4
    1ac4:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1ac8:	e0900fa3 	adds	r0, r0, r3, lsr #31
    1acc:	e2a11000 	adc	r1, r1, #0
    1ad0:	e19ee083 	orrs	lr, lr, r3, lsl #1
    1ad4:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    1ad8:	e8bd4070 	pop	{r4, r5, r6, lr}
    1adc:	e12fff1e 	bx	lr
    1ae0:	e2645020 	rsb	r5, r4, #32
    1ae4:	e18ee510 	orr	lr, lr, r0, lsl r5
    1ae8:	e1a03430 	lsr	r3, r0, r4
    1aec:	e1833511 	orr	r3, r3, r1, lsl r5
    1af0:	e1a00431 	lsr	r0, r1, r4
    1af4:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1af8:	e1c00431 	bic	r0, r0, r1, lsr r4
    1afc:	e0800fa3 	add	r0, r0, r3, lsr #31
    1b00:	e19ee083 	orrs	lr, lr, r3, lsl #1
    1b04:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    1b08:	e8bd4070 	pop	{r4, r5, r6, lr}
    1b0c:	e12fff1e 	bx	lr
    1b10:	e3340000 	teq	r4, #0
    1b14:	1a000008 	bne	1b3c <__aeabi_dmul+0x1d8>
    1b18:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
    1b1c:	e1b00080 	lsls	r0, r0, #1
    1b20:	e0a11001 	adc	r1, r1, r1
    1b24:	e3110601 	tst	r1, #1048576	; 0x100000
    1b28:	02444001 	subeq	r4, r4, #1
    1b2c:	0afffffa 	beq	1b1c <__aeabi_dmul+0x1b8>
    1b30:	e1811006 	orr	r1, r1, r6
    1b34:	e3350000 	teq	r5, #0
    1b38:	112fff1e 	bxne	lr
    1b3c:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
    1b40:	e1b02082 	lsls	r2, r2, #1
    1b44:	e0a33003 	adc	r3, r3, r3
    1b48:	e3130601 	tst	r3, #1048576	; 0x100000
    1b4c:	02455001 	subeq	r5, r5, #1
    1b50:	0afffffa 	beq	1b40 <__aeabi_dmul+0x1dc>
    1b54:	e1833006 	orr	r3, r3, r6
    1b58:	e12fff1e 	bx	lr
    1b5c:	e134000c 	teq	r4, r12
    1b60:	e00c5a23 	and	r5, r12, r3, lsr #20
    1b64:	1135000c 	teqne	r5, r12
    1b68:	0a000007 	beq	1b8c <__aeabi_dmul+0x228>
    1b6c:	e1906081 	orrs	r6, r0, r1, lsl #1
    1b70:	11926083 	orrsne	r6, r2, r3, lsl #1
    1b74:	1affffe5 	bne	1b10 <__aeabi_dmul+0x1ac>
    1b78:	e0211003 	eor	r1, r1, r3
    1b7c:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1b80:	e3a00000 	mov	r0, #0
    1b84:	e8bd4070 	pop	{r4, r5, r6, lr}
    1b88:	e12fff1e 	bx	lr
    1b8c:	e1906081 	orrs	r6, r0, r1, lsl #1
    1b90:	01a00002 	moveq	r0, r2
    1b94:	01a01003 	moveq	r1, r3
    1b98:	11926083 	orrsne	r6, r2, r3, lsl #1
    1b9c:	0a000010 	beq	1be4 <__aeabi_dmul+0x280>
    1ba0:	e134000c 	teq	r4, r12
    1ba4:	1a000001 	bne	1bb0 <__aeabi_dmul+0x24c>
    1ba8:	e1906601 	orrs	r6, r0, r1, lsl #12
    1bac:	1a00000c 	bne	1be4 <__aeabi_dmul+0x280>
    1bb0:	e135000c 	teq	r5, r12
    1bb4:	1a000003 	bne	1bc8 <__aeabi_dmul+0x264>
    1bb8:	e1926603 	orrs	r6, r2, r3, lsl #12
    1bbc:	11a00002 	movne	r0, r2
    1bc0:	11a01003 	movne	r1, r3
    1bc4:	1a000006 	bne	1be4 <__aeabi_dmul+0x280>
    1bc8:	e0211003 	eor	r1, r1, r3
    1bcc:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1bd0:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    1bd4:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    1bd8:	e3a00000 	mov	r0, #0
    1bdc:	e8bd4070 	pop	{r4, r5, r6, lr}
    1be0:	e12fff1e 	bx	lr
    1be4:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    1be8:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
    1bec:	e8bd4070 	pop	{r4, r5, r6, lr}
    1bf0:	e12fff1e 	bx	lr

00001bf4 <__aeabi_ddiv>:
    1bf4:	e92d4070 	push	{r4, r5, r6, lr}
    1bf8:	e3a0c0ff 	mov	r12, #255	; 0xff
    1bfc:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    1c00:	e01c4a21 	ands	r4, r12, r1, lsr #20
    1c04:	101c5a23 	andsne	r5, r12, r3, lsr #20
    1c08:	1134000c 	teqne	r4, r12
    1c0c:	1135000c 	teqne	r5, r12
    1c10:	0b00005e 	bleq	1d90 <__aeabi_ddiv+0x19c>
    1c14:	e0444005 	sub	r4, r4, r5
    1c18:	e021e003 	eor	lr, r1, r3
    1c1c:	e1925603 	orrs	r5, r2, r3, lsl #12
    1c20:	e1a01601 	lsl	r1, r1, #12
    1c24:	0a00004c 	beq	1d5c <__aeabi_ddiv+0x168>
    1c28:	e1a03603 	lsl	r3, r3, #12
    1c2c:	e3a05201 	mov	r5, #268435456	; 0x10000000
    1c30:	e1853223 	orr	r3, r5, r3, lsr #4
    1c34:	e1833c22 	orr	r3, r3, r2, lsr #24
    1c38:	e1a02402 	lsl	r2, r2, #8
    1c3c:	e1855221 	orr	r5, r5, r1, lsr #4
    1c40:	e1855c20 	orr	r5, r5, r0, lsr #24
    1c44:	e1a06400 	lsl	r6, r0, #8
    1c48:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
    1c4c:	e1550003 	cmp	r5, r3
    1c50:	01560002 	cmpeq	r6, r2
    1c54:	e2a440fd 	adc	r4, r4, #253	; 0xfd
    1c58:	e2844c03 	add	r4, r4, #768	; 0x300
    1c5c:	2a000001 	bcs	1c68 <__aeabi_ddiv+0x74>
    1c60:	e1b030a3 	lsrs	r3, r3, #1
    1c64:	e1a02062 	rrx	r2, r2
    1c68:	e0566002 	subs	r6, r6, r2
    1c6c:	e0c55003 	sbc	r5, r5, r3
    1c70:	e1b030a3 	lsrs	r3, r3, #1
    1c74:	e1a02062 	rrx	r2, r2
    1c78:	e3a00601 	mov	r0, #1048576	; 0x100000
    1c7c:	e3a0c702 	mov	r12, #524288	; 0x80000
    1c80:	e056e002 	subs	lr, r6, r2
    1c84:	e0d5e003 	sbcs	lr, r5, r3
    1c88:	20466002 	subcs	r6, r6, r2
    1c8c:	21a0500e 	movcs	r5, lr
    1c90:	2180000c 	orrcs	r0, r0, r12
    1c94:	e1b030a3 	lsrs	r3, r3, #1
    1c98:	e1a02062 	rrx	r2, r2
    1c9c:	e056e002 	subs	lr, r6, r2
    1ca0:	e0d5e003 	sbcs	lr, r5, r3
    1ca4:	20466002 	subcs	r6, r6, r2
    1ca8:	21a0500e 	movcs	r5, lr
    1cac:	218000ac 	orrcs	r0, r0, r12, lsr #1
    1cb0:	e1b030a3 	lsrs	r3, r3, #1
    1cb4:	e1a02062 	rrx	r2, r2
    1cb8:	e056e002 	subs	lr, r6, r2
    1cbc:	e0d5e003 	sbcs	lr, r5, r3
    1cc0:	20466002 	subcs	r6, r6, r2
    1cc4:	21a0500e 	movcs	r5, lr
    1cc8:	2180012c 	orrcs	r0, r0, r12, lsr #2
    1ccc:	e1b030a3 	lsrs	r3, r3, #1
    1cd0:	e1a02062 	rrx	r2, r2
    1cd4:	e056e002 	subs	lr, r6, r2
    1cd8:	e0d5e003 	sbcs	lr, r5, r3
    1cdc:	20466002 	subcs	r6, r6, r2
    1ce0:	21a0500e 	movcs	r5, lr
    1ce4:	218001ac 	orrcs	r0, r0, r12, lsr #3
    1ce8:	e195e006 	orrs	lr, r5, r6
    1cec:	0a00000d 	beq	1d28 <__aeabi_ddiv+0x134>
    1cf0:	e1a05205 	lsl	r5, r5, #4
    1cf4:	e1855e26 	orr	r5, r5, r6, lsr #28
    1cf8:	e1a06206 	lsl	r6, r6, #4
    1cfc:	e1a03183 	lsl	r3, r3, #3
    1d00:	e1833ea2 	orr	r3, r3, r2, lsr #29
    1d04:	e1a02182 	lsl	r2, r2, #3
    1d08:	e1b0c22c 	lsrs	r12, r12, #4
    1d0c:	1affffdb 	bne	1c80 <__aeabi_ddiv+0x8c>
    1d10:	e3110601 	tst	r1, #1048576	; 0x100000
    1d14:	1a000006 	bne	1d34 <__aeabi_ddiv+0x140>
    1d18:	e1811000 	orr	r1, r1, r0
    1d1c:	e3a00000 	mov	r0, #0
    1d20:	e3a0c102 	mov	r12, #-2147483648	; 0x80000000
    1d24:	eaffffd5 	b	1c80 <__aeabi_ddiv+0x8c>
    1d28:	e3110601 	tst	r1, #1048576	; 0x100000
    1d2c:	01811000 	orreq	r1, r1, r0
    1d30:	03a00000 	moveq	r0, #0
    1d34:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    1d38:	835c0c07 	cmphi	r12, #1792	; 0x700
    1d3c:	8affff43 	bhi	1a50 <__aeabi_dmul+0xec>
    1d40:	e055c003 	subs	r12, r5, r3
    1d44:	0056c002 	subseq	r12, r6, r2
    1d48:	01b0c0a0 	lsrseq	r12, r0, #1
    1d4c:	e2b00000 	adcs	r0, r0, #0
    1d50:	e0a11a04 	adc	r1, r1, r4, lsl #20
    1d54:	e8bd4070 	pop	{r4, r5, r6, lr}
    1d58:	e12fff1e 	bx	lr
    1d5c:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
    1d60:	e18e1621 	orr	r1, lr, r1, lsr #12
    1d64:	e09440ac 	adds	r4, r4, r12, lsr #1
    1d68:	c074500c 	rsbsgt	r5, r4, r12
    1d6c:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    1d70:	c8bd4070 	popgt	{r4, r5, r6, lr}
    1d74:	c12fff1e 	bxgt	lr
    1d78:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    1d7c:	e3a0e000 	mov	lr, #0
    1d80:	e2544001 	subs	r4, r4, #1
    1d84:	eaffff31 	b	1a50 <__aeabi_dmul+0xec>
    1d88:	e185e006 	orr	lr, r5, r6
    1d8c:	eaffff2f 	b	1a50 <__aeabi_dmul+0xec>
    1d90:	e00c5a23 	and	r5, r12, r3, lsr #20
    1d94:	e134000c 	teq	r4, r12
    1d98:	0135000c 	teqeq	r5, r12
    1d9c:	0affff90 	beq	1be4 <__aeabi_dmul+0x280>
    1da0:	e134000c 	teq	r4, r12
    1da4:	1a000006 	bne	1dc4 <__aeabi_ddiv+0x1d0>
    1da8:	e1904601 	orrs	r4, r0, r1, lsl #12
    1dac:	1affff8c 	bne	1be4 <__aeabi_dmul+0x280>
    1db0:	e135000c 	teq	r5, r12
    1db4:	1affff83 	bne	1bc8 <__aeabi_dmul+0x264>
    1db8:	e1a00002 	mov	r0, r2
    1dbc:	e1a01003 	mov	r1, r3
    1dc0:	eaffff87 	b	1be4 <__aeabi_dmul+0x280>
    1dc4:	e135000c 	teq	r5, r12
    1dc8:	1a000004 	bne	1de0 <__aeabi_ddiv+0x1ec>
    1dcc:	e1925603 	orrs	r5, r2, r3, lsl #12
    1dd0:	0affff68 	beq	1b78 <__aeabi_dmul+0x214>
    1dd4:	e1a00002 	mov	r0, r2
    1dd8:	e1a01003 	mov	r1, r3
    1ddc:	eaffff80 	b	1be4 <__aeabi_dmul+0x280>
    1de0:	e1906081 	orrs	r6, r0, r1, lsl #1
    1de4:	11926083 	orrsne	r6, r2, r3, lsl #1
    1de8:	1affff48 	bne	1b10 <__aeabi_dmul+0x1ac>
    1dec:	e1904081 	orrs	r4, r0, r1, lsl #1
    1df0:	1affff74 	bne	1bc8 <__aeabi_dmul+0x264>
    1df4:	e1925083 	orrs	r5, r2, r3, lsl #1
    1df8:	1affff5e 	bne	1b78 <__aeabi_dmul+0x214>
    1dfc:	eaffff78 	b	1be4 <__aeabi_dmul+0x280>

00001e00 <__aeabi_d2iz>:
    1e00:	e1a02081 	lsl	r2, r1, #1
    1e04:	e2922602 	adds	r2, r2, #2097152	; 0x200000
    1e08:	2a00000c 	bcs	1e40 <__aeabi_d2iz+0x40>
    1e0c:	5a000009 	bpl	1e38 <__aeabi_d2iz+0x38>
    1e10:	e3e03e3e 	mvn	r3, #992	; 0x3e0
    1e14:	e0532ac2 	subs	r2, r3, r2, asr #21
    1e18:	9a00000a 	bls	1e48 <__aeabi_d2iz+0x48>
    1e1c:	e1a03581 	lsl	r3, r1, #11
    1e20:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    1e24:	e1833aa0 	orr	r3, r3, r0, lsr #21
    1e28:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    1e2c:	e1a00233 	lsr	r0, r3, r2
    1e30:	12600000 	rsbne	r0, r0, #0
    1e34:	e12fff1e 	bx	lr
    1e38:	e3a00000 	mov	r0, #0
    1e3c:	e12fff1e 	bx	lr
    1e40:	e1900601 	orrs	r0, r0, r1, lsl #12
    1e44:	1a000002 	bne	1e54 <__aeabi_d2iz+0x54>
    1e48:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
    1e4c:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    1e50:	e12fff1e 	bx	lr
    1e54:	e3a00000 	mov	r0, #0
    1e58:	e12fff1e 	bx	lr

00001e5c <atexit>:
    1e5c:	e1a01000 	mov	r1, r0
    1e60:	e3a00000 	mov	r0, #0
    1e64:	e92d4008 	push	{r3, lr}
    1e68:	e1a02000 	mov	r2, r0
    1e6c:	e1a03000 	mov	r3, r0
    1e70:	eb00000e 	bl	1eb0 <__register_exitproc>
    1e74:	e8bd4008 	pop	{r3, lr}
    1e78:	e12fff1e 	bx	lr

00001e7c <exit>:
    1e7c:	e92d4008 	push	{r3, lr}
    1e80:	e3a01000 	mov	r1, #0
    1e84:	e1a04000 	mov	r4, r0
    1e88:	eb000045 	bl	1fa4 <__call_exitprocs>
    1e8c:	e59f3018 	ldr	r3, [pc, #24]	; 1eac <exit+0x30>
    1e90:	e5930000 	ldr	r0, [r3]
    1e94:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    1e98:	e3530000 	cmp	r3, #0
    1e9c:	11a0e00f 	movne	lr, pc
    1ea0:	112fff13 	bxne	r3
    1ea4:	e1a00004 	mov	r0, r4
    1ea8:	eb0000c9 	bl	21d4 <_exit>
    1eac:	000022f8 	.word	0x000022f8

00001eb0 <__register_exitproc>:
    1eb0:	e59fc0e4 	ldr	r12, [pc, #228]	; 1f9c <__register_exitproc+0xec>
    1eb4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    1eb8:	e59c4000 	ldr	r4, [r12]
    1ebc:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    1ec0:	e35c0000 	cmp	r12, #0
    1ec4:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    1ec8:	e59c5004 	ldr	r5, [r12, #4]
    1ecc:	0584c148 	streq	r12, [r4, #328]	; 0x148
    1ed0:	e355001f 	cmp	r5, #31
    1ed4:	e24dd010 	sub	sp, sp, #16
    1ed8:	e1a06000 	mov	r6, r0
    1edc:	da000015 	ble	1f38 <__register_exitproc+0x88>
    1ee0:	e59f00b8 	ldr	r0, [pc, #184]	; 1fa0 <__register_exitproc+0xf0>
    1ee4:	e3500000 	cmp	r0, #0
    1ee8:	1a000001 	bne	1ef4 <__register_exitproc+0x44>
    1eec:	e3e00000 	mvn	r0, #0
    1ef0:	ea000018 	b	1f58 <__register_exitproc+0xa8>
    1ef4:	e3a00e19 	mov	r0, #400	; 0x190
    1ef8:	e58d100c 	str	r1, [sp, #12]
    1efc:	e58d2008 	str	r2, [sp, #8]
    1f00:	e58d3004 	str	r3, [sp, #4]
    1f04:	e320f000 	nop	{0}
    1f08:	e250c000 	subs	r12, r0, #0
    1f0c:	e59d100c 	ldr	r1, [sp, #12]
    1f10:	e59d2008 	ldr	r2, [sp, #8]
    1f14:	e59d3004 	ldr	r3, [sp, #4]
    1f18:	0afffff3 	beq	1eec <__register_exitproc+0x3c>
    1f1c:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    1f20:	e3a00000 	mov	r0, #0
    1f24:	e58c0004 	str	r0, [r12, #4]
    1f28:	e58c5000 	str	r5, [r12]
    1f2c:	e584c148 	str	r12, [r4, #328]	; 0x148
    1f30:	e58c0188 	str	r0, [r12, #392]	; 0x188
    1f34:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    1f38:	e3560000 	cmp	r6, #0
    1f3c:	e59c4004 	ldr	r4, [r12, #4]
    1f40:	1a000007 	bne	1f64 <__register_exitproc+0xb4>
    1f44:	e2843002 	add	r3, r4, #2
    1f48:	e2844001 	add	r4, r4, #1
    1f4c:	e78c1103 	str	r1, [r12, r3, lsl #2]
    1f50:	e58c4004 	str	r4, [r12, #4]
    1f54:	e3a00000 	mov	r0, #0
    1f58:	e28dd010 	add	sp, sp, #16
    1f5c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    1f60:	e12fff1e 	bx	lr
    1f64:	e3a00001 	mov	r0, #1
    1f68:	e1a00410 	lsl	r0, r0, r4
    1f6c:	e08c8104 	add	r8, r12, r4, lsl #2
    1f70:	e3560002 	cmp	r6, #2
    1f74:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    1f78:	e5883108 	str	r3, [r8, #264]	; 0x108
    1f7c:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    1f80:	e1877000 	orr	r7, r7, r0
    1f84:	01830000 	orreq	r0, r3, r0
    1f88:	e1a05008 	mov	r5, r8
    1f8c:	e5882088 	str	r2, [r8, #136]	; 0x88
    1f90:	e58c7188 	str	r7, [r12, #392]	; 0x188
    1f94:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    1f98:	eaffffe9 	b	1f44 <__register_exitproc+0x94>
    1f9c:	000022f8 	.word	0x000022f8
    1fa0:	00000000 	.word	0x00000000

00001fa4 <__call_exitprocs>:
    1fa4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1fa8:	e59f3168 	ldr	r3, [pc, #360]	; 2118 <__call_exitprocs+0x174>
    1fac:	e5933000 	ldr	r3, [r3]
    1fb0:	e24dd014 	sub	sp, sp, #20
    1fb4:	e58d3004 	str	r3, [sp, #4]
    1fb8:	e2833f52 	add	r3, r3, #328	; 0x148
    1fbc:	e58d0008 	str	r0, [sp, #8]
    1fc0:	e58d300c 	str	r3, [sp, #12]
    1fc4:	e1a07001 	mov	r7, r1
    1fc8:	e3a08001 	mov	r8, #1
    1fcc:	e59d3004 	ldr	r3, [sp, #4]
    1fd0:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    1fd4:	e3560000 	cmp	r6, #0
    1fd8:	e59db00c 	ldr	r11, [sp, #12]
    1fdc:	0a000033 	beq	20b0 <__call_exitprocs+0x10c>
    1fe0:	e5965004 	ldr	r5, [r6, #4]
    1fe4:	e2554001 	subs	r4, r5, #1
    1fe8:	5286a088 	addpl	r10, r6, #136	; 0x88
    1fec:	5285501f 	addpl	r5, r5, #31
    1ff0:	508a5105 	addpl	r5, r10, r5, lsl #2
    1ff4:	5a000007 	bpl	2018 <__call_exitprocs+0x74>
    1ff8:	ea000029 	b	20a4 <__call_exitprocs+0x100>
    1ffc:	e5953000 	ldr	r3, [r5]
    2000:	e1530007 	cmp	r3, r7
    2004:	0a000005 	beq	2020 <__call_exitprocs+0x7c>
    2008:	e2444001 	sub	r4, r4, #1
    200c:	e3740001 	cmn	r4, #1
    2010:	e2455004 	sub	r5, r5, #4
    2014:	0a000022 	beq	20a4 <__call_exitprocs+0x100>
    2018:	e3570000 	cmp	r7, #0
    201c:	1afffff6 	bne	1ffc <__call_exitprocs+0x58>
    2020:	e5963004 	ldr	r3, [r6, #4]
    2024:	e06a2005 	rsb	r2, r10, r5
    2028:	e2433001 	sub	r3, r3, #1
    202c:	e0862002 	add	r2, r6, r2
    2030:	e1530004 	cmp	r3, r4
    2034:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    2038:	13a01000 	movne	r1, #0
    203c:	05864004 	streq	r4, [r6, #4]
    2040:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    2044:	e3530000 	cmp	r3, #0
    2048:	0affffee 	beq	2008 <__call_exitprocs+0x64>
    204c:	e1a02418 	lsl	r2, r8, r4
    2050:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    2054:	e1120001 	tst	r2, r1
    2058:	e5969004 	ldr	r9, [r6, #4]
    205c:	0a000016 	beq	20bc <__call_exitprocs+0x118>
    2060:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    2064:	e1120001 	tst	r2, r1
    2068:	1a000016 	bne	20c8 <__call_exitprocs+0x124>
    206c:	e59d0008 	ldr	r0, [sp, #8]
    2070:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    2074:	e1a0e00f 	mov	lr, pc
    2078:	e12fff13 	bx	r3
    207c:	e5963004 	ldr	r3, [r6, #4]
    2080:	e1530009 	cmp	r3, r9
    2084:	1affffd0 	bne	1fcc <__call_exitprocs+0x28>
    2088:	e59b3000 	ldr	r3, [r11]
    208c:	e1530006 	cmp	r3, r6
    2090:	1affffcd 	bne	1fcc <__call_exitprocs+0x28>
    2094:	e2444001 	sub	r4, r4, #1
    2098:	e3740001 	cmn	r4, #1
    209c:	e2455004 	sub	r5, r5, #4
    20a0:	1affffdc 	bne	2018 <__call_exitprocs+0x74>
    20a4:	e59f1070 	ldr	r1, [pc, #112]	; 211c <__call_exitprocs+0x178>
    20a8:	e3510000 	cmp	r1, #0
    20ac:	1a000009 	bne	20d8 <__call_exitprocs+0x134>
    20b0:	e28dd014 	add	sp, sp, #20
    20b4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    20b8:	e12fff1e 	bx	lr
    20bc:	e1a0e00f 	mov	lr, pc
    20c0:	e12fff13 	bx	r3
    20c4:	eaffffec 	b	207c <__call_exitprocs+0xd8>
    20c8:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    20cc:	e1a0e00f 	mov	lr, pc
    20d0:	e12fff13 	bx	r3
    20d4:	eaffffe8 	b	207c <__call_exitprocs+0xd8>
    20d8:	e5963004 	ldr	r3, [r6, #4]
    20dc:	e3530000 	cmp	r3, #0
    20e0:	e5963000 	ldr	r3, [r6]
    20e4:	1a000008 	bne	210c <__call_exitprocs+0x168>
    20e8:	e3530000 	cmp	r3, #0
    20ec:	0a000006 	beq	210c <__call_exitprocs+0x168>
    20f0:	e1a00006 	mov	r0, r6
    20f4:	e58b3000 	str	r3, [r11]
    20f8:	e320f000 	nop	{0}
    20fc:	e59b6000 	ldr	r6, [r11]
    2100:	e3560000 	cmp	r6, #0
    2104:	1affffb5 	bne	1fe0 <__call_exitprocs+0x3c>
    2108:	eaffffe8 	b	20b0 <__call_exitprocs+0x10c>
    210c:	e1a0b006 	mov	r11, r6
    2110:	e1a06003 	mov	r6, r3
    2114:	eafffff9 	b	2100 <__call_exitprocs+0x15c>
    2118:	000022f8 	.word	0x000022f8
    211c:	00000000 	.word	0x00000000

00002120 <register_fini>:
    2120:	e92d4008 	push	{r3, lr}
    2124:	e59f3010 	ldr	r3, [pc, #16]	; 213c <register_fini+0x1c>
    2128:	e3530000 	cmp	r3, #0
    212c:	159f000c 	ldrne	r0, [pc, #12]	; 2140 <register_fini+0x20>
    2130:	1bffff49 	blne	1e5c <atexit>
    2134:	e8bd4008 	pop	{r3, lr}
    2138:	e12fff1e 	bx	lr
    213c:	00002320 	.word	0x00002320
    2140:	00002144 	.word	0x00002144

00002144 <__libc_fini_array>:
    2144:	e92d4038 	push	{r3, r4, r5, lr}
    2148:	e59f5030 	ldr	r5, [pc, #48]	; 2180 <__libc_fini_array+0x3c>
    214c:	e59f4030 	ldr	r4, [pc, #48]	; 2184 <__libc_fini_array+0x40>
    2150:	e0654004 	rsb	r4, r5, r4
    2154:	e1b04144 	asrs	r4, r4, #2
    2158:	10855104 	addne	r5, r5, r4, lsl #2
    215c:	0a000004 	beq	2174 <__libc_fini_array+0x30>
    2160:	e5353004 	ldr	r3, [r5, #-4]!
    2164:	e1a0e00f 	mov	lr, pc
    2168:	e12fff13 	bx	r3
    216c:	e2544001 	subs	r4, r4, #1
    2170:	1afffffa 	bne	2160 <__libc_fini_array+0x1c>
    2174:	eb000069 	bl	2320 <__libc_fini>
    2178:	e8bd4038 	pop	{r3, r4, r5, lr}
    217c:	e12fff1e 	bx	lr
    2180:	00002338 	.word	0x00002338
    2184:	0000233c 	.word	0x0000233c

00002188 <__cs3_premain>:
    2188:	e92d4008 	push	{r3, lr}
    218c:	eb000017 	bl	21f0 <__libc_init_array>
    2190:	e59f3030 	ldr	r3, [pc, #48]	; 21c8 <__cs3_premain+0x40>
    2194:	e3530000 	cmp	r3, #0
    2198:	15930000 	ldrne	r0, [r3]
    219c:	01a00003 	moveq	r0, r3
    21a0:	e59f3024 	ldr	r3, [pc, #36]	; 21cc <__cs3_premain+0x44>
    21a4:	e3530000 	cmp	r3, #0
    21a8:	15931000 	ldrne	r1, [r3]
    21ac:	01a01003 	moveq	r1, r3
    21b0:	e3a02000 	mov	r2, #0
    21b4:	ebfffc37 	bl	1298 <main>
    21b8:	e59f3010 	ldr	r3, [pc, #16]	; 21d0 <__cs3_premain+0x48>
    21bc:	e3530000 	cmp	r3, #0
    21c0:	1bffff2d 	blne	1e7c <exit>
    21c4:	eafffffe 	b	21c4 <__cs3_premain+0x3c>
	...
    21d0:	00001e7c 	.word	0x00001e7c

000021d4 <_exit>:
    21d4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    21d8:	e3a00018 	mov	r0, #24
    21dc:	e59f1004 	ldr	r1, [pc, #4]	; 21e8 <_exit+0x14>
    21e0:	ef123456 	svc	0x00123456
    21e4:	eafffffe 	b	21e4 <_exit+0x10>
    21e8:	00020026 	.word	0x00020026

000021ec <__cs3_isr_interrupt>:
    21ec:	eafffffe 	b	21ec <__cs3_isr_interrupt>

000021f0 <__libc_init_array>:
    21f0:	e92d4070 	push	{r4, r5, r6, lr}
    21f4:	e59f506c 	ldr	r5, [pc, #108]	; 2268 <__libc_init_array+0x78>
    21f8:	e59f606c 	ldr	r6, [pc, #108]	; 226c <__libc_init_array+0x7c>
    21fc:	e0656006 	rsb	r6, r5, r6
    2200:	e1b06146 	asrs	r6, r6, #2
    2204:	12455004 	subne	r5, r5, #4
    2208:	13a04000 	movne	r4, #0
    220c:	0a000005 	beq	2228 <__libc_init_array+0x38>
    2210:	e5b53004 	ldr	r3, [r5, #4]!
    2214:	e2844001 	add	r4, r4, #1
    2218:	e1a0e00f 	mov	lr, pc
    221c:	e12fff13 	bx	r3
    2220:	e1560004 	cmp	r6, r4
    2224:	1afffff9 	bne	2210 <__libc_init_array+0x20>
    2228:	e59f5040 	ldr	r5, [pc, #64]	; 2270 <__libc_init_array+0x80>
    222c:	e59f6040 	ldr	r6, [pc, #64]	; 2274 <__libc_init_array+0x84>
    2230:	e0656006 	rsb	r6, r5, r6
    2234:	eb000031 	bl	2300 <_init>
    2238:	e1b06146 	asrs	r6, r6, #2
    223c:	12455004 	subne	r5, r5, #4
    2240:	13a04000 	movne	r4, #0
    2244:	0a000005 	beq	2260 <__libc_init_array+0x70>
    2248:	e5b53004 	ldr	r3, [r5, #4]!
    224c:	e2844001 	add	r4, r4, #1
    2250:	e1a0e00f 	mov	lr, pc
    2254:	e12fff13 	bx	r3
    2258:	e1560004 	cmp	r6, r4
    225c:	1afffff9 	bne	2248 <__libc_init_array+0x58>
    2260:	e8bd4070 	pop	{r4, r5, r6, lr}
    2264:	e12fff1e 	bx	lr
    2268:	00002318 	.word	0x00002318
    226c:	00002318 	.word	0x00002318
    2270:	00002318 	.word	0x00002318
    2274:	00002320 	.word	0x00002320

Disassembly of section .rodata:

00002280 <AMP>:
    2280:	00800000                                ....

00002284 <VGA_COL_LEN>:
    2284:	00000140                                @...

00002288 <VGA_ROW_LEN>:
    2288:	000000f0 65726944 726f7463 4f42203a     ....Director: BO
    2298:	4c205353 00000069 756c6f56 203a656d     SS Li...Volume: 
	...

000022b0 <NOTE_LOOKUP>:
    22b0:	189374bc 40605a04 be76c8b4 40625a9f     .t...Z`@..v..Zb@
    22c0:	49ba5e35 40649a0c e353f7cf 4065d3a5     5^.I..d@..S...e@
    22d0:	9db22d0e 40687fef 00000000 406b8000     .-....h@......k@
    22e0:	dd2f1aa0 406ede24 189374bc 40705a04     ../.$.n@.t...Zp@

000022f0 <NUM_NOTES>:
    22f0:	00000008                                ....

000022f4 <SAMPLE_RATE>:
    22f4:	0000bb80                                ....

000022f8 <_global_impure_ptr>:
    22f8:	00031160 00000043                       `...C...

00002300 <_init>:
    2300:	e1a0c00d 	mov	r12, sp
    2304:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    2308:	e24cb004 	sub	r11, r12, #4
    230c:	e24bd028 	sub	sp, r11, #40	; 0x28
    2310:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    2314:	e12fff1e 	bx	lr

00002318 <__init_array_start>:
    2318:	00002120 	.word	0x00002120

0000231c <__frame_dummy_init_array_entry>:
    231c:	00000208                                ....

00002320 <__libc_fini>:
    2320:	e1a0c00d 	mov	r12, sp
    2324:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    2328:	e24cb004 	sub	r11, r12, #4
    232c:	e24bd028 	sub	sp, r11, #40	; 0x28
    2330:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    2334:	e12fff1e 	bx	lr

00002338 <__fini_array_start>:
    2338:	000001c4 	.word	0x000001c4

0000233c <__cs3_regions>:
    233c:	00000000 	.word	0x00000000
    2340:	00000040 	.word	0x00000040
    2344:	00000040 	.word	0x00000040
    2348:	00031550 	.word	0x00031550
    234c:	00000020 	.word	0x00000020
