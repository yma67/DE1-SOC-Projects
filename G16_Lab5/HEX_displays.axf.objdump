
//campus.mcgill.ca/emf/CPE/yma67/My Documents/G16_Lab5/HEX_displays.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	60 07 00 00 64 07 00 00 68 07 00 00 6c 07 00 00     `...d...h...l...
  30:	70 07 00 00 18 2e 00 00 3c 06 00 00 74 07 00 00     p.......<...t...

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb000b36 	bl	2db4 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	00002f80 	.word	0x00002f80

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <ICDISER+0x18>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <ICDISER+0x1c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <ICDISER+0x20>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	000321b8 	.word	0x000321b8

00000124 <__cs3_heap_start_ptr>:
     124:	000321e0 	.word	0x000321e0

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	000321c0 	.word	0x000321c0
     170:	000321c3 	.word	0x000321c3
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <ICDICER+0x38>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <ICDICER+0x3c>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <ICDICER+0x20>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <ICDICER+0x40>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <ICDICER+0x18>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <ICDICER+0x18>
     1b8:	000321c0 	.word	0x000321c0
     1bc:	000321c0 	.word	0x000321c0
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	000321c0 	.word	0x000321c0
     200:	00000000 	.word	0x00000000
     204:	00002ea4 	.word	0x00002ea4

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00002ea4 	.word	0x00002ea4
     250:	000321c4 	.word	0x000321c4
     254:	00002f80 	.word	0x00002f80
     258:	00000000 	.word	0x00000000

0000025c <clear_signal>:

const int VGA_ROW_LEN = 240;
const int VGA_COL_LEN = 320;
const int AMP = 0x800000;

void clear_signal(int pixel_vector[VGA_COL_LEN], int current_pixel_vector[VGA_COL_LEN]) {
     25c:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
     260:	e1a05000 	mov	r5, r0
     264:	e1a04001 	mov	r4, r1
	int i = 0, j = 0;
	VGA_clear_pixelbuff_ASM();
     268:	eb000438 	bl	1350 <VGA_clear_pixelbuff_ASM>
     26c:	e3a03000 	mov	r3, #0
	for (i = 0; i < VGA_COL_LEN; i++) {
		pixel_vector[i] = 100;
     270:	e3a01064 	mov	r1, #100	; 0x64
		current_pixel_vector[i] = 0;
     274:	e1a02003 	mov	r2, r3

void clear_signal(int pixel_vector[VGA_COL_LEN], int current_pixel_vector[VGA_COL_LEN]) {
	int i = 0, j = 0;
	VGA_clear_pixelbuff_ASM();
	for (i = 0; i < VGA_COL_LEN; i++) {
		pixel_vector[i] = 100;
     278:	e7851003 	str	r1, [r5, r3]
		current_pixel_vector[i] = 0;
     27c:	e7842003 	str	r2, [r4, r3]
     280:	e2833004 	add	r3, r3, #4
const int AMP = 0x800000;

void clear_signal(int pixel_vector[VGA_COL_LEN], int current_pixel_vector[VGA_COL_LEN]) {
	int i = 0, j = 0;
	VGA_clear_pixelbuff_ASM();
	for (i = 0; i < VGA_COL_LEN; i++) {
     284:	e3530c05 	cmp	r3, #1280	; 0x500
     288:	1afffffa 	bne	278 <clear_signal+0x1c>
     28c:	e3a05000 	mov	r5, #0
const int VGA_COL_LEN = 320;
const int AMP = 0x800000;

void clear_signal(int pixel_vector[VGA_COL_LEN], int current_pixel_vector[VGA_COL_LEN]) {
	int i = 0, j = 0;
	VGA_clear_pixelbuff_ASM();
     290:	e1a07005 	mov	r7, r5
	for (i = 0; i < VGA_COL_LEN; i++) {
		pixel_vector[i] = 100;
		current_pixel_vector[i] = 0;
	}
	for (i = 0; i < 43; i++) for (j = 0; j < VGA_COL_LEN; j++) VGA_draw_point_ASM(j, i, 0x5D36);
     294:	e3056d36 	movw	r6, #23862	; 0x5d36
     298:	ea000009 	b	2c4 <clear_signal+0x68>
     29c:	e1a00004 	mov	r0, r4
     2a0:	e1a01005 	mov	r1, r5
     2a4:	e1a02006 	mov	r2, r6
     2a8:	eb00045c 	bl	1420 <VGA_draw_point_ASM>
     2ac:	e2844001 	add	r4, r4, #1
     2b0:	e3540d05 	cmp	r4, #320	; 0x140
     2b4:	1afffff8 	bne	29c <clear_signal+0x40>
     2b8:	e2855001 	add	r5, r5, #1
     2bc:	e355002b 	cmp	r5, #43	; 0x2b
     2c0:	0a00000c 	beq	2f8 <clear_signal+0x9c>
const int VGA_COL_LEN = 320;
const int AMP = 0x800000;

void clear_signal(int pixel_vector[VGA_COL_LEN], int current_pixel_vector[VGA_COL_LEN]) {
	int i = 0, j = 0;
	VGA_clear_pixelbuff_ASM();
     2c4:	e1a04007 	mov	r4, r7
     2c8:	eafffff3 	b	29c <clear_signal+0x40>
	for (i = 0; i < VGA_COL_LEN; i++) {
		pixel_vector[i] = 100;
		current_pixel_vector[i] = 0;
	}
	for (i = 0; i < 43; i++) for (j = 0; j < VGA_COL_LEN; j++) VGA_draw_point_ASM(j, i, 0x5D36);
	for (i = 43; i < VGA_ROW_LEN; i++) for (j = 0; j < VGA_COL_LEN; j++) VGA_draw_point_ASM(j, i, 0x8EFF);
     2cc:	e1a00004 	mov	r0, r4
     2d0:	e1a01005 	mov	r1, r5
     2d4:	e1a02006 	mov	r2, r6
     2d8:	eb000450 	bl	1420 <VGA_draw_point_ASM>
     2dc:	e2844001 	add	r4, r4, #1
     2e0:	e3540d05 	cmp	r4, #320	; 0x140
     2e4:	1afffff8 	bne	2cc <clear_signal+0x70>
     2e8:	e2855001 	add	r5, r5, #1
     2ec:	e35500f0 	cmp	r5, #240	; 0xf0
     2f0:	1a000002 	bne	300 <clear_signal+0xa4>
     2f4:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
const int AMP = 0x800000;

void clear_signal(int pixel_vector[VGA_COL_LEN], int current_pixel_vector[VGA_COL_LEN]) {
	int i = 0, j = 0;
	VGA_clear_pixelbuff_ASM();
	for (i = 0; i < VGA_COL_LEN; i++) {
     2f8:	e3a07000 	mov	r7, #0
		pixel_vector[i] = 100;
		current_pixel_vector[i] = 0;
	}
	for (i = 0; i < 43; i++) for (j = 0; j < VGA_COL_LEN; j++) VGA_draw_point_ASM(j, i, 0x5D36);
	for (i = 43; i < VGA_ROW_LEN; i++) for (j = 0; j < VGA_COL_LEN; j++) VGA_draw_point_ASM(j, i, 0x8EFF);
     2fc:	e3e06c71 	mvn	r6, #28928	; 0x7100
const int AMP = 0x800000;

void clear_signal(int pixel_vector[VGA_COL_LEN], int current_pixel_vector[VGA_COL_LEN]) {
	int i = 0, j = 0;
	VGA_clear_pixelbuff_ASM();
	for (i = 0; i < VGA_COL_LEN; i++) {
     300:	e1a04007 	mov	r4, r7
     304:	eafffff0 	b	2cc <clear_signal+0x70>

00000308 <screen_write_cstring>:
		else if (i == NUM_NOTES - 1) screen_write_cstring((char []){'HH', 'C', ':', is_pressed[i] + '0', ' ', '\0'}, 75, 8);
		else screen_write_cstring((char []){'C', i - 12 + 'A', ':', is_pressed[i] + '0', ' ', '\0'}, 45 + (i - 7) * 5, 6);
	}
}

void screen_write_cstring(char cstr[], int sx, int sy) {
     308:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
     30c:	e1a04001 	mov	r4, r1
     310:	e1a05002 	mov	r5, r2
	int i = 0;
	while (cstr[i] != '\0') {
     314:	e5d02000 	ldrb	r2, [r0]
     318:	e3520000 	cmp	r2, #0
     31c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
     320:	e1a06000 	mov	r6, r0
		VGA_write_char_ASM(sx, sy, cstr[i]);
		if (sx == 78) sy = (sy + 1) % 60;
     324:	e3088889 	movw	r8, #34953	; 0x8889
     328:	e3488888 	movt	r8, #34952	; 0x8888
		sx = (sx + 1) % 80;
     32c:	e3067667 	movw	r7, #26215	; 0x6667
     330:	e3467666 	movt	r7, #26214	; 0x6666
}

void screen_write_cstring(char cstr[], int sx, int sy) {
	int i = 0;
	while (cstr[i] != '\0') {
		VGA_write_char_ASM(sx, sy, cstr[i]);
     334:	e1a00004 	mov	r0, r4
     338:	e1a01005 	mov	r1, r5
     33c:	eb000413 	bl	1390 <VGA_write_char_ASM>
		if (sx == 78) sy = (sy + 1) % 60;
     340:	e354004e 	cmp	r4, #78	; 0x4e
     344:	1a000006 	bne	364 <screen_write_cstring+0x5c>
     348:	e2853001 	add	r3, r5, #1
     34c:	e0c52398 	smull	r2, r5, r8, r3
     350:	e0855003 	add	r5, r5, r3
     354:	e1a02fc3 	asr	r2, r3, #31
     358:	e06252c5 	rsb	r5, r2, r5, asr #5
     35c:	e0655205 	rsb	r5, r5, r5, lsl #4
     360:	e0435105 	sub	r5, r3, r5, lsl #2
		sx = (sx + 1) % 80;
     364:	e2843001 	add	r3, r4, #1
     368:	e0c42397 	smull	r2, r4, r7, r3
     36c:	e1a02fc3 	asr	r2, r3, #31
     370:	e06242c4 	rsb	r4, r2, r4, asr #5
     374:	e0844104 	add	r4, r4, r4, lsl #2
     378:	e0434204 	sub	r4, r3, r4, lsl #4
	}
}

void screen_write_cstring(char cstr[], int sx, int sy) {
	int i = 0;
	while (cstr[i] != '\0') {
     37c:	e5f62001 	ldrb	r2, [r6, #1]!
     380:	e3520000 	cmp	r2, #0
     384:	1affffea 	bne	334 <screen_write_cstring+0x2c>
     388:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000038c <render>:
	}
	for (i = 0; i < 43; i++) for (j = 0; j < VGA_COL_LEN; j++) VGA_draw_point_ASM(j, i, 0x5D36);
	for (i = 43; i < VGA_ROW_LEN; i++) for (j = 0; j < VGA_COL_LEN; j++) VGA_draw_point_ASM(j, i, 0x8EFF);
}

void render(int volume, char is_pressed[]) {
     38c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     390:	e24dd034 	sub	sp, sp, #52	; 0x34
     394:	e1a04000 	mov	r4, r0
     398:	e1a06001 	mov	r6, r1
	int i; 
	screen_write_cstring("Director BOSS Li is the strongest!", 21, 1);
     39c:	e3020eb4 	movw	r0, #11956	; 0x2eb4
     3a0:	e3400000 	movt	r0, #0
     3a4:	e3a01015 	mov	r1, #21
     3a8:	e3a02001 	mov	r2, #1
     3ac:	ebffffd5 	bl	308 <screen_write_cstring>
	screen_write_cstring("Volume: ", 1, 4);
     3b0:	e3020ed8 	movw	r0, #11992	; 0x2ed8
     3b4:	e3400000 	movt	r0, #0
     3b8:	e3a01001 	mov	r1, #1
     3bc:	e3a02004 	mov	r2, #4
     3c0:	ebffffd0 	bl	308 <screen_write_cstring>
	screen_write_cstring((char []){volume + '0', '\0'}, 8, 4);
     3c4:	e2844030 	add	r4, r4, #48	; 0x30
     3c8:	e5cd4004 	strb	r4, [sp, #4]
     3cc:	e3a04000 	mov	r4, #0
     3d0:	e5cd4005 	strb	r4, [sp, #5]
     3d4:	e28d0004 	add	r0, sp, #4
     3d8:	e3a01008 	mov	r1, #8
     3dc:	e3a02004 	mov	r2, #4
     3e0:	ebffffc8 	bl	308 <screen_write_cstring>
     3e4:	e3a0502d 	mov	r5, #45	; 0x2d
	for (i = 0; i < 7; i++) {
		if (i < 5) screen_write_cstring((char []){'L', i + 'C', ':', is_pressed[i] + '0', ' ', '\0'}, 45 + i * 5, 4);
		else screen_write_cstring((char []){'L', i - 5 + 'A', ':', is_pressed[i] + '0', ' ', '\0'}, 45 + i * 5, 4);
     3e8:	e3a0b04c 	mov	r11, #76	; 0x4c
     3ec:	e3a0903a 	mov	r9, #58	; 0x3a
     3f0:	e3a0a020 	mov	r10, #32
     3f4:	e1a08004 	mov	r8, r4
     3f8:	e3a07004 	mov	r7, #4
	int i; 
	screen_write_cstring("Director BOSS Li is the strongest!", 21, 1);
	screen_write_cstring("Volume: ", 1, 4);
	screen_write_cstring((char []){volume + '0', '\0'}, 8, 4);
	for (i = 0; i < 7; i++) {
		if (i < 5) screen_write_cstring((char []){'L', i + 'C', ':', is_pressed[i] + '0', ' ', '\0'}, 45 + i * 5, 4);
     3fc:	e3540004 	cmp	r4, #4
     400:	ca00000d 	bgt	43c <render+0xb0>
     404:	e5cdb008 	strb	r11, [sp, #8]
	}
	for (i = 0; i < 43; i++) for (j = 0; j < VGA_COL_LEN; j++) VGA_draw_point_ASM(j, i, 0x5D36);
	for (i = 43; i < VGA_ROW_LEN; i++) for (j = 0; j < VGA_COL_LEN; j++) VGA_draw_point_ASM(j, i, 0x8EFF);
}

void render(int volume, char is_pressed[]) {
     408:	e2843043 	add	r3, r4, #67	; 0x43
	int i; 
	screen_write_cstring("Director BOSS Li is the strongest!", 21, 1);
	screen_write_cstring("Volume: ", 1, 4);
	screen_write_cstring((char []){volume + '0', '\0'}, 8, 4);
	for (i = 0; i < 7; i++) {
		if (i < 5) screen_write_cstring((char []){'L', i + 'C', ':', is_pressed[i] + '0', ' ', '\0'}, 45 + i * 5, 4);
     40c:	e5cd3009 	strb	r3, [sp, #9]
     410:	e5cd900a 	strb	r9, [sp, #10]
     414:	e7d63004 	ldrb	r3, [r6, r4]
     418:	e2833030 	add	r3, r3, #48	; 0x30
     41c:	e5cd300b 	strb	r3, [sp, #11]
     420:	e5cda00c 	strb	r10, [sp, #12]
     424:	e5cd800d 	strb	r8, [sp, #13]
     428:	e28d0008 	add	r0, sp, #8
     42c:	e1a01005 	mov	r1, r5
     430:	e1a02007 	mov	r2, r7
     434:	ebffffb3 	bl	308 <screen_write_cstring>
     438:	ea00000c 	b	470 <render+0xe4>
		else screen_write_cstring((char []){'L', i - 5 + 'A', ':', is_pressed[i] + '0', ' ', '\0'}, 45 + i * 5, 4);
     43c:	e5cdb010 	strb	r11, [sp, #16]
	}
	for (i = 0; i < 43; i++) for (j = 0; j < VGA_COL_LEN; j++) VGA_draw_point_ASM(j, i, 0x5D36);
	for (i = 43; i < VGA_ROW_LEN; i++) for (j = 0; j < VGA_COL_LEN; j++) VGA_draw_point_ASM(j, i, 0x8EFF);
}

void render(int volume, char is_pressed[]) {
     440:	e284303c 	add	r3, r4, #60	; 0x3c
	screen_write_cstring("Director BOSS Li is the strongest!", 21, 1);
	screen_write_cstring("Volume: ", 1, 4);
	screen_write_cstring((char []){volume + '0', '\0'}, 8, 4);
	for (i = 0; i < 7; i++) {
		if (i < 5) screen_write_cstring((char []){'L', i + 'C', ':', is_pressed[i] + '0', ' ', '\0'}, 45 + i * 5, 4);
		else screen_write_cstring((char []){'L', i - 5 + 'A', ':', is_pressed[i] + '0', ' ', '\0'}, 45 + i * 5, 4);
     444:	e5cd3011 	strb	r3, [sp, #17]
     448:	e5cd9012 	strb	r9, [sp, #18]
     44c:	e7d63004 	ldrb	r3, [r6, r4]
     450:	e2833030 	add	r3, r3, #48	; 0x30
     454:	e5cd3013 	strb	r3, [sp, #19]
     458:	e5cda014 	strb	r10, [sp, #20]
     45c:	e5cd8015 	strb	r8, [sp, #21]
     460:	e28d0010 	add	r0, sp, #16
     464:	e1a01005 	mov	r1, r5
     468:	e1a02007 	mov	r2, r7
     46c:	ebffffa5 	bl	308 <screen_write_cstring>
void render(int volume, char is_pressed[]) {
	int i; 
	screen_write_cstring("Director BOSS Li is the strongest!", 21, 1);
	screen_write_cstring("Volume: ", 1, 4);
	screen_write_cstring((char []){volume + '0', '\0'}, 8, 4);
	for (i = 0; i < 7; i++) {
     470:	e2844001 	add	r4, r4, #1
     474:	e2855005 	add	r5, r5, #5
     478:	e3540007 	cmp	r4, #7
     47c:	1affffde 	bne	3fc <render+0x70>
		if (i < 5) screen_write_cstring((char []){'L', i + 'C', ':', is_pressed[i] + '0', ' ', '\0'}, 45 + i * 5, 4);
		else screen_write_cstring((char []){'L', i - 5 + 'A', ':', is_pressed[i] + '0', ' ', '\0'}, 45 + i * 5, 4);
	}
	for (i = 7; i < NUM_NOTES; i++) {
     480:	e3023f20 	movw	r3, #12064	; 0x2f20
     484:	e3403000 	movt	r3, #0
     488:	e5933000 	ldr	r3, [r3]
     48c:	e3530007 	cmp	r3, #7
     490:	da000039 	ble	57c <render+0x1f0>
     494:	e3a0502d 	mov	r5, #45	; 0x2d
		if (i < 12) screen_write_cstring((char []){'C', i - 7 + 'C', ':', is_pressed[i] + '0', ' ', '\0'}, 45 + (i - 7) * 5, 6);
		else if (i == NUM_NOTES - 1) screen_write_cstring((char []){'HH', 'C', ':', is_pressed[i] + '0', ' ', '\0'}, 75, 8);
		else screen_write_cstring((char []){'C', i - 12 + 'A', ':', is_pressed[i] + '0', ' ', '\0'}, 45 + (i - 7) * 5, 6);
     498:	e3a0b043 	mov	r11, #67	; 0x43
     49c:	e3a0903a 	mov	r9, #58	; 0x3a
     4a0:	e3a0a020 	mov	r10, #32
     4a4:	e3a08000 	mov	r8, #0
	screen_write_cstring((char []){volume + '0', '\0'}, 8, 4);
	for (i = 0; i < 7; i++) {
		if (i < 5) screen_write_cstring((char []){'L', i + 'C', ':', is_pressed[i] + '0', ' ', '\0'}, 45 + i * 5, 4);
		else screen_write_cstring((char []){'L', i - 5 + 'A', ':', is_pressed[i] + '0', ' ', '\0'}, 45 + i * 5, 4);
	}
	for (i = 7; i < NUM_NOTES; i++) {
     4a8:	e3027f20 	movw	r7, #12064	; 0x2f20
     4ac:	e3407000 	movt	r7, #0
		if (i < 12) screen_write_cstring((char []){'C', i - 7 + 'C', ':', is_pressed[i] + '0', ' ', '\0'}, 45 + (i - 7) * 5, 6);
     4b0:	e354000b 	cmp	r4, #11
     4b4:	ca00000d 	bgt	4f0 <render+0x164>
     4b8:	e5cdb018 	strb	r11, [sp, #24]
	}
	for (i = 0; i < 43; i++) for (j = 0; j < VGA_COL_LEN; j++) VGA_draw_point_ASM(j, i, 0x5D36);
	for (i = 43; i < VGA_ROW_LEN; i++) for (j = 0; j < VGA_COL_LEN; j++) VGA_draw_point_ASM(j, i, 0x8EFF);
}

void render(int volume, char is_pressed[]) {
     4bc:	e284303c 	add	r3, r4, #60	; 0x3c
	for (i = 0; i < 7; i++) {
		if (i < 5) screen_write_cstring((char []){'L', i + 'C', ':', is_pressed[i] + '0', ' ', '\0'}, 45 + i * 5, 4);
		else screen_write_cstring((char []){'L', i - 5 + 'A', ':', is_pressed[i] + '0', ' ', '\0'}, 45 + i * 5, 4);
	}
	for (i = 7; i < NUM_NOTES; i++) {
		if (i < 12) screen_write_cstring((char []){'C', i - 7 + 'C', ':', is_pressed[i] + '0', ' ', '\0'}, 45 + (i - 7) * 5, 6);
     4c0:	e5cd3019 	strb	r3, [sp, #25]
     4c4:	e5cd901a 	strb	r9, [sp, #26]
     4c8:	e7d63004 	ldrb	r3, [r6, r4]
     4cc:	e2833030 	add	r3, r3, #48	; 0x30
     4d0:	e5cd301b 	strb	r3, [sp, #27]
     4d4:	e5cda01c 	strb	r10, [sp, #28]
     4d8:	e5cd801d 	strb	r8, [sp, #29]
     4dc:	e28d0018 	add	r0, sp, #24
     4e0:	e1a01005 	mov	r1, r5
     4e4:	e3a02006 	mov	r2, #6
     4e8:	ebffff86 	bl	308 <screen_write_cstring>
     4ec:	ea00001d 	b	568 <render+0x1dc>
		else if (i == NUM_NOTES - 1) screen_write_cstring((char []){'HH', 'C', ':', is_pressed[i] + '0', ' ', '\0'}, 75, 8);
     4f0:	e2433001 	sub	r3, r3, #1
     4f4:	e1530004 	cmp	r3, r4
     4f8:	1a00000d 	bne	534 <render+0x1a8>
     4fc:	e3a02048 	mov	r2, #72	; 0x48
     500:	e5cd2020 	strb	r2, [sp, #32]
     504:	e5cdb021 	strb	r11, [sp, #33]	; 0x21
     508:	e5cd9022 	strb	r9, [sp, #34]	; 0x22
     50c:	e7d63003 	ldrb	r3, [r6, r3]
     510:	e2833030 	add	r3, r3, #48	; 0x30
     514:	e5cd3023 	strb	r3, [sp, #35]	; 0x23
     518:	e5cda024 	strb	r10, [sp, #36]	; 0x24
     51c:	e5cd8025 	strb	r8, [sp, #37]	; 0x25
     520:	e28d0020 	add	r0, sp, #32
     524:	e3a0104b 	mov	r1, #75	; 0x4b
     528:	e3a02008 	mov	r2, #8
     52c:	ebffff75 	bl	308 <screen_write_cstring>
     530:	ea00000c 	b	568 <render+0x1dc>
		else screen_write_cstring((char []){'C', i - 12 + 'A', ':', is_pressed[i] + '0', ' ', '\0'}, 45 + (i - 7) * 5, 6);
     534:	e5cdb028 	strb	r11, [sp, #40]	; 0x28
	}
	for (i = 0; i < 43; i++) for (j = 0; j < VGA_COL_LEN; j++) VGA_draw_point_ASM(j, i, 0x5D36);
	for (i = 43; i < VGA_ROW_LEN; i++) for (j = 0; j < VGA_COL_LEN; j++) VGA_draw_point_ASM(j, i, 0x8EFF);
}

void render(int volume, char is_pressed[]) {
     538:	e2843035 	add	r3, r4, #53	; 0x35
		else screen_write_cstring((char []){'L', i - 5 + 'A', ':', is_pressed[i] + '0', ' ', '\0'}, 45 + i * 5, 4);
	}
	for (i = 7; i < NUM_NOTES; i++) {
		if (i < 12) screen_write_cstring((char []){'C', i - 7 + 'C', ':', is_pressed[i] + '0', ' ', '\0'}, 45 + (i - 7) * 5, 6);
		else if (i == NUM_NOTES - 1) screen_write_cstring((char []){'HH', 'C', ':', is_pressed[i] + '0', ' ', '\0'}, 75, 8);
		else screen_write_cstring((char []){'C', i - 12 + 'A', ':', is_pressed[i] + '0', ' ', '\0'}, 45 + (i - 7) * 5, 6);
     53c:	e5cd3029 	strb	r3, [sp, #41]	; 0x29
     540:	e5cd902a 	strb	r9, [sp, #42]	; 0x2a
     544:	e7d63004 	ldrb	r3, [r6, r4]
     548:	e2833030 	add	r3, r3, #48	; 0x30
     54c:	e5cd302b 	strb	r3, [sp, #43]	; 0x2b
     550:	e5cda02c 	strb	r10, [sp, #44]	; 0x2c
     554:	e5cd802d 	strb	r8, [sp, #45]	; 0x2d
     558:	e28d0028 	add	r0, sp, #40	; 0x28
     55c:	e1a01005 	mov	r1, r5
     560:	e3a02006 	mov	r2, #6
     564:	ebffff67 	bl	308 <screen_write_cstring>
	screen_write_cstring((char []){volume + '0', '\0'}, 8, 4);
	for (i = 0; i < 7; i++) {
		if (i < 5) screen_write_cstring((char []){'L', i + 'C', ':', is_pressed[i] + '0', ' ', '\0'}, 45 + i * 5, 4);
		else screen_write_cstring((char []){'L', i - 5 + 'A', ':', is_pressed[i] + '0', ' ', '\0'}, 45 + i * 5, 4);
	}
	for (i = 7; i < NUM_NOTES; i++) {
     568:	e2844001 	add	r4, r4, #1
     56c:	e5973000 	ldr	r3, [r7]
     570:	e2855005 	add	r5, r5, #5
     574:	e1530004 	cmp	r3, r4
     578:	caffffcc 	bgt	4b0 <render+0x124>
		if (i < 12) screen_write_cstring((char []){'C', i - 7 + 'C', ':', is_pressed[i] + '0', ' ', '\0'}, 45 + (i - 7) * 5, 6);
		else if (i == NUM_NOTES - 1) screen_write_cstring((char []){'HH', 'C', ':', is_pressed[i] + '0', ' ', '\0'}, 75, 8);
		else screen_write_cstring((char []){'C', i - 12 + 'A', ':', is_pressed[i] + '0', ' ', '\0'}, 45 + (i - 7) * 5, 6);
	}
}
     57c:	e28dd034 	add	sp, sp, #52	; 0x34
     580:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00000584 <disable_A9_interrupts>:
#include "../inc/int_setup.h"

void disable_A9_interrupts() {
	int status = 0b11010011;
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     584:	e3a030d3 	mov	r3, #211	; 0xd3
     588:	e129f003 	msr	CPSR_fc, r3
     58c:	e12fff1e 	bx	lr

00000590 <enable_A9_interrupts>:
}

void enable_A9_interrupts() {
	int status = 0b01010011;
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     590:	e3a03053 	mov	r3, #83	; 0x53
     594:	e129f003 	msr	CPSR_fc, r3
     598:	e12fff1e 	bx	lr

0000059c <set_A9_IRQ_stack>:

void set_A9_IRQ_stack() {
	int stack, mode;
	stack = 0xFFFFFFFF - 7;
	mode = 0b11010010;
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     59c:	e3a030d2 	mov	r3, #210	; 0xd2
     5a0:	e129f003 	msr	CPSR_fc, r3
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
     5a4:	e3e03007 	mvn	r3, #7
     5a8:	e1a0d003 	mov	sp, r3
	
	mode = 0b11010011;
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     5ac:	e3a030d3 	mov	r3, #211	; 0xd3
     5b0:	e129f003 	msr	CPSR_fc, r3
     5b4:	e12fff1e 	bx	lr

000005b8 <config_interrupt>:
}

void config_interrupt(int ID, int CPU) {
     5b8:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
	int reg_offset;
	int index;
	int value;
	int address;
	
	reg_offset = (ID>>3) & 0xFFFFFFFC;
     5bc:	e1a031c0 	asr	r3, r0, #3
     5c0:	e3c33003 	bic	r3, r3, #3
	index = ID & 0x1F;
	value = 1<<index;
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
     5c4:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
	int index;
	int value;
	int address;
	
	reg_offset = (ID>>3) & 0xFFFFFFFC;
	index = ID & 0x1F;
     5c8:	e200201f 	and	r2, r0, #31
	value = 1<<index;
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
	*(int *)address |= value;
     5cc:	e513c300 	ldr	r12, [r3, #-768]	; 0xfffffd00
     5d0:	e3a04001 	mov	r4, #1
     5d4:	e18c2214 	orr	r2, r12, r4, lsl r2
     5d8:	e5032300 	str	r2, [r3, #-768]	; 0xfffffd00
	
	reg_offset = (ID & 0xFFFFFFFC);
	index = ID & 3;
	address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
	*(char *)address = (char)CPU;
     5dc:	e2400b4a 	sub	r0, r0, #75776	; 0x12800
     5e0:	e5c01000 	strb	r1, [r0]
}
     5e4:	e8bd0010 	ldmfd	sp!, {r4}
     5e8:	e12fff1e 	bx	lr

000005ec <config_GIC>:

void config_GIC(int len, int* IDs) {
     5ec:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
	int i;
	for(i=0 ; i<len ; i++)
     5f0:	e2506000 	subs	r6, r0, #0
     5f4:	da000008 	ble	61c <config_GIC+0x30>
	index = ID & 3;
	address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
	*(char *)address = (char)CPU;
}

void config_GIC(int len, int* IDs) {
     5f8:	e2415004 	sub	r5, r1, #4
	int i;
	for(i=0 ; i<len ; i++)
     5fc:	e3a04000 	mov	r4, #0
		config_interrupt(IDs[i],1);
     600:	e3a07001 	mov	r7, #1
     604:	e5b50004 	ldr	r0, [r5, #4]!
     608:	e1a01007 	mov	r1, r7
     60c:	ebffffe9 	bl	5b8 <config_interrupt>
	*(char *)address = (char)CPU;
}

void config_GIC(int len, int* IDs) {
	int i;
	for(i=0 ; i<len ; i++)
     610:	e2844001 	add	r4, r4, #1
     614:	e1540006 	cmp	r4, r6
     618:	1afffff9 	bne	604 <config_GIC+0x18>
		config_interrupt(IDs[i],1);
	*((int *) (MPCORE_GIC_CPUIF + ICCPMR)) = 0xFFFF;
     61c:	e3e02a13 	mvn	r2, #77824	; 0x13000
     620:	e30f3fff 	movw	r3, #65535	; 0xffff
     624:	e5023efb 	str	r3, [r2, #-3835]	; 0xfffff105
	*((int *) (MPCORE_GIC_CPUIF)) = 1;
     628:	e3a03001 	mov	r3, #1
     62c:	e5023eff 	str	r3, [r2, #-3839]	; 0xfffff101
	*((int *) (MPCORE_GIC_DIST)) = 1;
     630:	e3e02a12 	mvn	r2, #73728	; 0x12000
     634:	e5023fff 	str	r3, [r2, #-4095]	; 0xfffff001
     638:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}

0000063c <__cs3_isr_irq>:
}

void __attribute__ ((interrupt)) __cs3_isr_irq() {
     63c:	e24ee004 	sub	lr, lr, #4
     640:	e92d503f 	push	{r0, r1, r2, r3, r4, r5, r12, lr}
	int interrupt_ID = *((int *) (MPCORE_GIC_CPUIF + ICCIAR));
     644:	e3e03a13 	mvn	r3, #77824	; 0x13000
     648:	e5134ef3 	ldr	r4, [r3, #-3827]	; 0xfffff10d
	
	switch(interrupt_ID) {
     64c:	e3540053 	cmp	r4, #83	; 0x53
     650:	0a000038 	beq	738 <__cs3_isr_irq+0xfc>
     654:	ca00000f 	bgt	698 <__cs3_isr_irq+0x5c>
     658:	e354004e 	cmp	r4, #78	; 0x4e
     65c:	0a00002d 	beq	718 <__cs3_isr_irq+0xdc>
     660:	ca000006 	bgt	680 <__cs3_isr_irq+0x44>
     664:	e3540048 	cmp	r4, #72	; 0x48
     668:	0a000026 	beq	708 <__cs3_isr_irq+0xcc>
     66c:	e3540049 	cmp	r4, #73	; 0x49
     670:	0a000026 	beq	710 <__cs3_isr_irq+0xd4>
     674:	e354001d 	cmp	r4, #29
     678:	0a000016 	beq	6d8 <__cs3_isr_irq+0x9c>
     67c:	ea000033 	b	750 <__cs3_isr_irq+0x114>
     680:	e3540050 	cmp	r4, #80	; 0x50
     684:	0a000027 	beq	728 <__cs3_isr_irq+0xec>
     688:	ba000024 	blt	720 <__cs3_isr_irq+0xe4>
     68c:	e3540051 	cmp	r4, #81	; 0x51
     690:	0a000026 	beq	730 <__cs3_isr_irq+0xf4>
     694:	ea00002d 	b	750 <__cs3_isr_irq+0x114>
     698:	e35400c7 	cmp	r4, #199	; 0xc7
     69c:	0a000011 	beq	6e8 <__cs3_isr_irq+0xac>
     6a0:	ca000006 	bgt	6c0 <__cs3_isr_irq+0x84>
     6a4:	e3540059 	cmp	r4, #89	; 0x59
     6a8:	0a000026 	beq	748 <__cs3_isr_irq+0x10c>
     6ac:	e35400c5 	cmp	r4, #197	; 0xc5
     6b0:	0a00000a 	beq	6e0 <__cs3_isr_irq+0xa4>
     6b4:	e3540054 	cmp	r4, #84	; 0x54
     6b8:	0a000020 	beq	740 <__cs3_isr_irq+0x104>
     6bc:	ea000023 	b	750 <__cs3_isr_irq+0x114>
     6c0:	e35400c9 	cmp	r4, #201	; 0xc9
     6c4:	0a00000b 	beq	6f8 <__cs3_isr_irq+0xbc>
     6c8:	ba000008 	blt	6f0 <__cs3_isr_irq+0xb4>
     6cc:	e35400ca 	cmp	r4, #202	; 0xca
     6d0:	0a00000a 	beq	700 <__cs3_isr_irq+0xc4>
     6d4:	ea00001d 	b	750 <__cs3_isr_irq+0x114>
		
		case 29:  A9_PRIV_TIM_ISR(); break;
     6d8:	eb0001c5 	bl	df4 <A9_PRIV_TIM_ISR>
     6dc:	ea00001c 	b	754 <__cs3_isr_irq+0x118>
		case 197: HPS_GPIO1_ISR(); break;
     6e0:	eb0001c4 	bl	df8 <HPS_GPIO1_ISR>
     6e4:	ea00001a 	b	754 <__cs3_isr_irq+0x118>
		case 199: HPS_TIM0_ISR(); break;
     6e8:	eb0001c3 	bl	dfc <HPS_TIM0_ISR>
     6ec:	ea000018 	b	754 <__cs3_isr_irq+0x118>
		case 200: HPS_TIM1_ISR(); break;
     6f0:	eb0001c9 	bl	e1c <HPS_TIM1_ISR>
     6f4:	ea000016 	b	754 <__cs3_isr_irq+0x118>
		case 201: HPS_TIM2_ISR(); break;
     6f8:	eb0001cf 	bl	e3c <HPS_TIM2_ISR>
     6fc:	ea000014 	b	754 <__cs3_isr_irq+0x118>
		case 202: HPS_TIM3_ISR(); break;
     700:	eb0001ce 	bl	e40 <HPS_TIM3_ISR>
     704:	ea000012 	b	754 <__cs3_isr_irq+0x118>
		case 72:  FPGA_INTERVAL_TIM_ISR(); break;
     708:	eb0001cd 	bl	e44 <FPGA_INTERVAL_TIM_ISR>
     70c:	ea000010 	b	754 <__cs3_isr_irq+0x118>
		case 73:  FPGA_PB_KEYS_ISR(); break;
     710:	eb0001cc 	bl	e48 <FPGA_PB_KEYS_ISR>
     714:	ea00000e 	b	754 <__cs3_isr_irq+0x118>
		case 78:  FPGA_Audio_ISR(); break;
     718:	eb0001cb 	bl	e4c <FPGA_Audio_ISR>
     71c:	ea00000c 	b	754 <__cs3_isr_irq+0x118>
		case 79:  FPGA_PS2_ISR(); break;
     720:	eb0001ca 	bl	e50 <FPGA_PS2_ISR>
     724:	ea00000a 	b	754 <__cs3_isr_irq+0x118>
		case 80:  FPGA_JTAG_ISR(); break;
     728:	eb0001c9 	bl	e54 <FPGA_JTAG_ISR>
     72c:	ea000008 	b	754 <__cs3_isr_irq+0x118>
		case 81:  FPGA_IrDA_ISR(); break;
     730:	eb0001c8 	bl	e58 <FPGA_IrDA_ISR>
     734:	ea000006 	b	754 <__cs3_isr_irq+0x118>
		case 83:  FPGA_JP1_ISR(); break;
     738:	eb0001c7 	bl	e5c <FPGA_JP1_ISR>
     73c:	ea000004 	b	754 <__cs3_isr_irq+0x118>
		case 84:  FPGA_JP2_ISR(); break;
     740:	eb0001c6 	bl	e60 <FPGA_JP2_ISR>
     744:	ea000002 	b	754 <__cs3_isr_irq+0x118>
		case 89:  FPGA_PS2_DUAL_ISR(); break;
     748:	eb0001c5 	bl	e64 <FPGA_PS2_DUAL_ISR>
     74c:	ea000000 	b	754 <__cs3_isr_irq+0x118>
     750:	eafffffe 	b	750 <__cs3_isr_irq+0x114>
	
		default: while(1); break;
	}
	
	*((int *) (MPCORE_GIC_CPUIF + ICCEOIR)) = interrupt_ID;
     754:	e3e03a13 	mvn	r3, #77824	; 0x13000
     758:	e5034eef 	str	r4, [r3, #-3823]	; 0xfffff111
     75c:	e8fd903f 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r12, pc}^

00000760 <__cs3_reset>:
}

void __attribute__ ((interrupt)) __cs3_reset (void) {
     760:	eafffffe 	b	760 <__cs3_reset>

00000764 <__cs3_isr_undef>:
	while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void) {
     764:	eafffffe 	b	764 <__cs3_isr_undef>

00000768 <__cs3_isr_swi>:
	while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void) {
     768:	eafffffe 	b	768 <__cs3_isr_swi>

0000076c <__cs3_isr_pabort>:
	while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void) {
     76c:	eafffffe 	b	76c <__cs3_isr_pabort>

00000770 <__cs3_isr_dabort>:
	while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void) {
     770:	eafffffe 	b	770 <__cs3_isr_dabort>

00000774 <__cs3_isr_fiq>:
	while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void) {
     774:	eafffffe 	b	774 <__cs3_isr_fiq>

00000778 <fix_bug>:
	while(1);
}

void fix_bug() {
	volatile int * addr = (int *)0xFFFED198;
	*addr = 0x000C0000;
     778:	e3a02703 	mov	r2, #786432	; 0xc0000
     77c:	e3e03a12 	mvn	r3, #73728	; 0x12000
     780:	e5032e67 	str	r2, [r3, #-3687]	; 0xfffff199
     784:	e12fff1e 	bx	lr

00000788 <int_setup>:
}

void int_setup(int len, int* IDs) {
     788:	e92d4038 	push	{r3, r4, r5, lr}
     78c:	e1a05000 	mov	r5, r0
     790:	e1a04001 	mov	r4, r1
	disable_A9_interrupts();
     794:	ebffff7a 	bl	584 <disable_A9_interrupts>
	set_A9_IRQ_stack();
     798:	ebffff7f 	bl	59c <set_A9_IRQ_stack>
	fix_bug();
     79c:	ebfffff5 	bl	778 <fix_bug>
	config_GIC(len, IDs);
     7a0:	e1a00005 	mov	r0, r5
     7a4:	e1a01004 	mov	r1, r4
     7a8:	ebffff8f 	bl	5ec <config_GIC>
	enable_A9_interrupts();
     7ac:	ebffff77 	bl	590 <enable_A9_interrupts>
     7b0:	e8bd8038 	pop	{r3, r4, r5, pc}

000007b4 <handle_note_pressed_listener>:
#include "../inc/kbd_listener_util.h"

void handle_note_pressed_listener(int is_pressed[], int * is_break, char * read, int * ampl) {
	switch (*read) {
     7b4:	e5d22000 	ldrb	r2, [r2]
     7b8:	e352002a 	cmp	r2, #42	; 0x2a
     7bc:	0a000085 	beq	9d8 <ICDIPTR+0x1d8>
     7c0:	8a000013 	bhi	814 <ICDIPTR+0x14>
     7c4:	e352001c 	cmp	r2, #28
     7c8:	0a00002a 	beq	878 <ICDIPTR+0x78>
     7cc:	8a000005 	bhi	7e8 <handle_note_pressed_listener+0x34>
     7d0:	e352001a 	cmp	r2, #26
     7d4:	0a000067 	beq	978 <ICDIPTR+0x178>
     7d8:	8a00002e 	bhi	898 <ICDIPTR+0x98>
     7dc:	e3520016 	cmp	r2, #22
     7e0:	1a0000bf 	bne	ae4 <ICDIPTR+0x2e4>
     7e4:	ea00009b 	b	a58 <ICDIPTR+0x258>
     7e8:	e3520021 	cmp	r2, #33	; 0x21
     7ec:	0a000071 	beq	9b8 <ICDIPTR+0x1b8>
     7f0:	8a000002 	bhi	800 <ICDIPTR>
     7f4:	e352001e 	cmp	r2, #30
     7f8:	1a0000b9 	bne	ae4 <ICDIPTR+0x2e4>
     7fc:	ea0000a5 	b	a98 <ICDIPTR+0x298>
     800:	e3520022 	cmp	r2, #34	; 0x22
     804:	0a000063 	beq	998 <ICDIPTR+0x198>
     808:	e3520023 	cmp	r2, #35	; 0x23
     80c:	1a0000b4 	bne	ae4 <ICDIPTR+0x2e4>
     810:	ea000028 	b	8b8 <ICDIPTR+0xb8>
     814:	e352003b 	cmp	r2, #59	; 0x3b
     818:	0a000036 	beq	8f8 <ICDIPTR+0xf8>
     81c:	8a00000a 	bhi	84c <ICDIPTR+0x4c>
     820:	e3520031 	cmp	r2, #49	; 0x31
     824:	0a00007b 	beq	a18 <ICDIPTR+0x218>
     828:	8a000002 	bhi	838 <ICDIPTR+0x38>
     82c:	e352002b 	cmp	r2, #43	; 0x2b
     830:	1a0000ab 	bne	ae4 <ICDIPTR+0x2e4>
     834:	ea000027 	b	8d8 <ICDIPTR+0xd8>
     838:	e3520032 	cmp	r2, #50	; 0x32
     83c:	0a00006d 	beq	9f8 <ICDIPTR+0x1f8>
     840:	e352003a 	cmp	r2, #58	; 0x3a
     844:	1a0000a6 	bne	ae4 <ICDIPTR+0x2e4>
     848:	ea00007a 	b	a38 <ICDIPTR+0x238>
     84c:	e352004b 	cmp	r2, #75	; 0x4b
     850:	0a000038 	beq	938 <ICDIPTR+0x138>
     854:	8a000002 	bhi	864 <ICDIPTR+0x64>
     858:	e3520042 	cmp	r2, #66	; 0x42
     85c:	1a0000a0 	bne	ae4 <ICDIPTR+0x2e4>
     860:	ea00002c 	b	918 <ICDIPTR+0x118>
     864:	e352004c 	cmp	r2, #76	; 0x4c
     868:	0a00003a 	beq	958 <ICDIPTR+0x158>
     86c:	e35200f0 	cmp	r2, #240	; 0xf0
     870:	1a00009b 	bne	ae4 <ICDIPTR+0x2e4>
     874:	ea000097 	b	ad8 <ICDIPTR+0x2d8>
		case 0x1C: // A -> C
			if (*is_break) {
     878:	e5913000 	ldr	r3, [r1]
     87c:	e3530000 	cmp	r3, #0
				is_pressed[0] = 0;
     880:	13a03000 	movne	r3, #0
     884:	15803000 	strne	r3, [r0]
				*is_break = 0;
     888:	15813000 	strne	r3, [r1]
			} else {
				is_pressed[0] = 1;
     88c:	03a03001 	moveq	r3, #1
     890:	05803000 	streq	r3, [r0]
     894:	e12fff1e 	bx	lr
			}
			break;
		case 0x1B: // S -> D
			if (*is_break) {
     898:	e5913000 	ldr	r3, [r1]
     89c:	e3530000 	cmp	r3, #0
				is_pressed[1] = 0;
     8a0:	13a03000 	movne	r3, #0
     8a4:	15803004 	strne	r3, [r0, #4]
				*is_break = 0;
     8a8:	15813000 	strne	r3, [r1]
			} else {
				is_pressed[1] = 1;
     8ac:	03a03001 	moveq	r3, #1
     8b0:	05803004 	streq	r3, [r0, #4]
     8b4:	e12fff1e 	bx	lr
			}
			break;
		case 0x23: // D -> E
			if (*is_break) {
     8b8:	e5913000 	ldr	r3, [r1]
     8bc:	e3530000 	cmp	r3, #0
				is_pressed[2] = 0;
     8c0:	13a03000 	movne	r3, #0
     8c4:	15803008 	strne	r3, [r0, #8]
				*is_break = 0;
     8c8:	15813000 	strne	r3, [r1]
			} else {
				is_pressed[2] = 1;
     8cc:	03a03001 	moveq	r3, #1
     8d0:	05803008 	streq	r3, [r0, #8]
     8d4:	e12fff1e 	bx	lr
			}
			break;
		case 0x2B: // F -> F
			if (*is_break) {
     8d8:	e5913000 	ldr	r3, [r1]
     8dc:	e3530000 	cmp	r3, #0
				is_pressed[3] = 0;
     8e0:	13a03000 	movne	r3, #0
     8e4:	1580300c 	strne	r3, [r0, #12]
				*is_break = 0;
     8e8:	15813000 	strne	r3, [r1]
			} else {
				is_pressed[3] = 1;
     8ec:	03a03001 	moveq	r3, #1
     8f0:	0580300c 	streq	r3, [r0, #12]
     8f4:	e12fff1e 	bx	lr
			}
			break;
		case 0x3B: // J -> G
			if (*is_break) {
     8f8:	e5913000 	ldr	r3, [r1]
     8fc:	e3530000 	cmp	r3, #0
				is_pressed[4] = 0;
     900:	13a03000 	movne	r3, #0
     904:	15803010 	strne	r3, [r0, #16]
				*is_break = 0;
     908:	15813000 	strne	r3, [r1]
			} else {
				is_pressed[4] = 1;
     90c:	03a03001 	moveq	r3, #1
     910:	05803010 	streq	r3, [r0, #16]
     914:	e12fff1e 	bx	lr
			}
			break;
		case 0x42: // K -> A
			if (*is_break) {
     918:	e5913000 	ldr	r3, [r1]
     91c:	e3530000 	cmp	r3, #0
				is_pressed[5] = 0;
     920:	13a03000 	movne	r3, #0
     924:	15803014 	strne	r3, [r0, #20]
				*is_break = 0;
     928:	15813000 	strne	r3, [r1]
			} else {
				is_pressed[5] = 1;
     92c:	03a03001 	moveq	r3, #1
     930:	05803014 	streq	r3, [r0, #20]
     934:	e12fff1e 	bx	lr
			}
			break;
		case 0x4B: // L -> B
			if (*is_break) {
     938:	e5913000 	ldr	r3, [r1]
     93c:	e3530000 	cmp	r3, #0
				is_pressed[6] = 0;
     940:	13a03000 	movne	r3, #0
     944:	15803018 	strne	r3, [r0, #24]
				*is_break = 0;
     948:	15813000 	strne	r3, [r1]
			} else {
				is_pressed[6] = 1;
     94c:	03a03001 	moveq	r3, #1
     950:	05803018 	streq	r3, [r0, #24]
     954:	e12fff1e 	bx	lr
			}
			break;
		case 0x4C: // ; -> HC
			if (*is_break) {
     958:	e5913000 	ldr	r3, [r1]
     95c:	e3530000 	cmp	r3, #0
				is_pressed[7] = 0;
     960:	13a03000 	movne	r3, #0
     964:	1580301c 	strne	r3, [r0, #28]
				*is_break = 0;
     968:	15813000 	strne	r3, [r1]
			} else {
				is_pressed[7] = 1;
     96c:	03a03001 	moveq	r3, #1
     970:	0580301c 	streq	r3, [r0, #28]
     974:	e12fff1e 	bx	lr
			}
			break;
		case 0x1A: // Z -> HD
			if (*is_break) {
     978:	e5913000 	ldr	r3, [r1]
     97c:	e3530000 	cmp	r3, #0
				is_pressed[8] = 0;
     980:	13a03000 	movne	r3, #0
     984:	15803020 	strne	r3, [r0, #32]
				*is_break = 0;
     988:	15813000 	strne	r3, [r1]
			} else {
				is_pressed[8] = 1;
     98c:	03a03001 	moveq	r3, #1
     990:	05803020 	streq	r3, [r0, #32]
     994:	e12fff1e 	bx	lr
			}
			break;
		case 0x22: // X -> HE
			if (*is_break) {
     998:	e5913000 	ldr	r3, [r1]
     99c:	e3530000 	cmp	r3, #0
				is_pressed[9] = 0;
     9a0:	13a03000 	movne	r3, #0
     9a4:	15803024 	strne	r3, [r0, #36]	; 0x24
				*is_break = 0;
     9a8:	15813000 	strne	r3, [r1]
			} else {
				is_pressed[9] = 1;
     9ac:	03a03001 	moveq	r3, #1
     9b0:	05803024 	streq	r3, [r0, #36]	; 0x24
     9b4:	e12fff1e 	bx	lr
			}
			break;
		case 0x21: // C -> HF
			if (*is_break) {
     9b8:	e5913000 	ldr	r3, [r1]
     9bc:	e3530000 	cmp	r3, #0
				is_pressed[10] = 0;
     9c0:	13a03000 	movne	r3, #0
     9c4:	15803028 	strne	r3, [r0, #40]	; 0x28
				*is_break = 0;
     9c8:	15813000 	strne	r3, [r1]
			} else {
				is_pressed[10] = 1;
     9cc:	03a03001 	moveq	r3, #1
     9d0:	05803028 	streq	r3, [r0, #40]	; 0x28
     9d4:	e12fff1e 	bx	lr
			}
			break;
		case 0x2A: // V -> HG
			if (*is_break) {
     9d8:	e5913000 	ldr	r3, [r1]
     9dc:	e3530000 	cmp	r3, #0
				is_pressed[11] = 0;
     9e0:	13a03000 	movne	r3, #0
     9e4:	1580302c 	strne	r3, [r0, #44]	; 0x2c
				*is_break = 0;
     9e8:	15813000 	strne	r3, [r1]
			} else {
				is_pressed[11] = 1;
     9ec:	03a03001 	moveq	r3, #1
     9f0:	0580302c 	streq	r3, [r0, #44]	; 0x2c
     9f4:	e12fff1e 	bx	lr
			}
			break;
		case 0x32: // B -> HA
			if (*is_break) {
     9f8:	e5913000 	ldr	r3, [r1]
     9fc:	e3530000 	cmp	r3, #0
				is_pressed[12] = 0;
     a00:	13a03000 	movne	r3, #0
     a04:	15803030 	strne	r3, [r0, #48]	; 0x30
				*is_break = 0;
     a08:	15813000 	strne	r3, [r1]
			} else {
				is_pressed[12] = 1;
     a0c:	03a03001 	moveq	r3, #1
     a10:	05803030 	streq	r3, [r0, #48]	; 0x30
     a14:	e12fff1e 	bx	lr
			}
			break;
		case 0x31: // N -> HB
			if (*is_break) {
     a18:	e5913000 	ldr	r3, [r1]
     a1c:	e3530000 	cmp	r3, #0
				is_pressed[13] = 0;
     a20:	13a03000 	movne	r3, #0
     a24:	15803034 	strne	r3, [r0, #52]	; 0x34
				*is_break = 0;
     a28:	15813000 	strne	r3, [r1]
			} else {
				is_pressed[13] = 1;
     a2c:	03a03001 	moveq	r3, #1
     a30:	05803034 	streq	r3, [r0, #52]	; 0x34
     a34:	e12fff1e 	bx	lr
			}
			break;
		case 0x3A: // M -> HHC
			if (*is_break) {
     a38:	e5913000 	ldr	r3, [r1]
     a3c:	e3530000 	cmp	r3, #0
				is_pressed[14] = 0;
     a40:	13a03000 	movne	r3, #0
     a44:	15803038 	strne	r3, [r0, #56]	; 0x38
				*is_break = 0;
     a48:	15813000 	strne	r3, [r1]
			} else {
				is_pressed[14] = 1;
     a4c:	03a03001 	moveq	r3, #1
     a50:	05803038 	streq	r3, [r0, #56]	; 0x38
     a54:	e12fff1e 	bx	lr
			}
			break;
		case 0x16:
			if (*is_break) {
     a58:	e5912000 	ldr	r2, [r1]
     a5c:	e3520000 	cmp	r2, #0
     a60:	012fff1e 	bxeq	lr
				*ampl = (*ampl - 1) % 10;
     a64:	e5932000 	ldr	r2, [r3]
     a68:	e2422001 	sub	r2, r2, #1
     a6c:	e3060667 	movw	r0, #26215	; 0x6667
     a70:	e3460666 	movt	r0, #26214	; 0x6666
     a74:	e0c0c290 	smull	r12, r0, r0, r2
     a78:	e1a0cfc2 	asr	r12, r2, #31
     a7c:	e06c0140 	rsb	r0, r12, r0, asr #2
     a80:	e0800100 	add	r0, r0, r0, lsl #2
     a84:	e0422080 	sub	r2, r2, r0, lsl #1
     a88:	e5832000 	str	r2, [r3]
				*is_break = 0;
     a8c:	e3a03000 	mov	r3, #0
     a90:	e5813000 	str	r3, [r1]
     a94:	e12fff1e 	bx	lr
			}
			break;
		case 0x1E:
			if (*is_break) {
     a98:	e5912000 	ldr	r2, [r1]
     a9c:	e3520000 	cmp	r2, #0
     aa0:	012fff1e 	bxeq	lr
				*ampl = (*ampl + 1) % 10;
     aa4:	e5932000 	ldr	r2, [r3]
     aa8:	e2822001 	add	r2, r2, #1
     aac:	e3060667 	movw	r0, #26215	; 0x6667
     ab0:	e3460666 	movt	r0, #26214	; 0x6666
     ab4:	e0c0c290 	smull	r12, r0, r0, r2
     ab8:	e1a0cfc2 	asr	r12, r2, #31
     abc:	e06c0140 	rsb	r0, r12, r0, asr #2
     ac0:	e0800100 	add	r0, r0, r0, lsl #2
     ac4:	e0422080 	sub	r2, r2, r0, lsl #1
     ac8:	e5832000 	str	r2, [r3]
				*is_break = 0;
     acc:	e3a03000 	mov	r3, #0
     ad0:	e5813000 	str	r3, [r1]
     ad4:	e12fff1e 	bx	lr
			}
			break;
		case 0xF0:
			*is_break = 1;
     ad8:	e3a03001 	mov	r3, #1
     adc:	e5813000 	str	r3, [r1]
			break;
     ae0:	e12fff1e 	bx	lr
		default:
			*is_break = 0;
     ae4:	e3a03000 	mov	r3, #0
     ae8:	e5813000 	str	r3, [r1]
     aec:	e12fff1e 	bx	lr

00000af0 <clear_ispressed>:
const float NOTE_LOOKUP[] = {130.813, 146.832, 164.814, 174.614, 195.998, 220.000, 246.942, 261.626, 293.665, 329.628, 349.228, 391.995, 440.000, 493.883, 523.251};
const int NUM_NOTES = 15;

void clear_ispressed(char is_pressed[]) {
	int i;
	for (i = 0; i < NUM_NOTES; i++) is_pressed[i] = 0;
     af0:	e3a03000 	mov	r3, #0
     af4:	e1a02003 	mov	r2, r3
     af8:	e7c02003 	strb	r2, [r0, r3]
     afc:	e2833001 	add	r3, r3, #1
     b00:	e353000f 	cmp	r3, #15
     b04:	1afffffb 	bne	af8 <clear_ispressed+0x8>
}
     b08:	e12fff1e 	bx	lr

00000b0c <make_wave>:

int make_wave(int instant, float frequency) {
     b0c:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
     b10:	e1a04001 	mov	r4, r1
	int index = (int)(frequency * (float)instant) % SAMPLE_RATE;
     b14:	eb0006cf 	bl	2658 <__aeabi_i2f>
     b18:	e1a01004 	mov	r1, r4
     b1c:	eb000704 	bl	2734 <__aeabi_fmul>
     b20:	eb0007c1 	bl	2a2c <__aeabi_f2iz>
     b24:	e30179f1 	movw	r7, #6641	; 0x19f1
     b28:	e3407576 	movt	r7, #1398	; 0x576
     b2c:	e0c73097 	smull	r3, r7, r7, r0
     b30:	e1a03fc0 	asr	r3, r0, #31
     b34:	e0637547 	rsb	r7, r3, r7, asr #10
     b38:	e30b3b80 	movw	r3, #48000	; 0xbb80
     b3c:	e0670793 	mls	r7, r3, r7, r0
	float interpolation = (float)(index - (int)index);
	return (1.0 - interpolation) * (float)sine[(int)index] +
     b40:	e3026f88 	movw	r6, #12168	; 0x2f88
     b44:	e3406000 	movt	r6, #0
     b48:	e7960107 	ldr	r0, [r6, r7, lsl #2]
     b4c:	eb0006c1 	bl	2658 <__aeabi_i2f>
     b50:	eb0004e1 	bl	1edc <__aeabi_f2d>
     b54:	e1a04000 	mov	r4, r0
     b58:	e1a05001 	mov	r5, r1
				 (interpolation) * (float)sine[(int)index + 1];
     b5c:	e2877001 	add	r7, r7, #1
     b60:	e7960107 	ldr	r0, [r6, r7, lsl #2]
     b64:	eb0006bb 	bl	2658 <__aeabi_i2f>
     b68:	e3a01000 	mov	r1, #0
     b6c:	eb0006f0 	bl	2734 <__aeabi_fmul>
}

int make_wave(int instant, float frequency) {
	int index = (int)(frequency * (float)instant) % SAMPLE_RATE;
	float interpolation = (float)(index - (int)index);
	return (1.0 - interpolation) * (float)sine[(int)index] +
     b70:	eb0004d9 	bl	1edc <__aeabi_f2d>
     b74:	e1a02000 	mov	r2, r0
     b78:	e1a03001 	mov	r3, r1
     b7c:	e1a00004 	mov	r0, r4
     b80:	e1a01005 	mov	r1, r5
     b84:	eb0003fd 	bl	1b80 <__adddf3>
     b88:	eb000627 	bl	242c <__aeabi_d2iz>
				 (interpolation) * (float)sine[(int)index + 1];
}
     b8c:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}

00000b90 <synthesis_sound>:

void synthesis_sound(int * signal, int is_pressed[], int * instance, int volume) {
     b90:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
     b94:	e1a09000 	mov	r9, r0
     b98:	e1a07001 	mov	r7, r1
     b9c:	e1a08002 	mov	r8, r2
     ba0:	e1a0b003 	mov	r11, r3
     ba4:	e3a04000 	mov	r4, #0
	int i = 0, count_note = 0;
	int total = 0;
     ba8:	e1a06004 	mov	r6, r4
	return (1.0 - interpolation) * (float)sine[(int)index] +
				 (interpolation) * (float)sine[(int)index + 1];
}

void synthesis_sound(int * signal, int is_pressed[], int * instance, int volume) {
	int i = 0, count_note = 0;
     bac:	e1a05004 	mov	r5, r4
	int total = 0;
	for (i = 0; i < NUM_NOTES; i++) {
		if (is_pressed[i]) {
			total = total + make_wave(*instance, NOTE_LOOKUP[i]);
     bb0:	e302aee4 	movw	r10, #12004	; 0x2ee4
     bb4:	e340a000 	movt	r10, #0

void synthesis_sound(int * signal, int is_pressed[], int * instance, int volume) {
	int i = 0, count_note = 0;
	int total = 0;
	for (i = 0; i < NUM_NOTES; i++) {
		if (is_pressed[i]) {
     bb8:	e7973004 	ldr	r3, [r7, r4]
     bbc:	e3530000 	cmp	r3, #0
     bc0:	0a000004 	beq	bd8 <synthesis_sound+0x48>
			total = total + make_wave(*instance, NOTE_LOOKUP[i]);
     bc4:	e5980000 	ldr	r0, [r8]
     bc8:	e79a1004 	ldr	r1, [r10, r4]
     bcc:	ebffffce 	bl	b0c <make_wave>
     bd0:	e0866000 	add	r6, r6, r0
			count_note = count_note + 1;
     bd4:	e2855001 	add	r5, r5, #1
     bd8:	e2844004 	add	r4, r4, #4
}

void synthesis_sound(int * signal, int is_pressed[], int * instance, int volume) {
	int i = 0, count_note = 0;
	int total = 0;
	for (i = 0; i < NUM_NOTES; i++) {
     bdc:	e354003c 	cmp	r4, #60	; 0x3c
     be0:	1afffff4 	bne	bb8 <synthesis_sound+0x28>
		if (is_pressed[i]) {
			total = total + make_wave(*instance, NOTE_LOOKUP[i]);
			count_note = count_note + 1;
		}
	}
	if (count_note > 0) *signal = (total * volume) / (10 * count_note);
     be4:	e3550000 	cmp	r5, #0
     be8:	da000005 	ble	c04 <ICDICFR+0x4>
     bec:	e0851105 	add	r1, r5, r5, lsl #2
     bf0:	e000069b 	mul	r0, r11, r6
     bf4:	e1a01081 	lsl	r1, r1, #1
     bf8:	eb00038a 	bl	1a28 <__aeabi_idiv>
     bfc:	e5890000 	str	r0, [r9]
     c00:	ea000001 	b	c0c <ICDICFR+0xc>
	else *signal = 0;
     c04:	e3a03000 	mov	r3, #0
     c08:	e5893000 	str	r3, [r9]
    *instance = (*instance + 1) % 48000;
     c0c:	e5983000 	ldr	r3, [r8]
     c10:	e2833001 	add	r3, r3, #1
     c14:	e30129f1 	movw	r2, #6641	; 0x19f1
     c18:	e3402576 	movt	r2, #1398	; 0x576
     c1c:	e0c21392 	smull	r1, r2, r2, r3
     c20:	e1a01fc3 	asr	r1, r3, #31
     c24:	e0612542 	rsb	r2, r1, r2, asr #10
     c28:	e30b1b80 	movw	r1, #48000	; 0xbb80
     c2c:	e0633291 	mls	r3, r1, r2, r3
     c30:	e5883000 	str	r3, [r8]
     c34:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}

00000c38 <HEX_clear_ASM>:
     c38:	e3a01000 	mov	r1, #0
     c3c:	ea000004 	b	c54 <WRITE>

00000c40 <HEX_flood_ASM>:
     c40:	e3a0107f 	mov	r1, #127	; 0x7f
     c44:	ea000002 	b	c54 <WRITE>

00000c48 <HEX_write_ASM>:
     c48:	e59f2064 	ldr	r2, [pc, #100]	; cb4 <PATTERNS+0x14>
     c4c:	e7d21001 	ldrb	r1, [r2, r1]
     c50:	eaffffff 	b	c54 <WRITE>

00000c54 <WRITE>:
     c54:	e92d0030 	push	{r4, r5}
     c58:	e59f2058 	ldr	r2, [pc, #88]	; cb8 <PATTERNS+0x18>
     c5c:	e3a03000 	mov	r3, #0
     c60:	e3e050ff 	mvn	r5, #255	; 0xff

00000c64 <LOOP>:
     c64:	e3100001 	tst	r0, #1
     c68:	0a000003 	beq	c7c <CONTINUE>
     c6c:	e5924000 	ldr	r4, [r2]
     c70:	e0044005 	and	r4, r4, r5
     c74:	e1844001 	orr	r4, r4, r1
     c78:	e5824000 	str	r4, [r2]

00000c7c <CONTINUE>:
     c7c:	e1a05c65 	ror	r5, r5, #24
     c80:	e1a01c61 	ror	r1, r1, #24
     c84:	e2833001 	add	r3, r3, #1
     c88:	e3530004 	cmp	r3, #4
     c8c:	059f2028 	ldreq	r2, [pc, #40]	; cbc <PATTERNS+0x1c>
     c90:	e1b000a0 	lsrs	r0, r0, #1
     c94:	1afffff2 	bne	c64 <LOOP>
     c98:	e8bd0030 	pop	{r4, r5}
     c9c:	e12fff1e 	bx	lr

00000ca0 <PATTERNS>:
     ca0:	4f5b063f 	.word	0x4f5b063f
     ca4:	077d6d66 	.word	0x077d6d66
     ca8:	7c776f7f 	.word	0x7c776f7f
     cac:	71795e39 	.word	0x71795e39
     cb0:	000000ff 	.word	0x000000ff
     cb4:	00000ca0 	.word	0x00000ca0
     cb8:	ff200020 	.word	0xff200020
     cbc:	ff200030 	.word	0xff200030

00000cc0 <HPS_TIM_config_ASM>:
     cc0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
     cc4:	e3a01000 	mov	r1, #0
     cc8:	e3a02001 	mov	r2, #1
     ccc:	e5907000 	ldr	r7, [r0]
     cd0:	eaffffff 	b	cd4 <LOOP>

00000cd4 <LOOP>:
     cd4:	e1170112 	tst	r7, r2, lsl r1
     cd8:	0a000000 	beq	ce0 <CONTINUE>
     cdc:	eb000004 	bl	cf4 <CONFIG>

00000ce0 <CONTINUE>:
     ce0:	e2811001 	add	r1, r1, #1
     ce4:	e3510004 	cmp	r1, #4
     ce8:	bafffff9 	blt	cd4 <LOOP>

00000cec <DONE>:
     cec:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
     cf0:	e12fff1e 	bx	lr

00000cf4 <CONFIG>:
     cf4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     cf8:	e59f30e4 	ldr	r3, [pc, #228]	; de4 <HPS_TIM_BASE+0x10>
     cfc:	e7934101 	ldr	r4, [r3, r1, lsl #2]
     d00:	eb000005 	bl	d1c <DISABLE>
     d04:	eb000008 	bl	d2c <SET_LOAD_VAL>
     d08:	eb00000e 	bl	d48 <SET_LOAD_BIT>
     d0c:	eb000013 	bl	d60 <SET_INT_BIT>
     d10:	eb000019 	bl	d7c <SET_EN_BIT>
     d14:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     d18:	e12fff1e 	bx	lr

00000d1c <DISABLE>:
     d1c:	e5945008 	ldr	r5, [r4, #8]
     d20:	e3c55001 	bic	r5, r5, #1
     d24:	e5845008 	str	r5, [r4, #8]
     d28:	e12fff1e 	bx	lr

00000d2c <SET_LOAD_VAL>:
     d2c:	e5905004 	ldr	r5, [r0, #4]
     d30:	e3a06019 	mov	r6, #25
     d34:	e0050695 	mul	r5, r5, r6
     d38:	e3510002 	cmp	r1, #2
     d3c:	b1a05105 	lsllt	r5, r5, #2
     d40:	e5845000 	str	r5, [r4]
     d44:	e12fff1e 	bx	lr

00000d48 <SET_LOAD_BIT>:
     d48:	e5945008 	ldr	r5, [r4, #8]
     d4c:	e5906008 	ldr	r6, [r0, #8]
     d50:	e3c55002 	bic	r5, r5, #2
     d54:	e1855086 	orr	r5, r5, r6, lsl #1
     d58:	e5845008 	str	r5, [r4, #8]
     d5c:	e12fff1e 	bx	lr

00000d60 <SET_INT_BIT>:
     d60:	e5945008 	ldr	r5, [r4, #8]
     d64:	e590600c 	ldr	r6, [r0, #12]
     d68:	e2266001 	eor	r6, r6, #1
     d6c:	e3c55004 	bic	r5, r5, #4
     d70:	e1855106 	orr	r5, r5, r6, lsl #2
     d74:	e5845008 	str	r5, [r4, #8]
     d78:	e12fff1e 	bx	lr

00000d7c <SET_EN_BIT>:
     d7c:	e5945008 	ldr	r5, [r4, #8]
     d80:	e5906010 	ldr	r6, [r0, #16]
     d84:	e3c55001 	bic	r5, r5, #1
     d88:	e1855006 	orr	r5, r5, r6
     d8c:	e5845008 	str	r5, [r4, #8]
     d90:	e12fff1e 	bx	lr

00000d94 <HPS_TIM_clear_INT_ASM>:
     d94:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     d98:	e3a01000 	mov	r1, #0
     d9c:	e3a02001 	mov	r2, #1
     da0:	eaffffff 	b	da4 <INT_LOOP>

00000da4 <INT_LOOP>:
     da4:	e1100112 	tst	r0, r2, lsl r1
     da8:	0a000000 	beq	db0 <INT_CONTINUE>
     dac:	eb000004 	bl	dc4 <CLEAR_IT>

00000db0 <INT_CONTINUE>:
     db0:	e2811001 	add	r1, r1, #1
     db4:	e3510004 	cmp	r1, #4
     db8:	bafffff9 	blt	da4 <INT_LOOP>

00000dbc <INT_DONE>:
     dbc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     dc0:	e12fff1e 	bx	lr

00000dc4 <CLEAR_IT>:
     dc4:	e59f3018 	ldr	r3, [pc, #24]	; de4 <HPS_TIM_BASE+0x10>
     dc8:	e7933101 	ldr	r3, [r3, r1, lsl #2]
     dcc:	e593300c 	ldr	r3, [r3, #12]
     dd0:	e12fff1e 	bx	lr

00000dd4 <HPS_TIM_BASE>:
     dd4:	ffc08000 	.word	0xffc08000
     dd8:	ffc09000 	.word	0xffc09000
     ddc:	ffd00000 	.word	0xffd00000
     de0:	ffd01000 	.word	0xffd01000
     de4:	00000dd4 	.word	0x00000dd4

00000de8 <hps_tim0_int_flag>:
     de8:	00000000 	.word	0x00000000

00000dec <hps_tim1_int_flag>:
     dec:	00000000 	.word	0x00000000

00000df0 <pushbtn_int_flag>:
     df0:	00000000 	.word	0x00000000

00000df4 <A9_PRIV_TIM_ISR>:

pushbtn_int_flag:   
	.word 0x0

A9_PRIV_TIM_ISR:
	BX LR
     df4:	e12fff1e 	bx	lr

00000df8 <HPS_GPIO1_ISR>:
	
HPS_GPIO1_ISR:
	BX LR
     df8:	e12fff1e 	bx	lr

00000dfc <HPS_TIM0_ISR>:
	
HPS_TIM0_ISR:
	PUSH {LR}
     dfc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    MOV R0, #0x1
     e00:	e3a00001 	mov	r0, #1
    BL HPS_TIM_clear_INT_ASM
     e04:	ebffffe2 	bl	d94 <HPS_TIM_clear_INT_ASM>
    LDR R0, =hps_tim0_int_flag
     e08:	e59f0058 	ldr	r0, [pc, #88]	; e68 <FPGA_PS2_DUAL_ISR+0x4>
    MOV R1, #1
     e0c:	e3a01001 	mov	r1, #1
    STR R1, [R0]
     e10:	e5801000 	str	r1, [r0]
    POP {LR}
     e14:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     e18:	e12fff1e 	bx	lr

00000e1c <HPS_TIM1_ISR>:
	
HPS_TIM1_ISR:
	PUSH {LR}
     e1c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    MOV R0, #0b0010
     e20:	e3a00002 	mov	r0, #2
    BL HPS_TIM_clear_INT_ASM
     e24:	ebffffda 	bl	d94 <HPS_TIM_clear_INT_ASM>
    LDR R0, =hps_tim1_int_flag
     e28:	e59f003c 	ldr	r0, [pc, #60]	; e6c <FPGA_PS2_DUAL_ISR+0x8>
    MOV R1, #1
     e2c:	e3a01001 	mov	r1, #1
    STR R1, [R0]
     e30:	e5801000 	str	r1, [r0]
    POP {LR}
     e34:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     e38:	e12fff1e 	bx	lr

00000e3c <HPS_TIM2_ISR>:
	
HPS_TIM2_ISR:
	BX LR
     e3c:	e12fff1e 	bx	lr

00000e40 <HPS_TIM3_ISR>:
	
HPS_TIM3_ISR:
	BX LR
     e40:	e12fff1e 	bx	lr

00000e44 <FPGA_INTERVAL_TIM_ISR>:
	
FPGA_INTERVAL_TIM_ISR:
	BX LR
     e44:	e12fff1e 	bx	lr

00000e48 <FPGA_PB_KEYS_ISR>:
	
FPGA_PB_KEYS_ISR:
	BX LR
     e48:	e12fff1e 	bx	lr

00000e4c <FPGA_Audio_ISR>:
	
FPGA_Audio_ISR:
	BX LR
     e4c:	e12fff1e 	bx	lr

00000e50 <FPGA_PS2_ISR>:
	
FPGA_PS2_ISR:
	BX LR
     e50:	e12fff1e 	bx	lr

00000e54 <FPGA_JTAG_ISR>:
	
FPGA_JTAG_ISR:
	BX LR
     e54:	e12fff1e 	bx	lr

00000e58 <FPGA_IrDA_ISR>:
	
FPGA_IrDA_ISR:
	BX LR
     e58:	e12fff1e 	bx	lr

00000e5c <FPGA_JP1_ISR>:
	
FPGA_JP1_ISR:
	BX LR
     e5c:	e12fff1e 	bx	lr

00000e60 <FPGA_JP2_ISR>:
	
FPGA_JP2_ISR:
	BX LR
     e60:	e12fff1e 	bx	lr

00000e64 <FPGA_PS2_DUAL_ISR>:
	
FPGA_PS2_DUAL_ISR:
	BX LR
     e64:	e12fff1e 	bx	lr
	
HPS_TIM0_ISR:
	PUSH {LR}
    MOV R0, #0x1
    BL HPS_TIM_clear_INT_ASM
    LDR R0, =hps_tim0_int_flag
     e68:	00000de8 	.word	0x00000de8
	
HPS_TIM1_ISR:
	PUSH {LR}
    MOV R0, #0b0010
    BL HPS_TIM_clear_INT_ASM
    LDR R0, =hps_tim1_int_flag
     e6c:	00000dec 	.word	0x00000dec

00000e70 <read_LEDs_ASM>:
     e70:	e59f1010 	ldr	r1, [pc, #16]	; e88 <write_LEDs_ASM+0xc>
     e74:	e5910000 	ldr	r0, [r1]
     e78:	e12fff1e 	bx	lr

00000e7c <write_LEDs_ASM>:
     e7c:	e59f1004 	ldr	r1, [pc, #4]	; e88 <write_LEDs_ASM+0xc>
     e80:	e5810000 	str	r0, [r1]
     e84:	e12fff1e 	bx	lr
     e88:	ff200000 	.word	0xff200000

00000e8c <audio_read_data_ASM>:
     e8c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     e90:	e92d0003 	push	{r0, r1}
     e94:	eb000093 	bl	10e8 <audio_read_ralc_ASM>
     e98:	e3500000 	cmp	r0, #0
     e9c:	08bd0003 	popeq	{r0, r1}
     ea0:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     ea4:	03a00000 	moveq	r0, #0
     ea8:	012fff1e 	bxeq	lr
     eac:	eb000092 	bl	10fc <audio_read_rarc_ASM>
     eb0:	e3500000 	cmp	r0, #0
     eb4:	08bd0003 	popeq	{r0, r1}
     eb8:	03a00000 	moveq	r0, #0
     ebc:	012fff1e 	bxeq	lr
     ec0:	e8bd0003 	pop	{r0, r1}
     ec4:	e59f2240 	ldr	r2, [pc, #576]	; 110c <audio_read_rarc_ASM+0x10>
     ec8:	e5922000 	ldr	r2, [r2]
     ecc:	e5802000 	str	r2, [r0]
     ed0:	e59f3238 	ldr	r3, [pc, #568]	; 1110 <audio_read_rarc_ASM+0x14>
     ed4:	e5933000 	ldr	r3, [r3]
     ed8:	e5813000 	str	r3, [r1]
     edc:	e3a00001 	mov	r0, #1

00000ee0 <audio_read_leftdata_ASM>:
     ee0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     ee4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     ee8:	eb00007e 	bl	10e8 <audio_read_ralc_ASM>
     eec:	e3500000 	cmp	r0, #0
     ef0:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     ef4:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     ef8:	03a00000 	moveq	r0, #0
     efc:	012fff1e 	bxeq	lr
     f00:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     f04:	e59f2200 	ldr	r2, [pc, #512]	; 110c <audio_read_rarc_ASM+0x10>
     f08:	e5922000 	ldr	r2, [r2]
     f0c:	e5802000 	str	r2, [r0]
     f10:	e3a00001 	mov	r0, #1
     f14:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     f18:	e12fff1e 	bx	lr

00000f1c <audio_read_rightdata_ASM>:
     f1c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     f20:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     f24:	eb000074 	bl	10fc <audio_read_rarc_ASM>
     f28:	e3500000 	cmp	r0, #0
     f2c:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     f30:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     f34:	03a00000 	moveq	r0, #0
     f38:	012fff1e 	bxeq	lr
     f3c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     f40:	e59f21c8 	ldr	r2, [pc, #456]	; 1110 <audio_read_rarc_ASM+0x14>
     f44:	e5922000 	ldr	r2, [r2]
     f48:	e5802000 	str	r2, [r0]
     f4c:	e3a00001 	mov	r0, #1
     f50:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     f54:	e12fff1e 	bx	lr

00000f58 <audio_write_data_ASM>:
     f58:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     f5c:	e92d0003 	push	{r0, r1}
     f60:	eb000056 	bl	10c0 <audio_read_wslc_ASM>
     f64:	e3500000 	cmp	r0, #0
     f68:	08bd0003 	popeq	{r0, r1}
     f6c:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     f70:	03a00000 	moveq	r0, #0
     f74:	012fff1e 	bxeq	lr
     f78:	eb000055 	bl	10d4 <audio_read_wsrc_ASM>
     f7c:	e3500000 	cmp	r0, #0
     f80:	08bd0003 	popeq	{r0, r1}
     f84:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     f88:	03a00000 	moveq	r0, #0
     f8c:	012fff1e 	bxeq	lr
     f90:	e8bd0003 	pop	{r0, r1}
     f94:	e59f2170 	ldr	r2, [pc, #368]	; 110c <audio_read_rarc_ASM+0x10>
     f98:	e5820000 	str	r0, [r2]
     f9c:	e59f316c 	ldr	r3, [pc, #364]	; 1110 <audio_read_rarc_ASM+0x14>
     fa0:	e5831000 	str	r1, [r3]
     fa4:	e3a00001 	mov	r0, #1
     fa8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     fac:	e12fff1e 	bx	lr

00000fb0 <audio_write_leftdata_ASM>:
     fb0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     fb4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     fb8:	eb000040 	bl	10c0 <audio_read_wslc_ASM>
     fbc:	e3500000 	cmp	r0, #0
     fc0:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     fc4:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     fc8:	03a00000 	moveq	r0, #0
     fcc:	012fff1e 	bxeq	lr
     fd0:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     fd4:	e59f2130 	ldr	r2, [pc, #304]	; 110c <audio_read_rarc_ASM+0x10>
     fd8:	e5820000 	str	r0, [r2]
     fdc:	e3a00001 	mov	r0, #1
     fe0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     fe4:	e12fff1e 	bx	lr

00000fe8 <audio_write_rightdata_ASM>:
     fe8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     fec:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     ff0:	eb000037 	bl	10d4 <audio_read_wsrc_ASM>
     ff4:	e3500000 	cmp	r0, #0
     ff8:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     ffc:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
    1000:	03a00000 	moveq	r0, #0
    1004:	012fff1e 	bxeq	lr
    1008:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    100c:	e59f20fc 	ldr	r2, [pc, #252]	; 1110 <audio_read_rarc_ASM+0x14>
    1010:	e5820000 	str	r0, [r2]
    1014:	e3a00001 	mov	r0, #1
    1018:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    101c:	e12fff1e 	bx	lr

00001020 <audio_enable_read_fifo_clear_ASM>:
    1020:	e59f00ec 	ldr	r0, [pc, #236]	; 1114 <audio_read_rarc_ASM+0x18>
    1024:	e5901000 	ldr	r1, [r0]
    1028:	e3811004 	orr	r1, r1, #4
    102c:	e5801000 	str	r1, [r0]
    1030:	e12fff1e 	bx	lr

00001034 <audio_enable_write_fifo_clear_ASM>:
    1034:	e59f00d8 	ldr	r0, [pc, #216]	; 1114 <audio_read_rarc_ASM+0x18>
    1038:	e5901000 	ldr	r1, [r0]
    103c:	e3811008 	orr	r1, r1, #8
    1040:	e5801000 	str	r1, [r0]
    1044:	e12fff1e 	bx	lr

00001048 <audio_disable_read_fifo_clear_ASM>:
    1048:	e59f00c4 	ldr	r0, [pc, #196]	; 1114 <audio_read_rarc_ASM+0x18>
    104c:	e5901000 	ldr	r1, [r0]
    1050:	e3c11004 	bic	r1, r1, #4
    1054:	e5801000 	str	r1, [r0]
    1058:	e12fff1e 	bx	lr

0000105c <audio_disable_write_fifo_clear_ASM>:
    105c:	e59f00b0 	ldr	r0, [pc, #176]	; 1114 <audio_read_rarc_ASM+0x18>
    1060:	e5901000 	ldr	r1, [r0]
    1064:	e3c11008 	bic	r1, r1, #8
    1068:	e5801000 	str	r1, [r0]
    106c:	e12fff1e 	bx	lr

00001070 <audio_enable_read_int_ASM>:
    1070:	e59f009c 	ldr	r0, [pc, #156]	; 1114 <audio_read_rarc_ASM+0x18>
    1074:	e5901000 	ldr	r1, [r0]
    1078:	e3811001 	orr	r1, r1, #1
    107c:	e5801000 	str	r1, [r0]
    1080:	e12fff1e 	bx	lr

00001084 <audio_enable_write_int_ASM>:
    1084:	e59f0088 	ldr	r0, [pc, #136]	; 1114 <audio_read_rarc_ASM+0x18>
    1088:	e5901000 	ldr	r1, [r0]
    108c:	e3811002 	orr	r1, r1, #2
    1090:	e5801000 	str	r1, [r0]
    1094:	e12fff1e 	bx	lr

00001098 <audio_disable_read_int_ASM>:
    1098:	e59f0074 	ldr	r0, [pc, #116]	; 1114 <audio_read_rarc_ASM+0x18>
    109c:	e5901000 	ldr	r1, [r0]
    10a0:	e3c11001 	bic	r1, r1, #1
    10a4:	e5801000 	str	r1, [r0]
    10a8:	e12fff1e 	bx	lr

000010ac <audio_disable_write_int_ASM>:
    10ac:	e59f0060 	ldr	r0, [pc, #96]	; 1114 <audio_read_rarc_ASM+0x18>
    10b0:	e5901000 	ldr	r1, [r0]
    10b4:	e3c11002 	bic	r1, r1, #2
    10b8:	e5801000 	str	r1, [r0]
    10bc:	e12fff1e 	bx	lr

000010c0 <audio_read_wslc_ASM>:
    10c0:	e59f0050 	ldr	r0, [pc, #80]	; 1118 <audio_read_rarc_ASM+0x1c>
    10c4:	e5900000 	ldr	r0, [r0]
    10c8:	e1a00c20 	lsr	r0, r0, #24
    10cc:	e20000ff 	and	r0, r0, #255	; 0xff
    10d0:	e12fff1e 	bx	lr

000010d4 <audio_read_wsrc_ASM>:
    10d4:	e59f003c 	ldr	r0, [pc, #60]	; 1118 <audio_read_rarc_ASM+0x1c>
    10d8:	e5900000 	ldr	r0, [r0]
    10dc:	e1a00820 	lsr	r0, r0, #16
    10e0:	e20000ff 	and	r0, r0, #255	; 0xff
    10e4:	e12fff1e 	bx	lr

000010e8 <audio_read_ralc_ASM>:
    10e8:	e59f0028 	ldr	r0, [pc, #40]	; 1118 <audio_read_rarc_ASM+0x1c>
    10ec:	e5900000 	ldr	r0, [r0]
    10f0:	e1a00420 	lsr	r0, r0, #8
    10f4:	e20000ff 	and	r0, r0, #255	; 0xff
    10f8:	e12fff1e 	bx	lr

000010fc <audio_read_rarc_ASM>:
    10fc:	e59f0014 	ldr	r0, [pc, #20]	; 1118 <audio_read_rarc_ASM+0x1c>
    1100:	e5900000 	ldr	r0, [r0]
    1104:	e20000ff 	and	r0, r0, #255	; 0xff
    1108:	e12fff1e 	bx	lr
    110c:	ff203048 	.word	0xff203048
    1110:	ff20304c 	.word	0xff20304c
    1114:	ff203040 	.word	0xff203040
    1118:	ff203044 	.word	0xff203044

0000111c <read_ps2_data_ASM>:
    111c:	e59f114c 	ldr	r1, [pc, #332]	; 1270 <ps2_fifo_ravail+0x4>
    1120:	e5911000 	ldr	r1, [r1]
    1124:	e3a02902 	mov	r2, #32768	; 0x8000
    1128:	e1110002 	tst	r1, r2
    112c:	03a00000 	moveq	r0, #0
    1130:	012fff1e 	bxeq	lr
    1134:	e20120ff 	and	r2, r1, #255	; 0xff
    1138:	e5c02000 	strb	r2, [r0]
    113c:	e59f2130 	ldr	r2, [pc, #304]	; 1274 <ps2_fifo_ravail+0x8>
    1140:	e0010002 	and	r0, r1, r2
    1144:	e1a00820 	lsr	r0, r0, #16
    1148:	e12fff1e 	bx	lr

0000114c <enable_ps2_int_ASM>:
    114c:	e59f011c 	ldr	r0, [pc, #284]	; 1270 <ps2_fifo_ravail+0x4>
    1150:	e3a01001 	mov	r1, #1
    1154:	e5c01004 	strb	r1, [r0, #4]
    1158:	e12fff1e 	bx	lr

0000115c <disable_ps2_int_ASM>:
    115c:	e59f010c 	ldr	r0, [pc, #268]	; 1270 <ps2_fifo_ravail+0x4>
    1160:	e3a01000 	mov	r1, #0
    1164:	e5c01004 	strb	r1, [r0, #4]
    1168:	e12fff1e 	bx	lr

0000116c <ps2_fifo_data>:
	...

0000126c <ps2_fifo_ravail>:
    126c:	00000000 	.word	0x00000000
    1270:	ff200100 	.word	0xff200100
    1274:	ffff0000 	.word	0xffff0000

00001278 <read_PB_data_ASM>:
    1278:	e59f1074 	ldr	r1, [pc, #116]	; 12f4 <disable_PB_INT_ASM+0x14>
    127c:	e5910000 	ldr	r0, [r1]
    1280:	e12fff1e 	bx	lr

00001284 <PB_data_is_pressed_ASM>:
    1284:	e59f1068 	ldr	r1, [pc, #104]	; 12f4 <disable_PB_INT_ASM+0x14>
    1288:	e5912000 	ldr	r2, [r1]
    128c:	e0000002 	and	r0, r0, r2
    1290:	e3300000 	teq	r0, #0
    1294:	13a00001 	movne	r0, #1
    1298:	e12fff1e 	bx	lr

0000129c <read_PB_edgecap_ASM>:
    129c:	e59f1054 	ldr	r1, [pc, #84]	; 12f8 <disable_PB_INT_ASM+0x18>
    12a0:	e5910000 	ldr	r0, [r1]
    12a4:	e12fff1e 	bx	lr

000012a8 <PB_edgecap_is_pressed_ASM>:
    12a8:	e59f1048 	ldr	r1, [pc, #72]	; 12f8 <disable_PB_INT_ASM+0x18>
    12ac:	e5912000 	ldr	r2, [r1]
    12b0:	e0000002 	and	r0, r0, r2
    12b4:	e3300000 	teq	r0, #0
    12b8:	13a00001 	movne	r0, #1
    12bc:	e12fff1e 	bx	lr

000012c0 <PB_clear_edgecp_ASM>:
    12c0:	e59f1030 	ldr	r1, [pc, #48]	; 12f8 <disable_PB_INT_ASM+0x18>
    12c4:	e5810000 	str	r0, [r1]
    12c8:	e12fff1e 	bx	lr

000012cc <enable_PB_INT_ASM>:
    12cc:	e59f1028 	ldr	r1, [pc, #40]	; 12fc <disable_PB_INT_ASM+0x1c>
    12d0:	e5912000 	ldr	r2, [r1]
    12d4:	e1800002 	orr	r0, r0, r2
    12d8:	e5810000 	str	r0, [r1]
    12dc:	e12fff1e 	bx	lr

000012e0 <disable_PB_INT_ASM>:
    12e0:	e59f1014 	ldr	r1, [pc, #20]	; 12fc <disable_PB_INT_ASM+0x1c>
    12e4:	e5912000 	ldr	r2, [r1]
    12e8:	e1c00002 	bic	r0, r0, r2
    12ec:	e5810000 	str	r0, [r1]
    12f0:	e12fff1e 	bx	lr
    12f4:	ff200050 	.word	0xff200050
    12f8:	ff20005c 	.word	0xff20005c
    12fc:	ff200058 	.word	0xff200058

00001300 <read_slider_switches_ASM>:
    1300:	e59f1004 	ldr	r1, [pc, #4]	; 130c <read_slider_switches_ASM+0xc>
    1304:	e5910000 	ldr	r0, [r1]
    1308:	e12fff1e 	bx	lr
    130c:	ff200040 	.word	0xff200040

00001310 <VGA_clear_charbuff_ASM>:
    1310:	e92d0030 	push	{r4, r5}
    1314:	e3a02000 	mov	r2, #0
    1318:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    131c:	e3a00000 	mov	r0, #0

00001320 <CHAR_LOOPX>:
    1320:	e3a01000 	mov	r1, #0
    1324:	e0834000 	add	r4, r3, r0

00001328 <CHAR_LOOPY>:
    1328:	e0845381 	add	r5, r4, r1, lsl #7
    132c:	e5c52000 	strb	r2, [r5]
    1330:	e2811001 	add	r1, r1, #1
    1334:	e351003c 	cmp	r1, #60	; 0x3c
    1338:	bafffffa 	blt	1328 <CHAR_LOOPY>
    133c:	e2800001 	add	r0, r0, #1
    1340:	e3500050 	cmp	r0, #80	; 0x50
    1344:	bafffff5 	blt	1320 <CHAR_LOOPX>
    1348:	e8bd0030 	pop	{r4, r5}
    134c:	e12fff1e 	bx	lr

00001350 <VGA_clear_pixelbuff_ASM>:
    1350:	e92d0030 	push	{r4, r5}
    1354:	e3a02000 	mov	r2, #0
    1358:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
    135c:	e3a00000 	mov	r0, #0

00001360 <PIXEL_LOOPX>:
    1360:	e3a01000 	mov	r1, #0
    1364:	e0834080 	add	r4, r3, r0, lsl #1

00001368 <PIXEL_LOOPY>:
    1368:	e0845501 	add	r5, r4, r1, lsl #10
    136c:	e1c520b0 	strh	r2, [r5]
    1370:	e2811001 	add	r1, r1, #1
    1374:	e35100f0 	cmp	r1, #240	; 0xf0
    1378:	bafffffa 	blt	1368 <PIXEL_LOOPY>
    137c:	e2800001 	add	r0, r0, #1
    1380:	e3500d05 	cmp	r0, #320	; 0x140
    1384:	bafffff5 	blt	1360 <PIXEL_LOOPX>
    1388:	e8bd0030 	pop	{r4, r5}
    138c:	e12fff1e 	bx	lr

00001390 <VGA_write_char_ASM>:
    1390:	e3500000 	cmp	r0, #0
    1394:	b12fff1e 	bxlt	lr
    1398:	e3510000 	cmp	r1, #0
    139c:	b12fff1e 	bxlt	lr
    13a0:	e350004f 	cmp	r0, #79	; 0x4f
    13a4:	c12fff1e 	bxgt	lr
    13a8:	e351003b 	cmp	r1, #59	; 0x3b
    13ac:	c12fff1e 	bxgt	lr
    13b0:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    13b4:	e0833000 	add	r3, r3, r0
    13b8:	e0833381 	add	r3, r3, r1, lsl #7
    13bc:	e5c32000 	strb	r2, [r3]
    13c0:	e12fff1e 	bx	lr

000013c4 <VGA_write_byte_ASM>:
    13c4:	e3500000 	cmp	r0, #0
    13c8:	b12fff1e 	bxlt	lr
    13cc:	e3510000 	cmp	r1, #0
    13d0:	b12fff1e 	bxlt	lr
    13d4:	e350004e 	cmp	r0, #78	; 0x4e
    13d8:	c12fff1e 	bxgt	lr
    13dc:	e351003b 	cmp	r1, #59	; 0x3b
    13e0:	c12fff1e 	bxgt	lr
    13e4:	e92d0030 	push	{r4, r5}
    13e8:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
    13ec:	e20250f0 	and	r5, r2, #240	; 0xf0
    13f0:	e1a05225 	lsr	r5, r5, #4
    13f4:	e202400f 	and	r4, r2, #15
    13f8:	e59f2068 	ldr	r2, [pc, #104]	; 1468 <HEX_ASCII+0x10>
    13fc:	e7d25005 	ldrb	r5, [r2, r5]
    1400:	e7d24004 	ldrb	r4, [r2, r4]
    1404:	e0833000 	add	r3, r3, r0
    1408:	e0833381 	add	r3, r3, r1, lsl #7
    140c:	e5c35000 	strb	r5, [r3]
    1410:	e2833001 	add	r3, r3, #1
    1414:	e5c34000 	strb	r4, [r3]
    1418:	e8bd0030 	pop	{r4, r5}
    141c:	e12fff1e 	bx	lr

00001420 <VGA_draw_point_ASM>:
    1420:	e59f3044 	ldr	r3, [pc, #68]	; 146c <HEX_ASCII+0x14>
    1424:	e3500000 	cmp	r0, #0
    1428:	b12fff1e 	bxlt	lr
    142c:	e3510000 	cmp	r1, #0
    1430:	b12fff1e 	bxlt	lr
    1434:	e1500003 	cmp	r0, r3
    1438:	c12fff1e 	bxgt	lr
    143c:	e35100ef 	cmp	r1, #239	; 0xef
    1440:	c12fff1e 	bxgt	lr
    1444:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
    1448:	e0833080 	add	r3, r3, r0, lsl #1
    144c:	e0833501 	add	r3, r3, r1, lsl #10
    1450:	e1c320b0 	strh	r2, [r3]
    1454:	e12fff1e 	bx	lr

00001458 <HEX_ASCII>:
    1458:	33323130 	.word	0x33323130
    145c:	37363534 	.word	0x37363534
    1460:	42413938 	.word	0x42413938
    1464:	46454443 	.word	0x46454443
    1468:	00001458 	.word	0x00001458
    146c:	0000013f 	.word	0x0000013f

00001470 <main>:
#include "./drivers/inc/sound_util.h"
#include "./drivers/inc/kbd_listener_util.h"

#define RENDER_FREQ 5

int main() {
    1470:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1474:	e28db020 	add	r11, sp, #32
    1478:	e24dd04c 	sub	sp, sp, #76	; 0x4c

	// Application States declearation
	int display[VGA_COL_LEN];
    147c:	e3023eac 	movw	r3, #11948	; 0x2eac
    1480:	e3403000 	movt	r3, #0
    1484:	e5932000 	ldr	r2, [r3]
    1488:	e1a02102 	lsl	r2, r2, #2
    148c:	e282200a 	add	r2, r2, #10
    1490:	e3c22007 	bic	r2, r2, #7
    1494:	e04dd002 	sub	sp, sp, r2
    1498:	e50bd060 	str	sp, [r11, #-96]	; 0xffffffa0
	char is_specific_btn_pressed[NUM_NOTES];
    149c:	e3023f20 	movw	r3, #12064	; 0x2f20
    14a0:	e3403000 	movt	r3, #0
    14a4:	e5937000 	ldr	r7, [r3]
    14a8:	e2873007 	add	r3, r7, #7
    14ac:	e3c33007 	bic	r3, r3, #7
    14b0:	e04dd003 	sub	sp, sp, r3
    14b4:	e1a0400d 	mov	r4, sp
    14b8:	e1a0600d 	mov	r6, sp
	int current_pixels[VGA_COL_LEN];
    14bc:	e04dd002 	sub	sp, sp, r2
	int is_break = 0;
	int ampl = 5;
	int instance = 0;

	// Application States initiallization
	clear_signal(display, current_pixels);
    14c0:	e51b0060 	ldr	r0, [r11, #-96]	; 0xffffffa0
    14c4:	e1a0100d 	mov	r1, sp
    14c8:	ebfffb63 	bl	25c <clear_signal>
	clear_ispressed(is_specific_btn_pressed);
    14cc:	e50b4068 	str	r4, [r11, #-104]	; 0xffffff98
    14d0:	e1a00004 	mov	r0, r4
    14d4:	ebfffd85 	bl	af0 <clear_ispressed>
	VGA_clear_charbuff_ASM();
    14d8:	ebffff8c 	bl	1310 <VGA_clear_charbuff_ASM>

	// Transfer Variables
	int signal = 0;
	char to_read = 0;
    14dc:	e3a04000 	mov	r4, #0
    14e0:	e54b4029 	strb	r4, [r11, #-41]	; 0xffffffd7

	// Interrupt Timer for Sampling
	int_setup(1, (int []){199});
    14e4:	e24b1024 	sub	r1, r11, #36	; 0x24
    14e8:	e3a030c7 	mov	r3, #199	; 0xc7
    14ec:	e5213004 	str	r3, [r1, #-4]!
    14f0:	e3a00001 	mov	r0, #1
    14f4:	ebfffca3 	bl	788 <int_setup>

	HPS_TIM_config_t hps_tim_aud;

	hps_tim_aud.tim = TIM0;
    14f8:	e3a03001 	mov	r3, #1
    14fc:	e54b3044 	strb	r3, [r11, #-68]	; 0xffffffbc
	hps_tim_aud.timeout = 20;
    1500:	e3a02014 	mov	r2, #20
    1504:	e50b2040 	str	r2, [r11, #-64]	; 0xffffffc0
	hps_tim_aud.LD_en = 1;
    1508:	e50b303c 	str	r3, [r11, #-60]	; 0xffffffc4
	hps_tim_aud.INT_en = 1;
    150c:	e50b3038 	str	r3, [r11, #-56]	; 0xffffffc8
	hps_tim_aud.enable = 1;
    1510:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc

	HPS_TIM_config_ASM(&hps_tim_aud);
    1514:	e24b0044 	sub	r0, r11, #68	; 0x44
    1518:	ebfffde8 	bl	cc0 <HPS_TIM_config_ASM>
	int display[VGA_COL_LEN];
	char is_specific_btn_pressed[NUM_NOTES];
	int current_pixels[VGA_COL_LEN];
	int is_break = 0;
	int ampl = 5;
	int instance = 0;
    151c:	e1a08004 	mov	r8, r4
	// Application States declearation
	int display[VGA_COL_LEN];
	char is_specific_btn_pressed[NUM_NOTES];
	int current_pixels[VGA_COL_LEN];
	int is_break = 0;
	int ampl = 5;
    1520:	e3a00005 	mov	r0, #5
    1524:	e50b0050 	str	r0, [r11, #-80]	; 0xffffffb0

	// Application States declearation
	int display[VGA_COL_LEN];
	char is_specific_btn_pressed[NUM_NOTES];
	int current_pixels[VGA_COL_LEN];
	int is_break = 0;
    1528:	e50b404c 	str	r4, [r11, #-76]	; 0xffffffb4
						is_break = 0;
					}
					break;
				case 0x1E:
					if (is_break) {
						ampl = (ampl + 1) % 10;
    152c:	e3061667 	movw	r1, #26215	; 0x6667
    1530:	e3461666 	movt	r1, #26214	; 0x6666
    1534:	e50b105c 	str	r1, [r11, #-92]	; 0xffffffa4
					is_break = 0;
			}
		}
		// handle_note_pressed_listener(is_specific_btn_pressed, &is_break, &to_read, &ampl);

		if (hps_tim0_int_flag == 1) {
    1538:	e3002de8 	movw	r2, #3560	; 0xde8
    153c:	e3402000 	movt	r2, #0
    1540:	e50b2048 	str	r2, [r11, #-72]	; 0xffffffb8
					count_note = count_note + 1;
				}
			}
			if (count_note > 0) signal = (total * ampl) / (10);
			else signal = 0;
			instance = (instance + 1) % 48000;
    1544:	e30139f1 	movw	r3, #6641	; 0x19f1
    1548:	e3403576 	movt	r3, #1398	; 0x576
    154c:	e50b3054 	str	r3, [r11, #-84]	; 0xffffffac

			audio_write_data_ASM(signal << 3, signal << 3);

			int col = instance % (refresh);
    1550:	e30801b5 	movw	r0, #33205	; 0x81b5
    1554:	e3410b4e 	movt	r0, #6990	; 0x1b4e
    1558:	e50b0058 	str	r0, [r11, #-88]	; 0xffffffa8

			if (col >=0 && col <=319) {
				VGA_draw_point_ASM(col, display[col], 0x8EFF);
				display[col] = (int)(((double)signal / (AMP * count_note)) * 80) + 140;
    155c:	e3021ea8 	movw	r1, #11944	; 0x2ea8
    1560:	e3401000 	movt	r1, #0
    1564:	e50b1064 	str	r1, [r11, #-100]	; 0xffffff9c
	int refresh = 48000 / RENDER_FREQ;

	// Point of Injection
	while(1) {

		if (read_ps2_data_ASM(&to_read)) {
    1568:	e24b0029 	sub	r0, r11, #41	; 0x29
    156c:	ebfffeea 	bl	111c <read_ps2_data_ASM>
    1570:	e3500000 	cmp	r0, #0
    1574:	0a0000cf 	beq	18b8 <main+0x448>
			switch (to_read) {
    1578:	e55b3029 	ldrb	r3, [r11, #-41]	; 0xffffffd7
    157c:	e353002a 	cmp	r3, #42	; 0x2a
    1580:	0a000087 	beq	17a4 <main+0x334>
    1584:	8a000013 	bhi	15d8 <main+0x168>
    1588:	e353001c 	cmp	r3, #28
    158c:	0a00002c 	beq	1644 <main+0x1d4>
    1590:	8a000005 	bhi	15ac <main+0x13c>
    1594:	e353001a 	cmp	r3, #26
    1598:	0a000069 	beq	1744 <main+0x2d4>
    159c:	8a000030 	bhi	1664 <main+0x1f4>
    15a0:	e3530016 	cmp	r3, #22
    15a4:	1a0000c0 	bne	18ac <main+0x43c>
    15a8:	ea00009d 	b	1824 <main+0x3b4>
    15ac:	e3530021 	cmp	r3, #33	; 0x21
    15b0:	0a000073 	beq	1784 <main+0x314>
    15b4:	8a000002 	bhi	15c4 <main+0x154>
    15b8:	e353001e 	cmp	r3, #30
    15bc:	1a0000ba 	bne	18ac <main+0x43c>
    15c0:	ea0000aa 	b	1870 <main+0x400>
    15c4:	e3530022 	cmp	r3, #34	; 0x22
    15c8:	0a000065 	beq	1764 <main+0x2f4>
    15cc:	e3530023 	cmp	r3, #35	; 0x23
    15d0:	1a0000b5 	bne	18ac <main+0x43c>
    15d4:	ea00002a 	b	1684 <main+0x214>
    15d8:	e353003b 	cmp	r3, #59	; 0x3b
    15dc:	0a000038 	beq	16c4 <main+0x254>
    15e0:	8a00000a 	bhi	1610 <main+0x1a0>
    15e4:	e3530031 	cmp	r3, #49	; 0x31
    15e8:	0a00007d 	beq	17e4 <main+0x374>
    15ec:	8a000002 	bhi	15fc <main+0x18c>
    15f0:	e353002b 	cmp	r3, #43	; 0x2b
    15f4:	1a0000ac 	bne	18ac <main+0x43c>
    15f8:	ea000029 	b	16a4 <main+0x234>
    15fc:	e3530032 	cmp	r3, #50	; 0x32
    1600:	0a00006f 	beq	17c4 <main+0x354>
    1604:	e353003a 	cmp	r3, #58	; 0x3a
    1608:	1a0000a7 	bne	18ac <main+0x43c>
    160c:	ea00007c 	b	1804 <main+0x394>
    1610:	e353004b 	cmp	r3, #75	; 0x4b
    1614:	0a00003a 	beq	1704 <main+0x294>
    1618:	8a000002 	bhi	1628 <main+0x1b8>
    161c:	e3530042 	cmp	r3, #66	; 0x42
    1620:	1a0000a1 	bne	18ac <main+0x43c>
    1624:	ea00002e 	b	16e4 <main+0x274>
    1628:	e353004c 	cmp	r3, #76	; 0x4c
    162c:	0a00003c 	beq	1724 <main+0x2b4>
    1630:	e35300f0 	cmp	r3, #240	; 0xf0
						ampl = (ampl + 1) % 10;
						is_break = 0;
					}
					break;
				case 0xF0:
					is_break = 1;
    1634:	03a02001 	moveq	r2, #1
    1638:	050b204c 	streq	r2, [r11, #-76]	; 0xffffffb4

	// Point of Injection
	while(1) {

		if (read_ps2_data_ASM(&to_read)) {
			switch (to_read) {
    163c:	0a00009d 	beq	18b8 <main+0x448>
    1640:	ea000099 	b	18ac <main+0x43c>
				case 0x1C: // A -> C
					if (is_break) {
    1644:	e51b304c 	ldr	r3, [r11, #-76]	; 0xffffffb4
    1648:	e3530000 	cmp	r3, #0
						is_specific_btn_pressed[0] = 0;
    164c:	13a03000 	movne	r3, #0
    1650:	15c63000 	strbne	r3, [r6]
						is_break = 0;
    1654:	150b304c 	strne	r3, [r11, #-76]	; 0xffffffb4
					} else {
						is_specific_btn_pressed[0] = 1;
    1658:	03a03001 	moveq	r3, #1
    165c:	05c63000 	strbeq	r3, [r6]
    1660:	ea000094 	b	18b8 <main+0x448>
					}
					break;
				case 0x1B: // S -> D
					if (is_break) {
    1664:	e51b004c 	ldr	r0, [r11, #-76]	; 0xffffffb4
    1668:	e3500000 	cmp	r0, #0
						is_specific_btn_pressed[1] = 0;
    166c:	13a03000 	movne	r3, #0
    1670:	15c63001 	strbne	r3, [r6, #1]
						is_break = 0;
    1674:	150b304c 	strne	r3, [r11, #-76]	; 0xffffffb4
					} else {
						is_specific_btn_pressed[1] = 1;
    1678:	03a03001 	moveq	r3, #1
    167c:	05c63001 	strbeq	r3, [r6, #1]
    1680:	ea00008c 	b	18b8 <main+0x448>
					}
					break;
				case 0x23: // D -> E
					if (is_break) {
    1684:	e51b104c 	ldr	r1, [r11, #-76]	; 0xffffffb4
    1688:	e3510000 	cmp	r1, #0
						is_specific_btn_pressed[2] = 0;
    168c:	13a03000 	movne	r3, #0
    1690:	15c63002 	strbne	r3, [r6, #2]
						is_break = 0;
    1694:	150b304c 	strne	r3, [r11, #-76]	; 0xffffffb4
					} else {
						is_specific_btn_pressed[2] = 1;
    1698:	03a03001 	moveq	r3, #1
    169c:	05c63002 	strbeq	r3, [r6, #2]
    16a0:	ea000084 	b	18b8 <main+0x448>
					}
					break;
				case 0x2B: // F -> F
					if (is_break) {
    16a4:	e51b204c 	ldr	r2, [r11, #-76]	; 0xffffffb4
    16a8:	e3520000 	cmp	r2, #0
						is_specific_btn_pressed[3] = 0;
    16ac:	13a03000 	movne	r3, #0
    16b0:	15c63003 	strbne	r3, [r6, #3]
						is_break = 0;
    16b4:	150b304c 	strne	r3, [r11, #-76]	; 0xffffffb4
					} else {
						is_specific_btn_pressed[3] = 1;
    16b8:	03a03001 	moveq	r3, #1
    16bc:	05c63003 	strbeq	r3, [r6, #3]
    16c0:	ea00007c 	b	18b8 <main+0x448>
					}
					break;
				case 0x3B: // J -> G
					if (is_break) {
    16c4:	e51b304c 	ldr	r3, [r11, #-76]	; 0xffffffb4
    16c8:	e3530000 	cmp	r3, #0
						is_specific_btn_pressed[4] = 0;
    16cc:	13a03000 	movne	r3, #0
    16d0:	15c63004 	strbne	r3, [r6, #4]
						is_break = 0;
    16d4:	150b304c 	strne	r3, [r11, #-76]	; 0xffffffb4
					} else {
						is_specific_btn_pressed[4] = 1;
    16d8:	03a03001 	moveq	r3, #1
    16dc:	05c63004 	strbeq	r3, [r6, #4]
    16e0:	ea000074 	b	18b8 <main+0x448>
					}
					break;
				case 0x42: // K -> A
					if (is_break) {
    16e4:	e51b004c 	ldr	r0, [r11, #-76]	; 0xffffffb4
    16e8:	e3500000 	cmp	r0, #0
						is_specific_btn_pressed[5] = 0;
    16ec:	13a03000 	movne	r3, #0
    16f0:	15c63005 	strbne	r3, [r6, #5]
						is_break = 0;
    16f4:	150b304c 	strne	r3, [r11, #-76]	; 0xffffffb4
					} else {
						is_specific_btn_pressed[5] = 1;
    16f8:	03a03001 	moveq	r3, #1
    16fc:	05c63005 	strbeq	r3, [r6, #5]
    1700:	ea00006c 	b	18b8 <main+0x448>
					}
					break;
				case 0x4B: // L -> B
					if (is_break) {
    1704:	e51b104c 	ldr	r1, [r11, #-76]	; 0xffffffb4
    1708:	e3510000 	cmp	r1, #0
						is_specific_btn_pressed[6] = 0;
    170c:	13a03000 	movne	r3, #0
    1710:	15c63006 	strbne	r3, [r6, #6]
						is_break = 0;
    1714:	150b304c 	strne	r3, [r11, #-76]	; 0xffffffb4
					} else {
						is_specific_btn_pressed[6] = 1;
    1718:	03a03001 	moveq	r3, #1
    171c:	05c63006 	strbeq	r3, [r6, #6]
    1720:	ea000064 	b	18b8 <main+0x448>
					}
					break;
				case 0x4C: // ; -> HC
					if (is_break) {
    1724:	e51b204c 	ldr	r2, [r11, #-76]	; 0xffffffb4
    1728:	e3520000 	cmp	r2, #0
						is_specific_btn_pressed[7] = 0;
    172c:	13a03000 	movne	r3, #0
    1730:	15c63007 	strbne	r3, [r6, #7]
						is_break = 0;
    1734:	150b304c 	strne	r3, [r11, #-76]	; 0xffffffb4
					} else {
						is_specific_btn_pressed[7] = 1;
    1738:	03a03001 	moveq	r3, #1
    173c:	05c63007 	strbeq	r3, [r6, #7]
    1740:	ea00005c 	b	18b8 <main+0x448>
					}
					break;
				case 0x1A: // Z -> HD
					if (is_break) {
    1744:	e51b304c 	ldr	r3, [r11, #-76]	; 0xffffffb4
    1748:	e3530000 	cmp	r3, #0
						is_specific_btn_pressed[8] = 0;
    174c:	13a03000 	movne	r3, #0
    1750:	15c63008 	strbne	r3, [r6, #8]
						is_break = 0;
    1754:	150b304c 	strne	r3, [r11, #-76]	; 0xffffffb4
					} else {
						is_specific_btn_pressed[8] = 1;
    1758:	03a03001 	moveq	r3, #1
    175c:	05c63008 	strbeq	r3, [r6, #8]
    1760:	ea000054 	b	18b8 <main+0x448>
					}
					break;
				case 0x22: // X -> HE
					if (is_break) {
    1764:	e51b004c 	ldr	r0, [r11, #-76]	; 0xffffffb4
    1768:	e3500000 	cmp	r0, #0
						is_specific_btn_pressed[9] = 0;
    176c:	13a03000 	movne	r3, #0
    1770:	15c63009 	strbne	r3, [r6, #9]
						is_break = 0;
    1774:	150b304c 	strne	r3, [r11, #-76]	; 0xffffffb4
					} else {
						is_specific_btn_pressed[9] = 1;
    1778:	03a03001 	moveq	r3, #1
    177c:	05c63009 	strbeq	r3, [r6, #9]
    1780:	ea00004c 	b	18b8 <main+0x448>
					}
					break;
				case 0x21: // C -> HF
					if (is_break) {
    1784:	e51b104c 	ldr	r1, [r11, #-76]	; 0xffffffb4
    1788:	e3510000 	cmp	r1, #0
						is_specific_btn_pressed[10] = 0;
    178c:	13a03000 	movne	r3, #0
    1790:	15c6300a 	strbne	r3, [r6, #10]
						is_break = 0;
    1794:	150b304c 	strne	r3, [r11, #-76]	; 0xffffffb4
					} else {
						is_specific_btn_pressed[10] = 1;
    1798:	03a03001 	moveq	r3, #1
    179c:	05c6300a 	strbeq	r3, [r6, #10]
    17a0:	ea000044 	b	18b8 <main+0x448>
					}
					break;
				case 0x2A: // V -> HG
					if (is_break) {
    17a4:	e51b204c 	ldr	r2, [r11, #-76]	; 0xffffffb4
    17a8:	e3520000 	cmp	r2, #0
						is_specific_btn_pressed[11] = 0;
    17ac:	13a03000 	movne	r3, #0
    17b0:	15c6300b 	strbne	r3, [r6, #11]
						is_break = 0;
    17b4:	150b304c 	strne	r3, [r11, #-76]	; 0xffffffb4
					} else {
						is_specific_btn_pressed[11] = 1;
    17b8:	03a03001 	moveq	r3, #1
    17bc:	05c6300b 	strbeq	r3, [r6, #11]
    17c0:	ea00003c 	b	18b8 <main+0x448>
					}
					break;
				case 0x32: // B -> HA
					if (is_break) {
    17c4:	e51b304c 	ldr	r3, [r11, #-76]	; 0xffffffb4
    17c8:	e3530000 	cmp	r3, #0
						is_specific_btn_pressed[12] = 0;
    17cc:	13a03000 	movne	r3, #0
    17d0:	15c6300c 	strbne	r3, [r6, #12]
						is_break = 0;
    17d4:	150b304c 	strne	r3, [r11, #-76]	; 0xffffffb4
					} else {
						is_specific_btn_pressed[12] = 1;
    17d8:	03a03001 	moveq	r3, #1
    17dc:	05c6300c 	strbeq	r3, [r6, #12]
    17e0:	ea000034 	b	18b8 <main+0x448>
					}
					break;
				case 0x31: // N -> HB
					if (is_break) {
    17e4:	e51b004c 	ldr	r0, [r11, #-76]	; 0xffffffb4
    17e8:	e3500000 	cmp	r0, #0
						is_specific_btn_pressed[13] = 0;
    17ec:	13a03000 	movne	r3, #0
    17f0:	15c6300d 	strbne	r3, [r6, #13]
						is_break = 0;
    17f4:	150b304c 	strne	r3, [r11, #-76]	; 0xffffffb4
					} else {
						is_specific_btn_pressed[13] = 1;
    17f8:	03a03001 	moveq	r3, #1
    17fc:	05c6300d 	strbeq	r3, [r6, #13]
    1800:	ea00002c 	b	18b8 <main+0x448>
					}
					break;
				case 0x3A: // M -> HHC
					if (is_break) {
    1804:	e51b104c 	ldr	r1, [r11, #-76]	; 0xffffffb4
    1808:	e3510000 	cmp	r1, #0
						is_specific_btn_pressed[14] = 0;
    180c:	13a03000 	movne	r3, #0
    1810:	15c6300e 	strbne	r3, [r6, #14]
						is_break = 0;
    1814:	150b304c 	strne	r3, [r11, #-76]	; 0xffffffb4
					} else {
						is_specific_btn_pressed[14] = 1;
    1818:	03a03001 	moveq	r3, #1
    181c:	05c6300e 	strbeq	r3, [r6, #14]
    1820:	ea000024 	b	18b8 <main+0x448>
					}
					break;
				case 0x16:
					if (is_break) {
    1824:	e51b204c 	ldr	r2, [r11, #-76]	; 0xffffffb4
    1828:	e3520000 	cmp	r2, #0
    182c:	0a000021 	beq	18b8 <main+0x448>
						ampl = (ampl - 1) % 10;
    1830:	e51b0050 	ldr	r0, [r11, #-80]	; 0xffffffb0
    1834:	e2403001 	sub	r3, r0, #1
    1838:	e51b205c 	ldr	r2, [r11, #-92]	; 0xffffffa4
    183c:	e0c12392 	smull	r2, r1, r2, r3
    1840:	e1a02fc3 	asr	r2, r3, #31
    1844:	e0622141 	rsb	r2, r2, r1, asr #2
    1848:	e0822102 	add	r2, r2, r2, lsl #2
						if (ampl < 0) ampl = ampl + 10;
    184c:	e0532082 	subs	r2, r3, r2, lsl #1
    1850:	e50b2050 	str	r2, [r11, #-80]	; 0xffffffb0
						is_break = 0;
    1854:	53a03000 	movpl	r3, #0
    1858:	550b304c 	strpl	r3, [r11, #-76]	; 0xffffffb4
					}
					break;
				case 0x16:
					if (is_break) {
						ampl = (ampl - 1) % 10;
						if (ampl < 0) ampl = ampl + 10;
    185c:	4282200a 	addmi	r2, r2, #10
    1860:	450b2050 	strmi	r2, [r11, #-80]	; 0xffffffb0
						is_break = 0;
    1864:	43a01000 	movmi	r1, #0
    1868:	450b104c 	strmi	r1, [r11, #-76]	; 0xffffffb4
    186c:	ea000011 	b	18b8 <main+0x448>
					}
					break;
				case 0x1E:
					if (is_break) {
    1870:	e51b204c 	ldr	r2, [r11, #-76]	; 0xffffffb4
    1874:	e3520000 	cmp	r2, #0
    1878:	0a00000e 	beq	18b8 <main+0x448>
						ampl = (ampl + 1) % 10;
    187c:	e51b0050 	ldr	r0, [r11, #-80]	; 0xffffffb0
    1880:	e2803001 	add	r3, r0, #1
    1884:	e51b205c 	ldr	r2, [r11, #-92]	; 0xffffffa4
    1888:	e0c12392 	smull	r2, r1, r2, r3
    188c:	e1a02fc3 	asr	r2, r3, #31
    1890:	e0622141 	rsb	r2, r2, r1, asr #2
    1894:	e0822102 	add	r2, r2, r2, lsl #2
    1898:	e0432082 	sub	r2, r3, r2, lsl #1
    189c:	e50b2050 	str	r2, [r11, #-80]	; 0xffffffb0
						is_break = 0;
    18a0:	e3a01000 	mov	r1, #0
    18a4:	e50b104c 	str	r1, [r11, #-76]	; 0xffffffb4
    18a8:	ea000002 	b	18b8 <main+0x448>
					break;
				case 0xF0:
					is_break = 1;
					break;
				default:
					is_break = 0;
    18ac:	e3a02000 	mov	r2, #0
    18b0:	e50b204c 	str	r2, [r11, #-76]	; 0xffffffb4
    18b4:	eaffffff 	b	18b8 <main+0x448>
			}
		}
		// handle_note_pressed_listener(is_specific_btn_pressed, &is_break, &to_read, &ampl);

		if (hps_tim0_int_flag == 1) {
    18b8:	e51b0048 	ldr	r0, [r11, #-72]	; 0xffffffb8
    18bc:	e5903000 	ldr	r3, [r0]
    18c0:	e3530001 	cmp	r3, #1
    18c4:	1affff27 	bne	1568 <main+0xf8>

			hps_tim0_int_flag = 0;
    18c8:	e3a03000 	mov	r3, #0
    18cc:	e5803000 	str	r3, [r0]

			int i = 0, count_note = 0;
			int total = 0;
			for (i = 0; i < NUM_NOTES; i++) {
    18d0:	e1570003 	cmp	r7, r3
    18d4:	da000019 	ble	1940 <main+0x4d0>
		if (hps_tim0_int_flag == 1) {

			hps_tim0_int_flag = 0;

			int i = 0, count_note = 0;
			int total = 0;
    18d8:	e1a05003 	mov	r5, r3

		if (hps_tim0_int_flag == 1) {

			hps_tim0_int_flag = 0;

			int i = 0, count_note = 0;
    18dc:	e1a0a003 	mov	r10, r3
			int total = 0;
			for (i = 0; i < NUM_NOTES; i++) {
    18e0:	e1a04003 	mov	r4, r3
				if (is_specific_btn_pressed[i]) {
					total = total + make_wave(instance, NOTE_LOOKUP[i]);
    18e4:	e3029ee4 	movw	r9, #12004	; 0x2ee4
    18e8:	e3409000 	movt	r9, #0
			hps_tim0_int_flag = 0;

			int i = 0, count_note = 0;
			int total = 0;
			for (i = 0; i < NUM_NOTES; i++) {
				if (is_specific_btn_pressed[i]) {
    18ec:	e7d63004 	ldrb	r3, [r6, r4]
    18f0:	e3530000 	cmp	r3, #0
    18f4:	0a000004 	beq	190c <main+0x49c>
					total = total + make_wave(instance, NOTE_LOOKUP[i]);
    18f8:	e1a00008 	mov	r0, r8
    18fc:	e7991104 	ldr	r1, [r9, r4, lsl #2]
    1900:	ebfffc81 	bl	b0c <make_wave>
    1904:	e0855000 	add	r5, r5, r0
					count_note = count_note + 1;
    1908:	e28aa001 	add	r10, r10, #1

			hps_tim0_int_flag = 0;

			int i = 0, count_note = 0;
			int total = 0;
			for (i = 0; i < NUM_NOTES; i++) {
    190c:	e2844001 	add	r4, r4, #1
    1910:	e1540007 	cmp	r4, r7
    1914:	1afffff4 	bne	18ec <main+0x47c>
				if (is_specific_btn_pressed[i]) {
					total = total + make_wave(instance, NOTE_LOOKUP[i]);
					count_note = count_note + 1;
				}
			}
			if (count_note > 0) signal = (total * ampl) / (10);
    1918:	e35a0000 	cmp	r10, #0
			else signal = 0;
    191c:	d3a05000 	movle	r5, #0
				if (is_specific_btn_pressed[i]) {
					total = total + make_wave(instance, NOTE_LOOKUP[i]);
					count_note = count_note + 1;
				}
			}
			if (count_note > 0) signal = (total * ampl) / (10);
    1920:	da000009 	ble	194c <main+0x4dc>
    1924:	e51b1050 	ldr	r1, [r11, #-80]	; 0xffffffb0
    1928:	e0050195 	mul	r5, r5, r1
    192c:	e51b205c 	ldr	r2, [r11, #-92]	; 0xffffffa4
    1930:	e0c32592 	smull	r2, r3, r2, r5
    1934:	e1a05fc5 	asr	r5, r5, #31
    1938:	e0655143 	rsb	r5, r5, r3, asr #2
    193c:	ea000002 	b	194c <main+0x4dc>

		if (hps_tim0_int_flag == 1) {

			hps_tim0_int_flag = 0;

			int i = 0, count_note = 0;
    1940:	e3a0a000 	mov	r10, #0
					total = total + make_wave(instance, NOTE_LOOKUP[i]);
					count_note = count_note + 1;
				}
			}
			if (count_note > 0) signal = (total * ampl) / (10);
			else signal = 0;
    1944:	e1a0500a 	mov	r5, r10
    1948:	eaffffff 	b	194c <main+0x4dc>
			instance = (instance + 1) % 48000;
    194c:	e2883001 	add	r3, r8, #1
    1950:	e51b0054 	ldr	r0, [r11, #-84]	; 0xffffffac
    1954:	e0c80390 	smull	r0, r8, r0, r3
    1958:	e1a02fc3 	asr	r2, r3, #31
    195c:	e0628548 	rsb	r8, r2, r8, asr #10
    1960:	e30b2b80 	movw	r2, #48000	; 0xbb80
    1964:	e0683892 	mls	r8, r2, r8, r3

			audio_write_data_ASM(signal << 3, signal << 3);
    1968:	e1a01185 	lsl	r1, r5, #3
    196c:	e1a00001 	mov	r0, r1
    1970:	ebfffd78 	bl	f58 <audio_write_data_ASM>

			int col = instance % (refresh);
    1974:	e51b1058 	ldr	r1, [r11, #-88]	; 0xffffffa8
    1978:	e0c91891 	smull	r1, r9, r1, r8
    197c:	e1a03fc8 	asr	r3, r8, #31
    1980:	e0639549 	rsb	r9, r3, r9, asr #10
    1984:	e3a03d96 	mov	r3, #9600	; 0x2580
    1988:	e0698993 	mls	r9, r3, r9, r8

			if (col >=0 && col <=319) {
    198c:	e3590d05 	cmp	r9, #320	; 0x140
    1990:	2a00001d 	bcs	1a0c <main+0x59c>
				VGA_draw_point_ASM(col, display[col], 0x8EFF);
    1994:	e1a00009 	mov	r0, r9
    1998:	e51b2060 	ldr	r2, [r11, #-96]	; 0xffffffa0
    199c:	e7921109 	ldr	r1, [r2, r9, lsl #2]
    19a0:	e3e02c71 	mvn	r2, #28928	; 0x7100
    19a4:	ebfffe9d 	bl	1420 <VGA_draw_point_ASM>
				display[col] = (int)(((double)signal / (AMP * count_note)) * 80) + 140;
    19a8:	e1a00005 	mov	r0, r5
    19ac:	eb000140 	bl	1eb4 <__aeabi_i2d>
    19b0:	e1a04000 	mov	r4, r0
    19b4:	e1a05001 	mov	r5, r1
    19b8:	e51b3064 	ldr	r3, [r11, #-100]	; 0xffffff9c
    19bc:	e5930000 	ldr	r0, [r3]
    19c0:	e0000a90 	mul	r0, r0, r10
    19c4:	eb00013a 	bl	1eb4 <__aeabi_i2d>
    19c8:	e1a02000 	mov	r2, r0
    19cc:	e1a03001 	mov	r3, r1
    19d0:	e1a00004 	mov	r0, r4
    19d4:	e1a01005 	mov	r1, r5
    19d8:	eb000210 	bl	2220 <__aeabi_ddiv>
    19dc:	e3a02000 	mov	r2, #0
    19e0:	e3a03000 	mov	r3, #0
    19e4:	e3443054 	movt	r3, #16468	; 0x4054
    19e8:	eb000168 	bl	1f90 <__aeabi_dmul>
    19ec:	eb00028e 	bl	242c <__aeabi_d2iz>
    19f0:	e280108c 	add	r1, r0, #140	; 0x8c
    19f4:	e51b0060 	ldr	r0, [r11, #-96]	; 0xffffffa0
    19f8:	e7801109 	str	r1, [r0, r9, lsl #2]
				VGA_draw_point_ASM(col, display[col], 0xFA0B);
    19fc:	e1a00009 	mov	r0, r9
    1a00:	e30f2a0b 	movw	r2, #64011	; 0xfa0b
    1a04:	e34f2fff 	movt	r2, #65535	; 0xffff
    1a08:	ebfffe84 	bl	1420 <VGA_draw_point_ASM>
			}
			if (col == refresh - 1) {
    1a0c:	e302357f 	movw	r3, #9599	; 0x257f
    1a10:	e1590003 	cmp	r9, r3
    1a14:	1afffed3 	bne	1568 <main+0xf8>
				render(ampl, is_specific_btn_pressed); 
    1a18:	e51b0050 	ldr	r0, [r11, #-80]	; 0xffffffb0
    1a1c:	e51b1068 	ldr	r1, [r11, #-104]	; 0xffffff98
    1a20:	ebfffa59 	bl	38c <render>
    1a24:	eafffecf 	b	1568 <main+0xf8>

00001a28 <__aeabi_idiv>:
    1a28:	e3510000 	cmp	r1, #0
    1a2c:	0a000043 	beq	1b40 <.divsi3_skip_div0_test+0x110>

00001a30 <.divsi3_skip_div0_test>:
    1a30:	e020c001 	eor	r12, r0, r1
    1a34:	42611000 	rsbmi	r1, r1, #0
    1a38:	e2512001 	subs	r2, r1, #1
    1a3c:	0a000027 	beq	1ae0 <.divsi3_skip_div0_test+0xb0>
    1a40:	e1b03000 	movs	r3, r0
    1a44:	42603000 	rsbmi	r3, r0, #0
    1a48:	e1530001 	cmp	r3, r1
    1a4c:	9a000026 	bls	1aec <.divsi3_skip_div0_test+0xbc>
    1a50:	e1110002 	tst	r1, r2
    1a54:	0a000028 	beq	1afc <.divsi3_skip_div0_test+0xcc>
    1a58:	e311020e 	tst	r1, #-536870912	; 0xe0000000
    1a5c:	01a01181 	lsleq	r1, r1, #3
    1a60:	03a02008 	moveq	r2, #8
    1a64:	13a02001 	movne	r2, #1
    1a68:	e3510201 	cmp	r1, #268435456	; 0x10000000
    1a6c:	31510003 	cmpcc	r1, r3
    1a70:	31a01201 	lslcc	r1, r1, #4
    1a74:	31a02202 	lslcc	r2, r2, #4
    1a78:	3afffffa 	bcc	1a68 <.divsi3_skip_div0_test+0x38>
    1a7c:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    1a80:	31510003 	cmpcc	r1, r3
    1a84:	31a01081 	lslcc	r1, r1, #1
    1a88:	31a02082 	lslcc	r2, r2, #1
    1a8c:	3afffffa 	bcc	1a7c <.divsi3_skip_div0_test+0x4c>
    1a90:	e3a00000 	mov	r0, #0
    1a94:	e1530001 	cmp	r3, r1
    1a98:	20433001 	subcs	r3, r3, r1
    1a9c:	21800002 	orrcs	r0, r0, r2
    1aa0:	e15300a1 	cmp	r3, r1, lsr #1
    1aa4:	204330a1 	subcs	r3, r3, r1, lsr #1
    1aa8:	218000a2 	orrcs	r0, r0, r2, lsr #1
    1aac:	e1530121 	cmp	r3, r1, lsr #2
    1ab0:	20433121 	subcs	r3, r3, r1, lsr #2
    1ab4:	21800122 	orrcs	r0, r0, r2, lsr #2
    1ab8:	e15301a1 	cmp	r3, r1, lsr #3
    1abc:	204331a1 	subcs	r3, r3, r1, lsr #3
    1ac0:	218001a2 	orrcs	r0, r0, r2, lsr #3
    1ac4:	e3530000 	cmp	r3, #0
    1ac8:	11b02222 	lsrsne	r2, r2, #4
    1acc:	11a01221 	lsrne	r1, r1, #4
    1ad0:	1affffef 	bne	1a94 <.divsi3_skip_div0_test+0x64>
    1ad4:	e35c0000 	cmp	r12, #0
    1ad8:	42600000 	rsbmi	r0, r0, #0
    1adc:	e12fff1e 	bx	lr
    1ae0:	e13c0000 	teq	r12, r0
    1ae4:	42600000 	rsbmi	r0, r0, #0
    1ae8:	e12fff1e 	bx	lr
    1aec:	33a00000 	movcc	r0, #0
    1af0:	01a00fcc 	asreq	r0, r12, #31
    1af4:	03800001 	orreq	r0, r0, #1
    1af8:	e12fff1e 	bx	lr
    1afc:	e3510801 	cmp	r1, #65536	; 0x10000
    1b00:	21a01821 	lsrcs	r1, r1, #16
    1b04:	23a02010 	movcs	r2, #16
    1b08:	33a02000 	movcc	r2, #0
    1b0c:	e3510c01 	cmp	r1, #256	; 0x100
    1b10:	21a01421 	lsrcs	r1, r1, #8
    1b14:	22822008 	addcs	r2, r2, #8
    1b18:	e3510010 	cmp	r1, #16
    1b1c:	21a01221 	lsrcs	r1, r1, #4
    1b20:	22822004 	addcs	r2, r2, #4
    1b24:	e3510004 	cmp	r1, #4
    1b28:	82822003 	addhi	r2, r2, #3
    1b2c:	908220a1 	addls	r2, r2, r1, lsr #1
    1b30:	e35c0000 	cmp	r12, #0
    1b34:	e1a00233 	lsr	r0, r3, r2
    1b38:	42600000 	rsbmi	r0, r0, #0
    1b3c:	e12fff1e 	bx	lr
    1b40:	e3500000 	cmp	r0, #0
    1b44:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
    1b48:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
    1b4c:	ea000007 	b	1b70 <__aeabi_idiv0>

00001b50 <__aeabi_idivmod>:
    1b50:	e3510000 	cmp	r1, #0
    1b54:	0afffff9 	beq	1b40 <.divsi3_skip_div0_test+0x110>
    1b58:	e92d4003 	push	{r0, r1, lr}
    1b5c:	ebffffb3 	bl	1a30 <.divsi3_skip_div0_test>
    1b60:	e8bd4006 	pop	{r1, r2, lr}
    1b64:	e0030092 	mul	r3, r2, r0
    1b68:	e0411003 	sub	r1, r1, r3
    1b6c:	e12fff1e 	bx	lr

00001b70 <__aeabi_idiv0>:
    1b70:	e12fff1e 	bx	lr

00001b74 <__aeabi_drsub>:
    1b74:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
    1b78:	ea000000 	b	1b80 <__adddf3>

00001b7c <__aeabi_dsub>:
    1b7c:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

00001b80 <__adddf3>:
    1b80:	e92d4030 	push	{r4, r5, lr}
    1b84:	e1a04081 	lsl	r4, r1, #1
    1b88:	e1a05083 	lsl	r5, r3, #1
    1b8c:	e1340005 	teq	r4, r5
    1b90:	01300002 	teqeq	r0, r2
    1b94:	1194c000 	orrsne	r12, r4, r0
    1b98:	1195c002 	orrsne	r12, r5, r2
    1b9c:	11f0cac4 	mvnsne	r12, r4, asr #21
    1ba0:	11f0cac5 	mvnsne	r12, r5, asr #21
    1ba4:	0a00008c 	beq	1ddc <__adddf3+0x25c>
    1ba8:	e1a04aa4 	lsr	r4, r4, #21
    1bac:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
    1bb0:	b2655000 	rsblt	r5, r5, #0
    1bb4:	da000006 	ble	1bd4 <__adddf3+0x54>
    1bb8:	e0844005 	add	r4, r4, r5
    1bbc:	e0202002 	eor	r2, r0, r2
    1bc0:	e0213003 	eor	r3, r1, r3
    1bc4:	e0220000 	eor	r0, r2, r0
    1bc8:	e0231001 	eor	r1, r3, r1
    1bcc:	e0202002 	eor	r2, r0, r2
    1bd0:	e0213003 	eor	r3, r1, r3
    1bd4:	e3550036 	cmp	r5, #54	; 0x36
    1bd8:	88bd4030 	pophi	{r4, r5, lr}
    1bdc:	812fff1e 	bxhi	lr
    1be0:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    1be4:	e1a01601 	lsl	r1, r1, #12
    1be8:	e3a0c601 	mov	r12, #1048576	; 0x100000
    1bec:	e18c1621 	orr	r1, r12, r1, lsr #12
    1bf0:	0a000001 	beq	1bfc <__adddf3+0x7c>
    1bf4:	e2700000 	rsbs	r0, r0, #0
    1bf8:	e2e11000 	rsc	r1, r1, #0
    1bfc:	e3130102 	tst	r3, #-2147483648	; 0x80000000
    1c00:	e1a03603 	lsl	r3, r3, #12
    1c04:	e18c3623 	orr	r3, r12, r3, lsr #12
    1c08:	0a000001 	beq	1c14 <__adddf3+0x94>
    1c0c:	e2722000 	rsbs	r2, r2, #0
    1c10:	e2e33000 	rsc	r3, r3, #0
    1c14:	e1340005 	teq	r4, r5
    1c18:	0a000069 	beq	1dc4 <__adddf3+0x244>
    1c1c:	e2444001 	sub	r4, r4, #1
    1c20:	e275e020 	rsbs	lr, r5, #32
    1c24:	ba000005 	blt	1c40 <__adddf3+0xc0>
    1c28:	e1a0ce12 	lsl	r12, r2, lr
    1c2c:	e0900532 	adds	r0, r0, r2, lsr r5
    1c30:	e2a11000 	adc	r1, r1, #0
    1c34:	e0900e13 	adds	r0, r0, r3, lsl lr
    1c38:	e0b11553 	adcs	r1, r1, r3, asr r5
    1c3c:	ea000006 	b	1c5c <__adddf3+0xdc>
    1c40:	e2455020 	sub	r5, r5, #32
    1c44:	e28ee020 	add	lr, lr, #32
    1c48:	e3520001 	cmp	r2, #1
    1c4c:	e1a0ce13 	lsl	r12, r3, lr
    1c50:	238cc002 	orrcs	r12, r12, #2
    1c54:	e0900553 	adds	r0, r0, r3, asr r5
    1c58:	e0b11fc3 	adcs	r1, r1, r3, asr #31
    1c5c:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1c60:	5a000002 	bpl	1c70 <__adddf3+0xf0>
    1c64:	e27cc000 	rsbs	r12, r12, #0
    1c68:	e2f00000 	rscs	r0, r0, #0
    1c6c:	e2e11000 	rsc	r1, r1, #0
    1c70:	e3510601 	cmp	r1, #1048576	; 0x100000
    1c74:	3a00000f 	bcc	1cb8 <__adddf3+0x138>
    1c78:	e3510602 	cmp	r1, #2097152	; 0x200000
    1c7c:	3a000006 	bcc	1c9c <__adddf3+0x11c>
    1c80:	e1b010a1 	lsrs	r1, r1, #1
    1c84:	e1b00060 	rrxs	r0, r0
    1c88:	e1a0c06c 	rrx	r12, r12
    1c8c:	e2844001 	add	r4, r4, #1
    1c90:	e1a02a84 	lsl	r2, r4, #21
    1c94:	e3720501 	cmn	r2, #4194304	; 0x400000
    1c98:	2a00006b 	bcs	1e4c <__adddf3+0x2cc>
    1c9c:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    1ca0:	01b0c0a0 	lsrseq	r12, r0, #1
    1ca4:	e2b00000 	adcs	r0, r0, #0
    1ca8:	e0a11a04 	adc	r1, r1, r4, lsl #20
    1cac:	e1811005 	orr	r1, r1, r5
    1cb0:	e8bd4030 	pop	{r4, r5, lr}
    1cb4:	e12fff1e 	bx	lr
    1cb8:	e1b0c08c 	lsls	r12, r12, #1
    1cbc:	e0b00000 	adcs	r0, r0, r0
    1cc0:	e0a11001 	adc	r1, r1, r1
    1cc4:	e3110601 	tst	r1, #1048576	; 0x100000
    1cc8:	e2444001 	sub	r4, r4, #1
    1ccc:	1afffff2 	bne	1c9c <__adddf3+0x11c>
    1cd0:	e3310000 	teq	r1, #0
    1cd4:	13a03014 	movne	r3, #20
    1cd8:	03a03034 	moveq	r3, #52	; 0x34
    1cdc:	01a01000 	moveq	r1, r0
    1ce0:	03a00000 	moveq	r0, #0
    1ce4:	e1a02001 	mov	r2, r1
    1ce8:	e3520801 	cmp	r2, #65536	; 0x10000
    1cec:	21a02822 	lsrcs	r2, r2, #16
    1cf0:	22433010 	subcs	r3, r3, #16
    1cf4:	e3520c01 	cmp	r2, #256	; 0x100
    1cf8:	21a02422 	lsrcs	r2, r2, #8
    1cfc:	22433008 	subcs	r3, r3, #8
    1d00:	e3520010 	cmp	r2, #16
    1d04:	21a02222 	lsrcs	r2, r2, #4
    1d08:	22433004 	subcs	r3, r3, #4
    1d0c:	e3520004 	cmp	r2, #4
    1d10:	22433002 	subcs	r3, r3, #2
    1d14:	304330a2 	subcc	r3, r3, r2, lsr #1
    1d18:	e04331a2 	sub	r3, r3, r2, lsr #3
    1d1c:	e2532020 	subs	r2, r3, #32
    1d20:	aa000007 	bge	1d44 <__adddf3+0x1c4>
    1d24:	e292200c 	adds	r2, r2, #12
    1d28:	da000004 	ble	1d40 <__adddf3+0x1c0>
    1d2c:	e282c014 	add	r12, r2, #20
    1d30:	e262200c 	rsb	r2, r2, #12
    1d34:	e1a00c11 	lsl	r0, r1, r12
    1d38:	e1a01231 	lsr	r1, r1, r2
    1d3c:	ea000004 	b	1d54 <__adddf3+0x1d4>
    1d40:	e2822014 	add	r2, r2, #20
    1d44:	d262c020 	rsble	r12, r2, #32
    1d48:	e1a01211 	lsl	r1, r1, r2
    1d4c:	d1811c30 	orrle	r1, r1, r0, lsr r12
    1d50:	d1a00210 	lslle	r0, r0, r2
    1d54:	e0544003 	subs	r4, r4, r3
    1d58:	a0811a04 	addge	r1, r1, r4, lsl #20
    1d5c:	a1811005 	orrge	r1, r1, r5
    1d60:	a8bd4030 	popge	{r4, r5, lr}
    1d64:	a12fff1e 	bxge	lr
    1d68:	e1e04004 	mvn	r4, r4
    1d6c:	e254401f 	subs	r4, r4, #31
    1d70:	aa00000f 	bge	1db4 <__adddf3+0x234>
    1d74:	e294400c 	adds	r4, r4, #12
    1d78:	ca000006 	bgt	1d98 <__adddf3+0x218>
    1d7c:	e2844014 	add	r4, r4, #20
    1d80:	e2642020 	rsb	r2, r4, #32
    1d84:	e1a00430 	lsr	r0, r0, r4
    1d88:	e1800211 	orr	r0, r0, r1, lsl r2
    1d8c:	e1851431 	orr	r1, r5, r1, lsr r4
    1d90:	e8bd4030 	pop	{r4, r5, lr}
    1d94:	e12fff1e 	bx	lr
    1d98:	e264400c 	rsb	r4, r4, #12
    1d9c:	e2642020 	rsb	r2, r4, #32
    1da0:	e1a00230 	lsr	r0, r0, r2
    1da4:	e1800411 	orr	r0, r0, r1, lsl r4
    1da8:	e1a01005 	mov	r1, r5
    1dac:	e8bd4030 	pop	{r4, r5, lr}
    1db0:	e12fff1e 	bx	lr
    1db4:	e1a00431 	lsr	r0, r1, r4
    1db8:	e1a01005 	mov	r1, r5
    1dbc:	e8bd4030 	pop	{r4, r5, lr}
    1dc0:	e12fff1e 	bx	lr
    1dc4:	e3340000 	teq	r4, #0
    1dc8:	e2233601 	eor	r3, r3, #1048576	; 0x100000
    1dcc:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
    1dd0:	02844001 	addeq	r4, r4, #1
    1dd4:	12455001 	subne	r5, r5, #1
    1dd8:	eaffff8f 	b	1c1c <__adddf3+0x9c>
    1ddc:	e1f0cac4 	mvns	r12, r4, asr #21
    1de0:	11f0cac5 	mvnsne	r12, r5, asr #21
    1de4:	0a00001d 	beq	1e60 <__adddf3+0x2e0>
    1de8:	e1340005 	teq	r4, r5
    1dec:	01300002 	teqeq	r0, r2
    1df0:	0a000004 	beq	1e08 <__adddf3+0x288>
    1df4:	e194c000 	orrs	r12, r4, r0
    1df8:	01a01003 	moveq	r1, r3
    1dfc:	01a00002 	moveq	r0, r2
    1e00:	e8bd4030 	pop	{r4, r5, lr}
    1e04:	e12fff1e 	bx	lr
    1e08:	e1310003 	teq	r1, r3
    1e0c:	13a01000 	movne	r1, #0
    1e10:	13a00000 	movne	r0, #0
    1e14:	18bd4030 	popne	{r4, r5, lr}
    1e18:	112fff1e 	bxne	lr
    1e1c:	e1b0caa4 	lsrs	r12, r4, #21
    1e20:	1a000004 	bne	1e38 <__adddf3+0x2b8>
    1e24:	e1b00080 	lsls	r0, r0, #1
    1e28:	e0b11001 	adcs	r1, r1, r1
    1e2c:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
    1e30:	e8bd4030 	pop	{r4, r5, lr}
    1e34:	e12fff1e 	bx	lr
    1e38:	e2944501 	adds	r4, r4, #4194304	; 0x400000
    1e3c:	32811601 	addcc	r1, r1, #1048576	; 0x100000
    1e40:	38bd4030 	popcc	{r4, r5, lr}
    1e44:	312fff1e 	bxcc	lr
    1e48:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1e4c:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
    1e50:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    1e54:	e3a00000 	mov	r0, #0
    1e58:	e8bd4030 	pop	{r4, r5, lr}
    1e5c:	e12fff1e 	bx	lr
    1e60:	e1f0cac4 	mvns	r12, r4, asr #21
    1e64:	11a01003 	movne	r1, r3
    1e68:	11a00002 	movne	r0, r2
    1e6c:	01f0cac5 	mvnseq	r12, r5, asr #21
    1e70:	11a03001 	movne	r3, r1
    1e74:	11a02000 	movne	r2, r0
    1e78:	e1904601 	orrs	r4, r0, r1, lsl #12
    1e7c:	01925603 	orrseq	r5, r2, r3, lsl #12
    1e80:	01310003 	teqeq	r1, r3
    1e84:	13811702 	orrne	r1, r1, #524288	; 0x80000
    1e88:	e8bd4030 	pop	{r4, r5, lr}
    1e8c:	e12fff1e 	bx	lr

00001e90 <__aeabi_ui2d>:
    1e90:	e3300000 	teq	r0, #0
    1e94:	03a01000 	moveq	r1, #0
    1e98:	012fff1e 	bxeq	lr
    1e9c:	e92d4030 	push	{r4, r5, lr}
    1ea0:	e3a04b01 	mov	r4, #1024	; 0x400
    1ea4:	e2844032 	add	r4, r4, #50	; 0x32
    1ea8:	e3a05000 	mov	r5, #0
    1eac:	e3a01000 	mov	r1, #0
    1eb0:	eaffff86 	b	1cd0 <__adddf3+0x150>

00001eb4 <__aeabi_i2d>:
    1eb4:	e3300000 	teq	r0, #0
    1eb8:	03a01000 	moveq	r1, #0
    1ebc:	012fff1e 	bxeq	lr
    1ec0:	e92d4030 	push	{r4, r5, lr}
    1ec4:	e3a04b01 	mov	r4, #1024	; 0x400
    1ec8:	e2844032 	add	r4, r4, #50	; 0x32
    1ecc:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
    1ed0:	42600000 	rsbmi	r0, r0, #0
    1ed4:	e3a01000 	mov	r1, #0
    1ed8:	eaffff7c 	b	1cd0 <__adddf3+0x150>

00001edc <__aeabi_f2d>:
    1edc:	e1b02080 	lsls	r2, r0, #1
    1ee0:	e1a011c2 	asr	r1, r2, #3
    1ee4:	e1a01061 	rrx	r1, r1
    1ee8:	e1a00e02 	lsl	r0, r2, #28
    1eec:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
    1ef0:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    1ef4:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
    1ef8:	112fff1e 	bxne	lr
    1efc:	e3320000 	teq	r2, #0
    1f00:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    1f04:	012fff1e 	bxeq	lr
    1f08:	e92d4030 	push	{r4, r5, lr}
    1f0c:	e3a04d0e 	mov	r4, #896	; 0x380
    1f10:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1f14:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    1f18:	eaffff6c 	b	1cd0 <__adddf3+0x150>

00001f1c <__aeabi_ul2d>:
    1f1c:	e1902001 	orrs	r2, r0, r1
    1f20:	012fff1e 	bxeq	lr
    1f24:	e92d4030 	push	{r4, r5, lr}
    1f28:	e3a05000 	mov	r5, #0
    1f2c:	ea000006 	b	1f4c <__aeabi_l2d+0x1c>

00001f30 <__aeabi_l2d>:
    1f30:	e1902001 	orrs	r2, r0, r1
    1f34:	012fff1e 	bxeq	lr
    1f38:	e92d4030 	push	{r4, r5, lr}
    1f3c:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
    1f40:	5a000001 	bpl	1f4c <__aeabi_l2d+0x1c>
    1f44:	e2700000 	rsbs	r0, r0, #0
    1f48:	e2e11000 	rsc	r1, r1, #0
    1f4c:	e3a04b01 	mov	r4, #1024	; 0x400
    1f50:	e2844032 	add	r4, r4, #50	; 0x32
    1f54:	e1b0cb21 	lsrs	r12, r1, #22
    1f58:	0affff44 	beq	1c70 <__adddf3+0xf0>
    1f5c:	e3a02003 	mov	r2, #3
    1f60:	e1b0c1ac 	lsrs	r12, r12, #3
    1f64:	12822003 	addne	r2, r2, #3
    1f68:	e1b0c1ac 	lsrs	r12, r12, #3
    1f6c:	12822003 	addne	r2, r2, #3
    1f70:	e08221ac 	add	r2, r2, r12, lsr #3
    1f74:	e2623020 	rsb	r3, r2, #32
    1f78:	e1a0c310 	lsl	r12, r0, r3
    1f7c:	e1a00230 	lsr	r0, r0, r2
    1f80:	e1800311 	orr	r0, r0, r1, lsl r3
    1f84:	e1a01231 	lsr	r1, r1, r2
    1f88:	e0844002 	add	r4, r4, r2
    1f8c:	eaffff37 	b	1c70 <__adddf3+0xf0>

00001f90 <__aeabi_dmul>:
    1f90:	e92d4070 	push	{r4, r5, r6, lr}
    1f94:	e3a0c0ff 	mov	r12, #255	; 0xff
    1f98:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    1f9c:	e01c4a21 	ands	r4, r12, r1, lsr #20
    1fa0:	101c5a23 	andsne	r5, r12, r3, lsr #20
    1fa4:	1134000c 	teqne	r4, r12
    1fa8:	1135000c 	teqne	r5, r12
    1fac:	0b000075 	bleq	2188 <__aeabi_dmul+0x1f8>
    1fb0:	e0844005 	add	r4, r4, r5
    1fb4:	e0216003 	eor	r6, r1, r3
    1fb8:	e1c11a8c 	bic	r1, r1, r12, lsl #21
    1fbc:	e1c33a8c 	bic	r3, r3, r12, lsl #21
    1fc0:	e1905601 	orrs	r5, r0, r1, lsl #12
    1fc4:	11925603 	orrsne	r5, r2, r3, lsl #12
    1fc8:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    1fcc:	e3833601 	orr	r3, r3, #1048576	; 0x100000
    1fd0:	0a00001d 	beq	204c <__aeabi_dmul+0xbc>
    1fd4:	e08ec290 	umull	r12, lr, r0, r2
    1fd8:	e3a05000 	mov	r5, #0
    1fdc:	e0a5e291 	umlal	lr, r5, r1, r2
    1fe0:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
    1fe4:	e0a5e390 	umlal	lr, r5, r0, r3
    1fe8:	e3a06000 	mov	r6, #0
    1fec:	e0a65391 	umlal	r5, r6, r1, r3
    1ff0:	e33c0000 	teq	r12, #0
    1ff4:	138ee001 	orrne	lr, lr, #1
    1ff8:	e24440ff 	sub	r4, r4, #255	; 0xff
    1ffc:	e3560c02 	cmp	r6, #512	; 0x200
    2000:	e2c44c03 	sbc	r4, r4, #768	; 0x300
    2004:	2a000002 	bcs	2014 <__aeabi_dmul+0x84>
    2008:	e1b0e08e 	lsls	lr, lr, #1
    200c:	e0b55005 	adcs	r5, r5, r5
    2010:	e0a66006 	adc	r6, r6, r6
    2014:	e1821586 	orr	r1, r2, r6, lsl #11
    2018:	e1811aa5 	orr	r1, r1, r5, lsr #21
    201c:	e1a00585 	lsl	r0, r5, #11
    2020:	e1800aae 	orr	r0, r0, lr, lsr #21
    2024:	e1a0e58e 	lsl	lr, lr, #11
    2028:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    202c:	835c0c07 	cmphi	r12, #1792	; 0x700
    2030:	8a000011 	bhi	207c <__aeabi_dmul+0xec>
    2034:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
    2038:	01b0e0a0 	lsrseq	lr, r0, #1
    203c:	e2b00000 	adcs	r0, r0, #0
    2040:	e0a11a04 	adc	r1, r1, r4, lsl #20
    2044:	e8bd4070 	pop	{r4, r5, r6, lr}
    2048:	e12fff1e 	bx	lr
    204c:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
    2050:	e1861001 	orr	r1, r6, r1
    2054:	e1800002 	orr	r0, r0, r2
    2058:	e0211003 	eor	r1, r1, r3
    205c:	e05440ac 	subs	r4, r4, r12, lsr #1
    2060:	c074500c 	rsbsgt	r5, r4, r12
    2064:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    2068:	c8bd4070 	popgt	{r4, r5, r6, lr}
    206c:	c12fff1e 	bxgt	lr
    2070:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    2074:	e3a0e000 	mov	lr, #0
    2078:	e2544001 	subs	r4, r4, #1
    207c:	ca00005d 	bgt	21f8 <__aeabi_dmul+0x268>
    2080:	e3740036 	cmn	r4, #54	; 0x36
    2084:	d3a00000 	movle	r0, #0
    2088:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
    208c:	d8bd4070 	pople	{r4, r5, r6, lr}
    2090:	d12fff1e 	bxle	lr
    2094:	e2644000 	rsb	r4, r4, #0
    2098:	e2544020 	subs	r4, r4, #32
    209c:	aa00001a 	bge	210c <__aeabi_dmul+0x17c>
    20a0:	e294400c 	adds	r4, r4, #12
    20a4:	ca00000c 	bgt	20dc <__aeabi_dmul+0x14c>
    20a8:	e2844014 	add	r4, r4, #20
    20ac:	e2645020 	rsb	r5, r4, #32
    20b0:	e1a03510 	lsl	r3, r0, r5
    20b4:	e1a00430 	lsr	r0, r0, r4
    20b8:	e1800511 	orr	r0, r0, r1, lsl r5
    20bc:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
    20c0:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    20c4:	e0900fa3 	adds	r0, r0, r3, lsr #31
    20c8:	e0a21431 	adc	r1, r2, r1, lsr r4
    20cc:	e19ee083 	orrs	lr, lr, r3, lsl #1
    20d0:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    20d4:	e8bd4070 	pop	{r4, r5, r6, lr}
    20d8:	e12fff1e 	bx	lr
    20dc:	e264400c 	rsb	r4, r4, #12
    20e0:	e2645020 	rsb	r5, r4, #32
    20e4:	e1a03410 	lsl	r3, r0, r4
    20e8:	e1a00530 	lsr	r0, r0, r5
    20ec:	e1800411 	orr	r0, r0, r1, lsl r4
    20f0:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    20f4:	e0900fa3 	adds	r0, r0, r3, lsr #31
    20f8:	e2a11000 	adc	r1, r1, #0
    20fc:	e19ee083 	orrs	lr, lr, r3, lsl #1
    2100:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    2104:	e8bd4070 	pop	{r4, r5, r6, lr}
    2108:	e12fff1e 	bx	lr
    210c:	e2645020 	rsb	r5, r4, #32
    2110:	e18ee510 	orr	lr, lr, r0, lsl r5
    2114:	e1a03430 	lsr	r3, r0, r4
    2118:	e1833511 	orr	r3, r3, r1, lsl r5
    211c:	e1a00431 	lsr	r0, r1, r4
    2120:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    2124:	e1c00431 	bic	r0, r0, r1, lsr r4
    2128:	e0800fa3 	add	r0, r0, r3, lsr #31
    212c:	e19ee083 	orrs	lr, lr, r3, lsl #1
    2130:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    2134:	e8bd4070 	pop	{r4, r5, r6, lr}
    2138:	e12fff1e 	bx	lr
    213c:	e3340000 	teq	r4, #0
    2140:	1a000008 	bne	2168 <__aeabi_dmul+0x1d8>
    2144:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
    2148:	e1b00080 	lsls	r0, r0, #1
    214c:	e0a11001 	adc	r1, r1, r1
    2150:	e3110601 	tst	r1, #1048576	; 0x100000
    2154:	02444001 	subeq	r4, r4, #1
    2158:	0afffffa 	beq	2148 <__aeabi_dmul+0x1b8>
    215c:	e1811006 	orr	r1, r1, r6
    2160:	e3350000 	teq	r5, #0
    2164:	112fff1e 	bxne	lr
    2168:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
    216c:	e1b02082 	lsls	r2, r2, #1
    2170:	e0a33003 	adc	r3, r3, r3
    2174:	e3130601 	tst	r3, #1048576	; 0x100000
    2178:	02455001 	subeq	r5, r5, #1
    217c:	0afffffa 	beq	216c <__aeabi_dmul+0x1dc>
    2180:	e1833006 	orr	r3, r3, r6
    2184:	e12fff1e 	bx	lr
    2188:	e134000c 	teq	r4, r12
    218c:	e00c5a23 	and	r5, r12, r3, lsr #20
    2190:	1135000c 	teqne	r5, r12
    2194:	0a000007 	beq	21b8 <__aeabi_dmul+0x228>
    2198:	e1906081 	orrs	r6, r0, r1, lsl #1
    219c:	11926083 	orrsne	r6, r2, r3, lsl #1
    21a0:	1affffe5 	bne	213c <__aeabi_dmul+0x1ac>
    21a4:	e0211003 	eor	r1, r1, r3
    21a8:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    21ac:	e3a00000 	mov	r0, #0
    21b0:	e8bd4070 	pop	{r4, r5, r6, lr}
    21b4:	e12fff1e 	bx	lr
    21b8:	e1906081 	orrs	r6, r0, r1, lsl #1
    21bc:	01a00002 	moveq	r0, r2
    21c0:	01a01003 	moveq	r1, r3
    21c4:	11926083 	orrsne	r6, r2, r3, lsl #1
    21c8:	0a000010 	beq	2210 <__aeabi_dmul+0x280>
    21cc:	e134000c 	teq	r4, r12
    21d0:	1a000001 	bne	21dc <__aeabi_dmul+0x24c>
    21d4:	e1906601 	orrs	r6, r0, r1, lsl #12
    21d8:	1a00000c 	bne	2210 <__aeabi_dmul+0x280>
    21dc:	e135000c 	teq	r5, r12
    21e0:	1a000003 	bne	21f4 <__aeabi_dmul+0x264>
    21e4:	e1926603 	orrs	r6, r2, r3, lsl #12
    21e8:	11a00002 	movne	r0, r2
    21ec:	11a01003 	movne	r1, r3
    21f0:	1a000006 	bne	2210 <__aeabi_dmul+0x280>
    21f4:	e0211003 	eor	r1, r1, r3
    21f8:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    21fc:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    2200:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    2204:	e3a00000 	mov	r0, #0
    2208:	e8bd4070 	pop	{r4, r5, r6, lr}
    220c:	e12fff1e 	bx	lr
    2210:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    2214:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
    2218:	e8bd4070 	pop	{r4, r5, r6, lr}
    221c:	e12fff1e 	bx	lr

00002220 <__aeabi_ddiv>:
    2220:	e92d4070 	push	{r4, r5, r6, lr}
    2224:	e3a0c0ff 	mov	r12, #255	; 0xff
    2228:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    222c:	e01c4a21 	ands	r4, r12, r1, lsr #20
    2230:	101c5a23 	andsne	r5, r12, r3, lsr #20
    2234:	1134000c 	teqne	r4, r12
    2238:	1135000c 	teqne	r5, r12
    223c:	0b00005e 	bleq	23bc <__aeabi_ddiv+0x19c>
    2240:	e0444005 	sub	r4, r4, r5
    2244:	e021e003 	eor	lr, r1, r3
    2248:	e1925603 	orrs	r5, r2, r3, lsl #12
    224c:	e1a01601 	lsl	r1, r1, #12
    2250:	0a00004c 	beq	2388 <__aeabi_ddiv+0x168>
    2254:	e1a03603 	lsl	r3, r3, #12
    2258:	e3a05201 	mov	r5, #268435456	; 0x10000000
    225c:	e1853223 	orr	r3, r5, r3, lsr #4
    2260:	e1833c22 	orr	r3, r3, r2, lsr #24
    2264:	e1a02402 	lsl	r2, r2, #8
    2268:	e1855221 	orr	r5, r5, r1, lsr #4
    226c:	e1855c20 	orr	r5, r5, r0, lsr #24
    2270:	e1a06400 	lsl	r6, r0, #8
    2274:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
    2278:	e1550003 	cmp	r5, r3
    227c:	01560002 	cmpeq	r6, r2
    2280:	e2a440fd 	adc	r4, r4, #253	; 0xfd
    2284:	e2844c03 	add	r4, r4, #768	; 0x300
    2288:	2a000001 	bcs	2294 <__aeabi_ddiv+0x74>
    228c:	e1b030a3 	lsrs	r3, r3, #1
    2290:	e1a02062 	rrx	r2, r2
    2294:	e0566002 	subs	r6, r6, r2
    2298:	e0c55003 	sbc	r5, r5, r3
    229c:	e1b030a3 	lsrs	r3, r3, #1
    22a0:	e1a02062 	rrx	r2, r2
    22a4:	e3a00601 	mov	r0, #1048576	; 0x100000
    22a8:	e3a0c702 	mov	r12, #524288	; 0x80000
    22ac:	e056e002 	subs	lr, r6, r2
    22b0:	e0d5e003 	sbcs	lr, r5, r3
    22b4:	20466002 	subcs	r6, r6, r2
    22b8:	21a0500e 	movcs	r5, lr
    22bc:	2180000c 	orrcs	r0, r0, r12
    22c0:	e1b030a3 	lsrs	r3, r3, #1
    22c4:	e1a02062 	rrx	r2, r2
    22c8:	e056e002 	subs	lr, r6, r2
    22cc:	e0d5e003 	sbcs	lr, r5, r3
    22d0:	20466002 	subcs	r6, r6, r2
    22d4:	21a0500e 	movcs	r5, lr
    22d8:	218000ac 	orrcs	r0, r0, r12, lsr #1
    22dc:	e1b030a3 	lsrs	r3, r3, #1
    22e0:	e1a02062 	rrx	r2, r2
    22e4:	e056e002 	subs	lr, r6, r2
    22e8:	e0d5e003 	sbcs	lr, r5, r3
    22ec:	20466002 	subcs	r6, r6, r2
    22f0:	21a0500e 	movcs	r5, lr
    22f4:	2180012c 	orrcs	r0, r0, r12, lsr #2
    22f8:	e1b030a3 	lsrs	r3, r3, #1
    22fc:	e1a02062 	rrx	r2, r2
    2300:	e056e002 	subs	lr, r6, r2
    2304:	e0d5e003 	sbcs	lr, r5, r3
    2308:	20466002 	subcs	r6, r6, r2
    230c:	21a0500e 	movcs	r5, lr
    2310:	218001ac 	orrcs	r0, r0, r12, lsr #3
    2314:	e195e006 	orrs	lr, r5, r6
    2318:	0a00000d 	beq	2354 <__aeabi_ddiv+0x134>
    231c:	e1a05205 	lsl	r5, r5, #4
    2320:	e1855e26 	orr	r5, r5, r6, lsr #28
    2324:	e1a06206 	lsl	r6, r6, #4
    2328:	e1a03183 	lsl	r3, r3, #3
    232c:	e1833ea2 	orr	r3, r3, r2, lsr #29
    2330:	e1a02182 	lsl	r2, r2, #3
    2334:	e1b0c22c 	lsrs	r12, r12, #4
    2338:	1affffdb 	bne	22ac <__aeabi_ddiv+0x8c>
    233c:	e3110601 	tst	r1, #1048576	; 0x100000
    2340:	1a000006 	bne	2360 <__aeabi_ddiv+0x140>
    2344:	e1811000 	orr	r1, r1, r0
    2348:	e3a00000 	mov	r0, #0
    234c:	e3a0c102 	mov	r12, #-2147483648	; 0x80000000
    2350:	eaffffd5 	b	22ac <__aeabi_ddiv+0x8c>
    2354:	e3110601 	tst	r1, #1048576	; 0x100000
    2358:	01811000 	orreq	r1, r1, r0
    235c:	03a00000 	moveq	r0, #0
    2360:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    2364:	835c0c07 	cmphi	r12, #1792	; 0x700
    2368:	8affff43 	bhi	207c <__aeabi_dmul+0xec>
    236c:	e055c003 	subs	r12, r5, r3
    2370:	0056c002 	subseq	r12, r6, r2
    2374:	01b0c0a0 	lsrseq	r12, r0, #1
    2378:	e2b00000 	adcs	r0, r0, #0
    237c:	e0a11a04 	adc	r1, r1, r4, lsl #20
    2380:	e8bd4070 	pop	{r4, r5, r6, lr}
    2384:	e12fff1e 	bx	lr
    2388:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
    238c:	e18e1621 	orr	r1, lr, r1, lsr #12
    2390:	e09440ac 	adds	r4, r4, r12, lsr #1
    2394:	c074500c 	rsbsgt	r5, r4, r12
    2398:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    239c:	c8bd4070 	popgt	{r4, r5, r6, lr}
    23a0:	c12fff1e 	bxgt	lr
    23a4:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    23a8:	e3a0e000 	mov	lr, #0
    23ac:	e2544001 	subs	r4, r4, #1
    23b0:	eaffff31 	b	207c <__aeabi_dmul+0xec>
    23b4:	e185e006 	orr	lr, r5, r6
    23b8:	eaffff2f 	b	207c <__aeabi_dmul+0xec>
    23bc:	e00c5a23 	and	r5, r12, r3, lsr #20
    23c0:	e134000c 	teq	r4, r12
    23c4:	0135000c 	teqeq	r5, r12
    23c8:	0affff90 	beq	2210 <__aeabi_dmul+0x280>
    23cc:	e134000c 	teq	r4, r12
    23d0:	1a000006 	bne	23f0 <__aeabi_ddiv+0x1d0>
    23d4:	e1904601 	orrs	r4, r0, r1, lsl #12
    23d8:	1affff8c 	bne	2210 <__aeabi_dmul+0x280>
    23dc:	e135000c 	teq	r5, r12
    23e0:	1affff83 	bne	21f4 <__aeabi_dmul+0x264>
    23e4:	e1a00002 	mov	r0, r2
    23e8:	e1a01003 	mov	r1, r3
    23ec:	eaffff87 	b	2210 <__aeabi_dmul+0x280>
    23f0:	e135000c 	teq	r5, r12
    23f4:	1a000004 	bne	240c <__aeabi_ddiv+0x1ec>
    23f8:	e1925603 	orrs	r5, r2, r3, lsl #12
    23fc:	0affff68 	beq	21a4 <__aeabi_dmul+0x214>
    2400:	e1a00002 	mov	r0, r2
    2404:	e1a01003 	mov	r1, r3
    2408:	eaffff80 	b	2210 <__aeabi_dmul+0x280>
    240c:	e1906081 	orrs	r6, r0, r1, lsl #1
    2410:	11926083 	orrsne	r6, r2, r3, lsl #1
    2414:	1affff48 	bne	213c <__aeabi_dmul+0x1ac>
    2418:	e1904081 	orrs	r4, r0, r1, lsl #1
    241c:	1affff74 	bne	21f4 <__aeabi_dmul+0x264>
    2420:	e1925083 	orrs	r5, r2, r3, lsl #1
    2424:	1affff5e 	bne	21a4 <__aeabi_dmul+0x214>
    2428:	eaffff78 	b	2210 <__aeabi_dmul+0x280>

0000242c <__aeabi_d2iz>:
    242c:	e1a02081 	lsl	r2, r1, #1
    2430:	e2922602 	adds	r2, r2, #2097152	; 0x200000
    2434:	2a00000c 	bcs	246c <__aeabi_d2iz+0x40>
    2438:	5a000009 	bpl	2464 <__aeabi_d2iz+0x38>
    243c:	e3e03e3e 	mvn	r3, #992	; 0x3e0
    2440:	e0532ac2 	subs	r2, r3, r2, asr #21
    2444:	9a00000a 	bls	2474 <__aeabi_d2iz+0x48>
    2448:	e1a03581 	lsl	r3, r1, #11
    244c:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    2450:	e1833aa0 	orr	r3, r3, r0, lsr #21
    2454:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    2458:	e1a00233 	lsr	r0, r3, r2
    245c:	12600000 	rsbne	r0, r0, #0
    2460:	e12fff1e 	bx	lr
    2464:	e3a00000 	mov	r0, #0
    2468:	e12fff1e 	bx	lr
    246c:	e1900601 	orrs	r0, r0, r1, lsl #12
    2470:	1a000002 	bne	2480 <__aeabi_d2iz+0x54>
    2474:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
    2478:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    247c:	e12fff1e 	bx	lr
    2480:	e3a00000 	mov	r0, #0
    2484:	e12fff1e 	bx	lr

00002488 <__aeabi_frsub>:
    2488:	e2200102 	eor	r0, r0, #-2147483648	; 0x80000000
    248c:	ea000000 	b	2494 <__addsf3>

00002490 <__aeabi_fsub>:
    2490:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000

00002494 <__addsf3>:
    2494:	e1b02080 	lsls	r2, r0, #1
    2498:	11b03081 	lslsne	r3, r1, #1
    249c:	11320003 	teqne	r2, r3
    24a0:	11f0cc42 	mvnsne	r12, r2, asr #24
    24a4:	11f0cc43 	mvnsne	r12, r3, asr #24
    24a8:	0a000047 	beq	25cc <__addsf3+0x138>
    24ac:	e1a02c22 	lsr	r2, r2, #24
    24b0:	e0723c23 	rsbs	r3, r2, r3, lsr #24
    24b4:	c0822003 	addgt	r2, r2, r3
    24b8:	c0201001 	eorgt	r1, r0, r1
    24bc:	c0210000 	eorgt	r0, r1, r0
    24c0:	c0201001 	eorgt	r1, r0, r1
    24c4:	b2633000 	rsblt	r3, r3, #0
    24c8:	e3530019 	cmp	r3, #25
    24cc:	812fff1e 	bxhi	lr
    24d0:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    24d4:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    24d8:	e3c004ff 	bic	r0, r0, #-16777216	; 0xff000000
    24dc:	12600000 	rsbne	r0, r0, #0
    24e0:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    24e4:	e3811502 	orr	r1, r1, #8388608	; 0x800000
    24e8:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
    24ec:	12611000 	rsbne	r1, r1, #0
    24f0:	e1320003 	teq	r2, r3
    24f4:	0a00002e 	beq	25b4 <__addsf3+0x120>
    24f8:	e2422001 	sub	r2, r2, #1
    24fc:	e0900351 	adds	r0, r0, r1, asr r3
    2500:	e2633020 	rsb	r3, r3, #32
    2504:	e1a01311 	lsl	r1, r1, r3
    2508:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    250c:	5a000001 	bpl	2518 <__addsf3+0x84>
    2510:	e2711000 	rsbs	r1, r1, #0
    2514:	e2e00000 	rsc	r0, r0, #0
    2518:	e3500502 	cmp	r0, #8388608	; 0x800000
    251c:	3a00000b 	bcc	2550 <__addsf3+0xbc>
    2520:	e3500401 	cmp	r0, #16777216	; 0x1000000
    2524:	3a000004 	bcc	253c <__addsf3+0xa8>
    2528:	e1b000a0 	lsrs	r0, r0, #1
    252c:	e1a01061 	rrx	r1, r1
    2530:	e2822001 	add	r2, r2, #1
    2534:	e35200fe 	cmp	r2, #254	; 0xfe
    2538:	2a000038 	bcs	2620 <__addsf3+0x18c>
    253c:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    2540:	e0a00b82 	adc	r0, r0, r2, lsl #23
    2544:	03c00001 	biceq	r0, r0, #1
    2548:	e1800003 	orr	r0, r0, r3
    254c:	e12fff1e 	bx	lr
    2550:	e1b01081 	lsls	r1, r1, #1
    2554:	e0a00000 	adc	r0, r0, r0
    2558:	e3100502 	tst	r0, #8388608	; 0x800000
    255c:	e2422001 	sub	r2, r2, #1
    2560:	1afffff5 	bne	253c <__addsf3+0xa8>
    2564:	e1b0c620 	lsrs	r12, r0, #12
    2568:	01a00600 	lsleq	r0, r0, #12
    256c:	0242200c 	subeq	r2, r2, #12
    2570:	e31008ff 	tst	r0, #16711680	; 0xff0000
    2574:	01a00400 	lsleq	r0, r0, #8
    2578:	02422008 	subeq	r2, r2, #8
    257c:	e310060f 	tst	r0, #15728640	; 0xf00000
    2580:	01a00200 	lsleq	r0, r0, #4
    2584:	02422004 	subeq	r2, r2, #4
    2588:	e3100503 	tst	r0, #12582912	; 0xc00000
    258c:	01a00100 	lsleq	r0, r0, #2
    2590:	02422002 	subeq	r2, r2, #2
    2594:	e3500502 	cmp	r0, #8388608	; 0x800000
    2598:	31a00080 	lslcc	r0, r0, #1
    259c:	e2d22000 	sbcs	r2, r2, #0
    25a0:	a0800b82 	addge	r0, r0, r2, lsl #23
    25a4:	b2622000 	rsblt	r2, r2, #0
    25a8:	a1800003 	orrge	r0, r0, r3
    25ac:	b1830230 	orrlt	r0, r3, r0, lsr r2
    25b0:	e12fff1e 	bx	lr
    25b4:	e3320000 	teq	r2, #0
    25b8:	e2211502 	eor	r1, r1, #8388608	; 0x800000
    25bc:	02200502 	eoreq	r0, r0, #8388608	; 0x800000
    25c0:	02822001 	addeq	r2, r2, #1
    25c4:	12433001 	subne	r3, r3, #1
    25c8:	eaffffca 	b	24f8 <__addsf3+0x64>
    25cc:	e1a03081 	lsl	r3, r1, #1
    25d0:	e1f0cc42 	mvns	r12, r2, asr #24
    25d4:	11f0cc43 	mvnsne	r12, r3, asr #24
    25d8:	0a000013 	beq	262c <__addsf3+0x198>
    25dc:	e1320003 	teq	r2, r3
    25e0:	0a000002 	beq	25f0 <__addsf3+0x15c>
    25e4:	e3320000 	teq	r2, #0
    25e8:	01a00001 	moveq	r0, r1
    25ec:	e12fff1e 	bx	lr
    25f0:	e1300001 	teq	r0, r1
    25f4:	13a00000 	movne	r0, #0
    25f8:	112fff1e 	bxne	lr
    25fc:	e31204ff 	tst	r2, #-16777216	; 0xff000000
    2600:	1a000002 	bne	2610 <__addsf3+0x17c>
    2604:	e1b00080 	lsls	r0, r0, #1
    2608:	23800102 	orrcs	r0, r0, #-2147483648	; 0x80000000
    260c:	e12fff1e 	bx	lr
    2610:	e2922402 	adds	r2, r2, #33554432	; 0x2000000
    2614:	32800502 	addcc	r0, r0, #8388608	; 0x800000
    2618:	312fff1e 	bxcc	lr
    261c:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    2620:	e383047f 	orr	r0, r3, #2130706432	; 0x7f000000
    2624:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    2628:	e12fff1e 	bx	lr
    262c:	e1f02c42 	mvns	r2, r2, asr #24
    2630:	11a00001 	movne	r0, r1
    2634:	01f03c43 	mvnseq	r3, r3, asr #24
    2638:	11a01000 	movne	r1, r0
    263c:	e1b02480 	lsls	r2, r0, #9
    2640:	01b03481 	lslseq	r3, r1, #9
    2644:	01300001 	teqeq	r0, r1
    2648:	13800501 	orrne	r0, r0, #4194304	; 0x400000
    264c:	e12fff1e 	bx	lr

00002650 <__aeabi_ui2f>:
    2650:	e3a03000 	mov	r3, #0
    2654:	ea000001 	b	2660 <__aeabi_i2f+0x8>

00002658 <__aeabi_i2f>:
    2658:	e2103102 	ands	r3, r0, #-2147483648	; 0x80000000
    265c:	42600000 	rsbmi	r0, r0, #0
    2660:	e1b0c000 	movs	r12, r0
    2664:	012fff1e 	bxeq	lr
    2668:	e383344b 	orr	r3, r3, #1258291200	; 0x4b000000
    266c:	e1a01000 	mov	r1, r0
    2670:	e3a00000 	mov	r0, #0
    2674:	ea00000f 	b	26b8 <__aeabi_l2f+0x30>

00002678 <__aeabi_ul2f>:
    2678:	e1902001 	orrs	r2, r0, r1
    267c:	012fff1e 	bxeq	lr
    2680:	e3a03000 	mov	r3, #0
    2684:	ea000005 	b	26a0 <__aeabi_l2f+0x18>

00002688 <__aeabi_l2f>:
    2688:	e1902001 	orrs	r2, r0, r1
    268c:	012fff1e 	bxeq	lr
    2690:	e2113102 	ands	r3, r1, #-2147483648	; 0x80000000
    2694:	5a000001 	bpl	26a0 <__aeabi_l2f+0x18>
    2698:	e2700000 	rsbs	r0, r0, #0
    269c:	e2e11000 	rsc	r1, r1, #0
    26a0:	e1b0c001 	movs	r12, r1
    26a4:	01a0c000 	moveq	r12, r0
    26a8:	01a01000 	moveq	r1, r0
    26ac:	03a00000 	moveq	r0, #0
    26b0:	e383345b 	orr	r3, r3, #1526726656	; 0x5b000000
    26b4:	02433201 	subeq	r3, r3, #268435456	; 0x10000000
    26b8:	e2433502 	sub	r3, r3, #8388608	; 0x800000
    26bc:	e3a02017 	mov	r2, #23
    26c0:	e35c0801 	cmp	r12, #65536	; 0x10000
    26c4:	21a0c82c 	lsrcs	r12, r12, #16
    26c8:	22422010 	subcs	r2, r2, #16
    26cc:	e35c0c01 	cmp	r12, #256	; 0x100
    26d0:	21a0c42c 	lsrcs	r12, r12, #8
    26d4:	22422008 	subcs	r2, r2, #8
    26d8:	e35c0010 	cmp	r12, #16
    26dc:	21a0c22c 	lsrcs	r12, r12, #4
    26e0:	22422004 	subcs	r2, r2, #4
    26e4:	e35c0004 	cmp	r12, #4
    26e8:	22422002 	subcs	r2, r2, #2
    26ec:	304220ac 	subcc	r2, r2, r12, lsr #1
    26f0:	e05221ac 	subs	r2, r2, r12, lsr #3
    26f4:	e0433b82 	sub	r3, r3, r2, lsl #23
    26f8:	ba000006 	blt	2718 <__aeabi_l2f+0x90>
    26fc:	e0833211 	add	r3, r3, r1, lsl r2
    2700:	e1a0c210 	lsl	r12, r0, r2
    2704:	e2622020 	rsb	r2, r2, #32
    2708:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    270c:	e0a30230 	adc	r0, r3, r0, lsr r2
    2710:	03c00001 	biceq	r0, r0, #1
    2714:	e12fff1e 	bx	lr
    2718:	e2822020 	add	r2, r2, #32
    271c:	e1a0c211 	lsl	r12, r1, r2
    2720:	e2622020 	rsb	r2, r2, #32
    2724:	e190008c 	orrs	r0, r0, r12, lsl #1
    2728:	e0a30231 	adc	r0, r3, r1, lsr r2
    272c:	01c00fac 	biceq	r0, r0, r12, lsr #31
    2730:	e12fff1e 	bx	lr

00002734 <__aeabi_fmul>:
    2734:	e3a0c0ff 	mov	r12, #255	; 0xff
    2738:	e01c2ba0 	ands	r2, r12, r0, lsr #23
    273c:	101c3ba1 	andsne	r3, r12, r1, lsr #23
    2740:	1132000c 	teqne	r2, r12
    2744:	1133000c 	teqne	r3, r12
    2748:	0a00003e 	beq	2848 <__aeabi_fmul+0x114>
    274c:	e0822003 	add	r2, r2, r3
    2750:	e020c001 	eor	r12, r0, r1
    2754:	e1b00480 	lsls	r0, r0, #9
    2758:	11b01481 	lslsne	r1, r1, #9
    275c:	0a000010 	beq	27a4 <__aeabi_fmul+0x70>
    2760:	e3a03302 	mov	r3, #134217728	; 0x8000000
    2764:	e18302a0 	orr	r0, r3, r0, lsr #5
    2768:	e18312a1 	orr	r1, r3, r1, lsr #5
    276c:	e0813190 	umull	r3, r1, r0, r1
    2770:	e20c0102 	and	r0, r12, #-2147483648	; 0x80000000
    2774:	e3510502 	cmp	r1, #8388608	; 0x800000
    2778:	31a01081 	lslcc	r1, r1, #1
    277c:	31811fa3 	orrcc	r1, r1, r3, lsr #31
    2780:	31a03083 	lslcc	r3, r3, #1
    2784:	e1800001 	orr	r0, r0, r1
    2788:	e2c2207f 	sbc	r2, r2, #127	; 0x7f
    278c:	e35200fd 	cmp	r2, #253	; 0xfd
    2790:	8a00000f 	bhi	27d4 <__aeabi_fmul+0xa0>
    2794:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    2798:	e0a00b82 	adc	r0, r0, r2, lsl #23
    279c:	03c00001 	biceq	r0, r0, #1
    27a0:	e12fff1e 	bx	lr
    27a4:	e3300000 	teq	r0, #0
    27a8:	e20cc102 	and	r12, r12, #-2147483648	; 0x80000000
    27ac:	01a01481 	lsleq	r1, r1, #9
    27b0:	e18c04a0 	orr	r0, r12, r0, lsr #9
    27b4:	e18004a1 	orr	r0, r0, r1, lsr #9
    27b8:	e252207f 	subs	r2, r2, #127	; 0x7f
    27bc:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    27c0:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    27c4:	c12fff1e 	bxgt	lr
    27c8:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    27cc:	e3a03000 	mov	r3, #0
    27d0:	e2522001 	subs	r2, r2, #1
    27d4:	ca000035 	bgt	28b0 <__aeabi_fmul+0x17c>
    27d8:	e3720019 	cmn	r2, #25
    27dc:	d2000102 	andle	r0, r0, #-2147483648	; 0x80000000
    27e0:	d12fff1e 	bxle	lr
    27e4:	e2622000 	rsb	r2, r2, #0
    27e8:	e1b01080 	lsls	r1, r0, #1
    27ec:	e1a01231 	lsr	r1, r1, r2
    27f0:	e2622020 	rsb	r2, r2, #32
    27f4:	e1a0c210 	lsl	r12, r0, r2
    27f8:	e1b00061 	rrxs	r0, r1
    27fc:	e2a00000 	adc	r0, r0, #0
    2800:	e193308c 	orrs	r3, r3, r12, lsl #1
    2804:	01c00fac 	biceq	r0, r0, r12, lsr #31
    2808:	e12fff1e 	bx	lr
    280c:	e3320000 	teq	r2, #0
    2810:	e200c102 	and	r12, r0, #-2147483648	; 0x80000000
    2814:	01a00080 	lsleq	r0, r0, #1
    2818:	03100502 	tsteq	r0, #8388608	; 0x800000
    281c:	02422001 	subeq	r2, r2, #1
    2820:	0afffffb 	beq	2814 <__aeabi_fmul+0xe0>
    2824:	e180000c 	orr	r0, r0, r12
    2828:	e3330000 	teq	r3, #0
    282c:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    2830:	01a01081 	lsleq	r1, r1, #1
    2834:	03110502 	tsteq	r1, #8388608	; 0x800000
    2838:	02433001 	subeq	r3, r3, #1
    283c:	0afffffb 	beq	2830 <__aeabi_fmul+0xfc>
    2840:	e181100c 	orr	r1, r1, r12
    2844:	eaffffc0 	b	274c <__aeabi_fmul+0x18>
    2848:	e00c3ba1 	and	r3, r12, r1, lsr #23
    284c:	e132000c 	teq	r2, r12
    2850:	1133000c 	teqne	r3, r12
    2854:	0a000005 	beq	2870 <__aeabi_fmul+0x13c>
    2858:	e3d0c102 	bics	r12, r0, #-2147483648	; 0x80000000
    285c:	13d1c102 	bicsne	r12, r1, #-2147483648	; 0x80000000
    2860:	1affffe9 	bne	280c <__aeabi_fmul+0xd8>
    2864:	e0200001 	eor	r0, r0, r1
    2868:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    286c:	e12fff1e 	bx	lr
    2870:	e3300000 	teq	r0, #0
    2874:	13300102 	teqne	r0, #-2147483648	; 0x80000000
    2878:	01a00001 	moveq	r0, r1
    287c:	13310000 	teqne	r1, #0
    2880:	13310102 	teqne	r1, #-2147483648	; 0x80000000
    2884:	0a00000d 	beq	28c0 <__aeabi_fmul+0x18c>
    2888:	e132000c 	teq	r2, r12
    288c:	1a000001 	bne	2898 <__aeabi_fmul+0x164>
    2890:	e1b02480 	lsls	r2, r0, #9
    2894:	1a000009 	bne	28c0 <__aeabi_fmul+0x18c>
    2898:	e133000c 	teq	r3, r12
    289c:	1a000002 	bne	28ac <__aeabi_fmul+0x178>
    28a0:	e1b03481 	lsls	r3, r1, #9
    28a4:	11a00001 	movne	r0, r1
    28a8:	1a000004 	bne	28c0 <__aeabi_fmul+0x18c>
    28ac:	e0200001 	eor	r0, r0, r1
    28b0:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    28b4:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    28b8:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    28bc:	e12fff1e 	bx	lr
    28c0:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    28c4:	e3800503 	orr	r0, r0, #12582912	; 0xc00000
    28c8:	e12fff1e 	bx	lr

000028cc <__aeabi_fdiv>:
    28cc:	e3a0c0ff 	mov	r12, #255	; 0xff
    28d0:	e01c2ba0 	ands	r2, r12, r0, lsr #23
    28d4:	101c3ba1 	andsne	r3, r12, r1, lsr #23
    28d8:	1132000c 	teqne	r2, r12
    28dc:	1133000c 	teqne	r3, r12
    28e0:	0a00003a 	beq	29d0 <__aeabi_fdiv+0x104>
    28e4:	e0422003 	sub	r2, r2, r3
    28e8:	e020c001 	eor	r12, r0, r1
    28ec:	e1b01481 	lsls	r1, r1, #9
    28f0:	e1a00480 	lsl	r0, r0, #9
    28f4:	0a00001c 	beq	296c <__aeabi_fdiv+0xa0>
    28f8:	e3a03201 	mov	r3, #268435456	; 0x10000000
    28fc:	e1831221 	orr	r1, r3, r1, lsr #4
    2900:	e1833220 	orr	r3, r3, r0, lsr #4
    2904:	e20c0102 	and	r0, r12, #-2147483648	; 0x80000000
    2908:	e1530001 	cmp	r3, r1
    290c:	31a03083 	lslcc	r3, r3, #1
    2910:	e2a2207d 	adc	r2, r2, #125	; 0x7d
    2914:	e3a0c502 	mov	r12, #8388608	; 0x800000
    2918:	e1530001 	cmp	r3, r1
    291c:	20433001 	subcs	r3, r3, r1
    2920:	2180000c 	orrcs	r0, r0, r12
    2924:	e15300a1 	cmp	r3, r1, lsr #1
    2928:	204330a1 	subcs	r3, r3, r1, lsr #1
    292c:	218000ac 	orrcs	r0, r0, r12, lsr #1
    2930:	e1530121 	cmp	r3, r1, lsr #2
    2934:	20433121 	subcs	r3, r3, r1, lsr #2
    2938:	2180012c 	orrcs	r0, r0, r12, lsr #2
    293c:	e15301a1 	cmp	r3, r1, lsr #3
    2940:	204331a1 	subcs	r3, r3, r1, lsr #3
    2944:	218001ac 	orrcs	r0, r0, r12, lsr #3
    2948:	e1b03203 	lsls	r3, r3, #4
    294c:	11b0c22c 	lsrsne	r12, r12, #4
    2950:	1afffff0 	bne	2918 <__aeabi_fdiv+0x4c>
    2954:	e35200fd 	cmp	r2, #253	; 0xfd
    2958:	8affff9d 	bhi	27d4 <__aeabi_fmul+0xa0>
    295c:	e1530001 	cmp	r3, r1
    2960:	e0a00b82 	adc	r0, r0, r2, lsl #23
    2964:	03c00001 	biceq	r0, r0, #1
    2968:	e12fff1e 	bx	lr
    296c:	e20cc102 	and	r12, r12, #-2147483648	; 0x80000000
    2970:	e18c04a0 	orr	r0, r12, r0, lsr #9
    2974:	e292207f 	adds	r2, r2, #127	; 0x7f
    2978:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    297c:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    2980:	c12fff1e 	bxgt	lr
    2984:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    2988:	e3a03000 	mov	r3, #0
    298c:	e2522001 	subs	r2, r2, #1
    2990:	eaffff8f 	b	27d4 <__aeabi_fmul+0xa0>
    2994:	e3320000 	teq	r2, #0
    2998:	e200c102 	and	r12, r0, #-2147483648	; 0x80000000
    299c:	01a00080 	lsleq	r0, r0, #1
    29a0:	03100502 	tsteq	r0, #8388608	; 0x800000
    29a4:	02422001 	subeq	r2, r2, #1
    29a8:	0afffffb 	beq	299c <__aeabi_fdiv+0xd0>
    29ac:	e180000c 	orr	r0, r0, r12
    29b0:	e3330000 	teq	r3, #0
    29b4:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    29b8:	01a01081 	lsleq	r1, r1, #1
    29bc:	03110502 	tsteq	r1, #8388608	; 0x800000
    29c0:	02433001 	subeq	r3, r3, #1
    29c4:	0afffffb 	beq	29b8 <__aeabi_fdiv+0xec>
    29c8:	e181100c 	orr	r1, r1, r12
    29cc:	eaffffc4 	b	28e4 <__aeabi_fdiv+0x18>
    29d0:	e00c3ba1 	and	r3, r12, r1, lsr #23
    29d4:	e132000c 	teq	r2, r12
    29d8:	1a000005 	bne	29f4 <__aeabi_fdiv+0x128>
    29dc:	e1b02480 	lsls	r2, r0, #9
    29e0:	1affffb6 	bne	28c0 <__aeabi_fmul+0x18c>
    29e4:	e133000c 	teq	r3, r12
    29e8:	1affffaf 	bne	28ac <__aeabi_fmul+0x178>
    29ec:	e1a00001 	mov	r0, r1
    29f0:	eaffffb2 	b	28c0 <__aeabi_fmul+0x18c>
    29f4:	e133000c 	teq	r3, r12
    29f8:	1a000003 	bne	2a0c <__aeabi_fdiv+0x140>
    29fc:	e1b03481 	lsls	r3, r1, #9
    2a00:	0affff97 	beq	2864 <__aeabi_fmul+0x130>
    2a04:	e1a00001 	mov	r0, r1
    2a08:	eaffffac 	b	28c0 <__aeabi_fmul+0x18c>
    2a0c:	e3d0c102 	bics	r12, r0, #-2147483648	; 0x80000000
    2a10:	13d1c102 	bicsne	r12, r1, #-2147483648	; 0x80000000
    2a14:	1affffde 	bne	2994 <__aeabi_fdiv+0xc8>
    2a18:	e3d02102 	bics	r2, r0, #-2147483648	; 0x80000000
    2a1c:	1affffa2 	bne	28ac <__aeabi_fmul+0x178>
    2a20:	e3d13102 	bics	r3, r1, #-2147483648	; 0x80000000
    2a24:	1affff8e 	bne	2864 <__aeabi_fmul+0x130>
    2a28:	eaffffa4 	b	28c0 <__aeabi_fmul+0x18c>

00002a2c <__aeabi_f2iz>:
    2a2c:	e1a02080 	lsl	r2, r0, #1
    2a30:	e352047f 	cmp	r2, #2130706432	; 0x7f000000
    2a34:	3a000008 	bcc	2a5c <__aeabi_f2iz+0x30>
    2a38:	e3a0309e 	mov	r3, #158	; 0x9e
    2a3c:	e0532c22 	subs	r2, r3, r2, lsr #24
    2a40:	9a000007 	bls	2a64 <__aeabi_f2iz+0x38>
    2a44:	e1a03400 	lsl	r3, r0, #8
    2a48:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    2a4c:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    2a50:	e1a00233 	lsr	r0, r3, r2
    2a54:	12600000 	rsbne	r0, r0, #0
    2a58:	e12fff1e 	bx	lr
    2a5c:	e3a00000 	mov	r0, #0
    2a60:	e12fff1e 	bx	lr
    2a64:	e3720061 	cmn	r2, #97	; 0x61
    2a68:	1a000001 	bne	2a74 <__aeabi_f2iz+0x48>
    2a6c:	e1b02480 	lsls	r2, r0, #9
    2a70:	1a000002 	bne	2a80 <__aeabi_f2iz+0x54>
    2a74:	e2100102 	ands	r0, r0, #-2147483648	; 0x80000000
    2a78:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    2a7c:	e12fff1e 	bx	lr
    2a80:	e3a00000 	mov	r0, #0
    2a84:	e12fff1e 	bx	lr

00002a88 <atexit>:
    2a88:	e1a01000 	mov	r1, r0
    2a8c:	e3a00000 	mov	r0, #0
    2a90:	e92d4008 	push	{r3, lr}
    2a94:	e1a02000 	mov	r2, r0
    2a98:	e1a03000 	mov	r3, r0
    2a9c:	eb00000e 	bl	2adc <__register_exitproc>
    2aa0:	e8bd4008 	pop	{r3, lr}
    2aa4:	e12fff1e 	bx	lr

00002aa8 <exit>:
    2aa8:	e92d4008 	push	{r3, lr}
    2aac:	e3a01000 	mov	r1, #0
    2ab0:	e1a04000 	mov	r4, r0
    2ab4:	eb000045 	bl	2bd0 <__call_exitprocs>
    2ab8:	e59f3018 	ldr	r3, [pc, #24]	; 2ad8 <exit+0x30>
    2abc:	e5930000 	ldr	r0, [r3]
    2ac0:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    2ac4:	e3530000 	cmp	r3, #0
    2ac8:	11a0e00f 	movne	lr, pc
    2acc:	112fff13 	bxne	r3
    2ad0:	e1a00004 	mov	r0, r4
    2ad4:	eb0000c9 	bl	2e00 <_exit>
    2ad8:	00002f28 	.word	0x00002f28

00002adc <__register_exitproc>:
    2adc:	e59fc0e4 	ldr	r12, [pc, #228]	; 2bc8 <__register_exitproc+0xec>
    2ae0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    2ae4:	e59c4000 	ldr	r4, [r12]
    2ae8:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    2aec:	e35c0000 	cmp	r12, #0
    2af0:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    2af4:	e59c5004 	ldr	r5, [r12, #4]
    2af8:	0584c148 	streq	r12, [r4, #328]	; 0x148
    2afc:	e355001f 	cmp	r5, #31
    2b00:	e24dd010 	sub	sp, sp, #16
    2b04:	e1a06000 	mov	r6, r0
    2b08:	da000015 	ble	2b64 <__register_exitproc+0x88>
    2b0c:	e59f00b8 	ldr	r0, [pc, #184]	; 2bcc <__register_exitproc+0xf0>
    2b10:	e3500000 	cmp	r0, #0
    2b14:	1a000001 	bne	2b20 <__register_exitproc+0x44>
    2b18:	e3e00000 	mvn	r0, #0
    2b1c:	ea000018 	b	2b84 <__register_exitproc+0xa8>
    2b20:	e3a00e19 	mov	r0, #400	; 0x190
    2b24:	e58d100c 	str	r1, [sp, #12]
    2b28:	e58d2008 	str	r2, [sp, #8]
    2b2c:	e58d3004 	str	r3, [sp, #4]
    2b30:	e320f000 	nop	{0}
    2b34:	e250c000 	subs	r12, r0, #0
    2b38:	e59d100c 	ldr	r1, [sp, #12]
    2b3c:	e59d2008 	ldr	r2, [sp, #8]
    2b40:	e59d3004 	ldr	r3, [sp, #4]
    2b44:	0afffff3 	beq	2b18 <__register_exitproc+0x3c>
    2b48:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    2b4c:	e3a00000 	mov	r0, #0
    2b50:	e58c0004 	str	r0, [r12, #4]
    2b54:	e58c5000 	str	r5, [r12]
    2b58:	e584c148 	str	r12, [r4, #328]	; 0x148
    2b5c:	e58c0188 	str	r0, [r12, #392]	; 0x188
    2b60:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    2b64:	e3560000 	cmp	r6, #0
    2b68:	e59c4004 	ldr	r4, [r12, #4]
    2b6c:	1a000007 	bne	2b90 <__register_exitproc+0xb4>
    2b70:	e2843002 	add	r3, r4, #2
    2b74:	e2844001 	add	r4, r4, #1
    2b78:	e78c1103 	str	r1, [r12, r3, lsl #2]
    2b7c:	e58c4004 	str	r4, [r12, #4]
    2b80:	e3a00000 	mov	r0, #0
    2b84:	e28dd010 	add	sp, sp, #16
    2b88:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    2b8c:	e12fff1e 	bx	lr
    2b90:	e3a00001 	mov	r0, #1
    2b94:	e1a00410 	lsl	r0, r0, r4
    2b98:	e08c8104 	add	r8, r12, r4, lsl #2
    2b9c:	e3560002 	cmp	r6, #2
    2ba0:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    2ba4:	e5883108 	str	r3, [r8, #264]	; 0x108
    2ba8:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    2bac:	e1877000 	orr	r7, r7, r0
    2bb0:	01830000 	orreq	r0, r3, r0
    2bb4:	e1a05008 	mov	r5, r8
    2bb8:	e5882088 	str	r2, [r8, #136]	; 0x88
    2bbc:	e58c7188 	str	r7, [r12, #392]	; 0x188
    2bc0:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    2bc4:	eaffffe9 	b	2b70 <__register_exitproc+0x94>
    2bc8:	00002f28 	.word	0x00002f28
    2bcc:	00000000 	.word	0x00000000

00002bd0 <__call_exitprocs>:
    2bd0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2bd4:	e59f3168 	ldr	r3, [pc, #360]	; 2d44 <__call_exitprocs+0x174>
    2bd8:	e5933000 	ldr	r3, [r3]
    2bdc:	e24dd014 	sub	sp, sp, #20
    2be0:	e58d3004 	str	r3, [sp, #4]
    2be4:	e2833f52 	add	r3, r3, #328	; 0x148
    2be8:	e58d0008 	str	r0, [sp, #8]
    2bec:	e58d300c 	str	r3, [sp, #12]
    2bf0:	e1a07001 	mov	r7, r1
    2bf4:	e3a08001 	mov	r8, #1
    2bf8:	e59d3004 	ldr	r3, [sp, #4]
    2bfc:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    2c00:	e3560000 	cmp	r6, #0
    2c04:	e59db00c 	ldr	r11, [sp, #12]
    2c08:	0a000033 	beq	2cdc <__call_exitprocs+0x10c>
    2c0c:	e5965004 	ldr	r5, [r6, #4]
    2c10:	e2554001 	subs	r4, r5, #1
    2c14:	5286a088 	addpl	r10, r6, #136	; 0x88
    2c18:	5285501f 	addpl	r5, r5, #31
    2c1c:	508a5105 	addpl	r5, r10, r5, lsl #2
    2c20:	5a000007 	bpl	2c44 <__call_exitprocs+0x74>
    2c24:	ea000029 	b	2cd0 <__call_exitprocs+0x100>
    2c28:	e5953000 	ldr	r3, [r5]
    2c2c:	e1530007 	cmp	r3, r7
    2c30:	0a000005 	beq	2c4c <__call_exitprocs+0x7c>
    2c34:	e2444001 	sub	r4, r4, #1
    2c38:	e3740001 	cmn	r4, #1
    2c3c:	e2455004 	sub	r5, r5, #4
    2c40:	0a000022 	beq	2cd0 <__call_exitprocs+0x100>
    2c44:	e3570000 	cmp	r7, #0
    2c48:	1afffff6 	bne	2c28 <__call_exitprocs+0x58>
    2c4c:	e5963004 	ldr	r3, [r6, #4]
    2c50:	e06a2005 	rsb	r2, r10, r5
    2c54:	e2433001 	sub	r3, r3, #1
    2c58:	e0862002 	add	r2, r6, r2
    2c5c:	e1530004 	cmp	r3, r4
    2c60:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    2c64:	13a01000 	movne	r1, #0
    2c68:	05864004 	streq	r4, [r6, #4]
    2c6c:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    2c70:	e3530000 	cmp	r3, #0
    2c74:	0affffee 	beq	2c34 <__call_exitprocs+0x64>
    2c78:	e1a02418 	lsl	r2, r8, r4
    2c7c:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    2c80:	e1120001 	tst	r2, r1
    2c84:	e5969004 	ldr	r9, [r6, #4]
    2c88:	0a000016 	beq	2ce8 <__call_exitprocs+0x118>
    2c8c:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    2c90:	e1120001 	tst	r2, r1
    2c94:	1a000016 	bne	2cf4 <__call_exitprocs+0x124>
    2c98:	e59d0008 	ldr	r0, [sp, #8]
    2c9c:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    2ca0:	e1a0e00f 	mov	lr, pc
    2ca4:	e12fff13 	bx	r3
    2ca8:	e5963004 	ldr	r3, [r6, #4]
    2cac:	e1530009 	cmp	r3, r9
    2cb0:	1affffd0 	bne	2bf8 <__call_exitprocs+0x28>
    2cb4:	e59b3000 	ldr	r3, [r11]
    2cb8:	e1530006 	cmp	r3, r6
    2cbc:	1affffcd 	bne	2bf8 <__call_exitprocs+0x28>
    2cc0:	e2444001 	sub	r4, r4, #1
    2cc4:	e3740001 	cmn	r4, #1
    2cc8:	e2455004 	sub	r5, r5, #4
    2ccc:	1affffdc 	bne	2c44 <__call_exitprocs+0x74>
    2cd0:	e59f1070 	ldr	r1, [pc, #112]	; 2d48 <__call_exitprocs+0x178>
    2cd4:	e3510000 	cmp	r1, #0
    2cd8:	1a000009 	bne	2d04 <__call_exitprocs+0x134>
    2cdc:	e28dd014 	add	sp, sp, #20
    2ce0:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2ce4:	e12fff1e 	bx	lr
    2ce8:	e1a0e00f 	mov	lr, pc
    2cec:	e12fff13 	bx	r3
    2cf0:	eaffffec 	b	2ca8 <__call_exitprocs+0xd8>
    2cf4:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    2cf8:	e1a0e00f 	mov	lr, pc
    2cfc:	e12fff13 	bx	r3
    2d00:	eaffffe8 	b	2ca8 <__call_exitprocs+0xd8>
    2d04:	e5963004 	ldr	r3, [r6, #4]
    2d08:	e3530000 	cmp	r3, #0
    2d0c:	e5963000 	ldr	r3, [r6]
    2d10:	1a000008 	bne	2d38 <__call_exitprocs+0x168>
    2d14:	e3530000 	cmp	r3, #0
    2d18:	0a000006 	beq	2d38 <__call_exitprocs+0x168>
    2d1c:	e1a00006 	mov	r0, r6
    2d20:	e58b3000 	str	r3, [r11]
    2d24:	e320f000 	nop	{0}
    2d28:	e59b6000 	ldr	r6, [r11]
    2d2c:	e3560000 	cmp	r6, #0
    2d30:	1affffb5 	bne	2c0c <__call_exitprocs+0x3c>
    2d34:	eaffffe8 	b	2cdc <__call_exitprocs+0x10c>
    2d38:	e1a0b006 	mov	r11, r6
    2d3c:	e1a06003 	mov	r6, r3
    2d40:	eafffff9 	b	2d2c <__call_exitprocs+0x15c>
    2d44:	00002f28 	.word	0x00002f28
    2d48:	00000000 	.word	0x00000000

00002d4c <register_fini>:
    2d4c:	e92d4008 	push	{r3, lr}
    2d50:	e59f3010 	ldr	r3, [pc, #16]	; 2d68 <register_fini+0x1c>
    2d54:	e3530000 	cmp	r3, #0
    2d58:	159f000c 	ldrne	r0, [pc, #12]	; 2d6c <register_fini+0x20>
    2d5c:	1bffff49 	blne	2a88 <atexit>
    2d60:	e8bd4008 	pop	{r3, lr}
    2d64:	e12fff1e 	bx	lr
    2d68:	00002f50 	.word	0x00002f50
    2d6c:	00002d70 	.word	0x00002d70

00002d70 <__libc_fini_array>:
    2d70:	e92d4038 	push	{r3, r4, r5, lr}
    2d74:	e59f5030 	ldr	r5, [pc, #48]	; 2dac <__libc_fini_array+0x3c>
    2d78:	e59f4030 	ldr	r4, [pc, #48]	; 2db0 <__libc_fini_array+0x40>
    2d7c:	e0654004 	rsb	r4, r5, r4
    2d80:	e1b04144 	asrs	r4, r4, #2
    2d84:	10855104 	addne	r5, r5, r4, lsl #2
    2d88:	0a000004 	beq	2da0 <__libc_fini_array+0x30>
    2d8c:	e5353004 	ldr	r3, [r5, #-4]!
    2d90:	e1a0e00f 	mov	lr, pc
    2d94:	e12fff13 	bx	r3
    2d98:	e2544001 	subs	r4, r4, #1
    2d9c:	1afffffa 	bne	2d8c <__libc_fini_array+0x1c>
    2da0:	eb00006a 	bl	2f50 <__libc_fini>
    2da4:	e8bd4038 	pop	{r3, r4, r5, lr}
    2da8:	e12fff1e 	bx	lr
    2dac:	00002f68 	.word	0x00002f68
    2db0:	00002f6c 	.word	0x00002f6c

00002db4 <__cs3_premain>:
    2db4:	e92d4008 	push	{r3, lr}
    2db8:	eb000017 	bl	2e1c <__libc_init_array>
    2dbc:	e59f3030 	ldr	r3, [pc, #48]	; 2df4 <__cs3_premain+0x40>
    2dc0:	e3530000 	cmp	r3, #0
    2dc4:	15930000 	ldrne	r0, [r3]
    2dc8:	01a00003 	moveq	r0, r3
    2dcc:	e59f3024 	ldr	r3, [pc, #36]	; 2df8 <__cs3_premain+0x44>
    2dd0:	e3530000 	cmp	r3, #0
    2dd4:	15931000 	ldrne	r1, [r3]
    2dd8:	01a01003 	moveq	r1, r3
    2ddc:	e3a02000 	mov	r2, #0
    2de0:	ebfff9a2 	bl	1470 <main>
    2de4:	e59f3010 	ldr	r3, [pc, #16]	; 2dfc <__cs3_premain+0x48>
    2de8:	e3530000 	cmp	r3, #0
    2dec:	1bffff2d 	blne	2aa8 <exit>
    2df0:	eafffffe 	b	2df0 <__cs3_premain+0x3c>
	...
    2dfc:	00002aa8 	.word	0x00002aa8

00002e00 <_exit>:
    2e00:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    2e04:	e3a00018 	mov	r0, #24
    2e08:	e59f1004 	ldr	r1, [pc, #4]	; 2e14 <_exit+0x14>
    2e0c:	ef123456 	svc	0x00123456
    2e10:	eafffffe 	b	2e10 <_exit+0x10>
    2e14:	00020026 	.word	0x00020026

00002e18 <__cs3_isr_interrupt>:
    2e18:	eafffffe 	b	2e18 <__cs3_isr_interrupt>

00002e1c <__libc_init_array>:
    2e1c:	e92d4070 	push	{r4, r5, r6, lr}
    2e20:	e59f506c 	ldr	r5, [pc, #108]	; 2e94 <__libc_init_array+0x78>
    2e24:	e59f606c 	ldr	r6, [pc, #108]	; 2e98 <__libc_init_array+0x7c>
    2e28:	e0656006 	rsb	r6, r5, r6
    2e2c:	e1b06146 	asrs	r6, r6, #2
    2e30:	12455004 	subne	r5, r5, #4
    2e34:	13a04000 	movne	r4, #0
    2e38:	0a000005 	beq	2e54 <__libc_init_array+0x38>
    2e3c:	e5b53004 	ldr	r3, [r5, #4]!
    2e40:	e2844001 	add	r4, r4, #1
    2e44:	e1a0e00f 	mov	lr, pc
    2e48:	e12fff13 	bx	r3
    2e4c:	e1560004 	cmp	r6, r4
    2e50:	1afffff9 	bne	2e3c <__libc_init_array+0x20>
    2e54:	e59f5040 	ldr	r5, [pc, #64]	; 2e9c <__libc_init_array+0x80>
    2e58:	e59f6040 	ldr	r6, [pc, #64]	; 2ea0 <__libc_init_array+0x84>
    2e5c:	e0656006 	rsb	r6, r5, r6
    2e60:	eb000032 	bl	2f30 <_init>
    2e64:	e1b06146 	asrs	r6, r6, #2
    2e68:	12455004 	subne	r5, r5, #4
    2e6c:	13a04000 	movne	r4, #0
    2e70:	0a000005 	beq	2e8c <__libc_init_array+0x70>
    2e74:	e5b53004 	ldr	r3, [r5, #4]!
    2e78:	e2844001 	add	r4, r4, #1
    2e7c:	e1a0e00f 	mov	lr, pc
    2e80:	e12fff13 	bx	r3
    2e84:	e1560004 	cmp	r6, r4
    2e88:	1afffff9 	bne	2e74 <__libc_init_array+0x58>
    2e8c:	e8bd4070 	pop	{r4, r5, r6, lr}
    2e90:	e12fff1e 	bx	lr
    2e94:	00002f48 	.word	0x00002f48
    2e98:	00002f48 	.word	0x00002f48
    2e9c:	00002f48 	.word	0x00002f48
    2ea0:	00002f50 	.word	0x00002f50

Disassembly of section .rodata:

00002ea8 <AMP>:
    2ea8:	00800000                                ....

00002eac <VGA_COL_LEN>:
    2eac:	00000140                                @...

00002eb0 <VGA_ROW_LEN>:
    2eb0:	000000f0 65726944 726f7463 534f4220     ....Director BOS
    2ec0:	694c2053 20736920 20656874 6f727473     S Li is the stro
    2ed0:	7365676e 00002174 756c6f56 203a656d     ngest!..Volume: 
    2ee0:	00000000                                ....

00002ee4 <NOTE_LOOKUP>:
    2ee4:	4302d021 4312d4fe 4324d062 432e9d2f     !..C...Cb.$C/..C
    2ef4:	4343ff7d 435c0000 4376f127 4382d021     }.CC..\C'.vC!..C
    2f04:	4392d51f 43a4d062 43ae9d2f 43c3ff5c     ...Cb..C/..C\..C
    2f14:	43dc0000 43f6f106 4402d010              ...C...C...D

00002f20 <NUM_NOTES>:
    2f20:	0000000f                                ....

00002f24 <SAMPLE_RATE>:
    2f24:	0000bb80                                ....

00002f28 <_global_impure_ptr>:
    2f28:	00031d90 00000043                       ....C...

00002f30 <_init>:
    2f30:	e1a0c00d 	mov	r12, sp
    2f34:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    2f38:	e24cb004 	sub	r11, r12, #4
    2f3c:	e24bd028 	sub	sp, r11, #40	; 0x28
    2f40:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    2f44:	e12fff1e 	bx	lr

00002f48 <__init_array_start>:
    2f48:	00002d4c 	.word	0x00002d4c

00002f4c <__frame_dummy_init_array_entry>:
    2f4c:	00000208                                ....

00002f50 <__libc_fini>:
    2f50:	e1a0c00d 	mov	r12, sp
    2f54:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    2f58:	e24cb004 	sub	r11, r12, #4
    2f5c:	e24bd028 	sub	sp, r11, #40	; 0x28
    2f60:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    2f64:	e12fff1e 	bx	lr

00002f68 <__fini_array_start>:
    2f68:	000001c4 	.word	0x000001c4

00002f6c <__cs3_regions>:
    2f6c:	00000000 	.word	0x00000000
    2f70:	00000040 	.word	0x00000040
    2f74:	00000040 	.word	0x00000040
    2f78:	00032180 	.word	0x00032180
    2f7c:	00000020 	.word	0x00000020
