
//campus.mcgill.ca/emf/CPE/yma67/My Documents/G16_Lab3/main.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 ec 0a 00 00 f0 0a 00 00 f4 0a 00 00     @...............
  30:	f8 0a 00 00 e8 0a 00 00 fc 0a 00 00 00 0b 00 00     ................

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb00026a 	bl	a84 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000be8 	.word	0x00000be8

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00001020 	.word	0x00001020

00000124 <__cs3_heap_start_ptr>:
 124:	00001048 	.word	0x00001048

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00001028 	.word	0x00001028
 170:	0000102b 	.word	0x0000102b
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00001028 	.word	0x00001028
 1bc:	00001028 	.word	0x00001028
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00001028 	.word	0x00001028
 200:	00000000 	.word	0x00000000
 204:	00000b8c 	.word	0x00000b8c

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000b8c 	.word	0x00000b8c
 250:	0000102c 	.word	0x0000102c
 254:	00000be8 	.word	0x00000be8
 258:	00000000 	.word	0x00000000

0000025c <main>:
#include "./drivers/inc/slider_switches.h"
#include "./drivers/inc/pushbuttons.h"
#include "./drivers/inc/HEX_displays.h"
#include "./drivers/inc/HPS_TIM.h"

int main() {
 25c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 260:	e24dd01c 	sub	sp, sp, #28
	} */
	int count0 = 0, count1 = 0, count2 = 0, count3 = 0;

  	HPS_TIM_config_t hps_tim;

  	hps_tim.tim = TIM0|TIM1|TIM2|TIM3;
 264:	e3a0200f 	mov	r2, #15
 268:	e5cd2004 	strb	r2, [sp, #4]
  	hps_tim.timeout = 1000000;
 26c:	e3043240 	movw	r3, #16960	; 0x4240
 270:	e7df3812 	bfi	r3, r2, #16, #16
 274:	e58d3008 	str	r3, [sp, #8]
  	hps_tim.LD_en = 1;
 278:	e3a03001 	mov	r3, #1
 27c:	e58d300c 	str	r3, [sp, #12]
  	hps_tim.INT_en = 1;
 280:	e58d3010 	str	r3, [sp, #16]
  	hps_tim.enable = 1;
 284:	e58d3014 	str	r3, [sp, #20]

  	HPS_TIM_config_ASM(&hps_tim);
 288:	e28d0004 	add	r0, sp, #4
 28c:	eb0000ce 	bl	5cc <HPS_TIM_config_ASM>
			HEX_flood_ASM(HEX4 | HEX5); 
			HEX_write_ASM(toHEXDisplays, readChar); 
		}
		write_LEDs_ASM(readInteger);
	} */
	int count0 = 0, count1 = 0, count2 = 0, count3 = 0;
 290:	e3a04000 	mov	r4, #0
 294:	e1a08004 	mov	r8, r4
 298:	e1a07004 	mov	r7, r4
 29c:	e1a06004 	mov	r6, r4
  	hps_tim.enable = 1;

  	HPS_TIM_config_ASM(&hps_tim);

 	while (1) {
		if (HPS_TIM_read_INT_ASM(TIM0)) {
 2a0:	e3a0b001 	mov	r11, #1
      if (++count0 == 16)
        count0 = 0;
      HEX_write_ASM(HEX0, (count0));
    }

    if (HPS_TIM_read_INT_ASM(TIM1)) {
 2a4:	e3a09002 	mov	r9, #2
      if (++count1 == 16)
        count1 = 0;
      HEX_write_ASM(HEX1, (count1));
    }

    if (HPS_TIM_read_INT_ASM(TIM2)) {
 2a8:	e3a0a004 	mov	r10, #4
      if (++count2 == 16)
        count2 = 0;
      HEX_write_ASM(HEX2, (count2));
    }

    if (HPS_TIM_read_INT_ASM(TIM3)) {
 2ac:	e3a05008 	mov	r5, #8
  	hps_tim.enable = 1;

  	HPS_TIM_config_ASM(&hps_tim);

 	while (1) {
		if (HPS_TIM_read_INT_ASM(TIM0)) {
 2b0:	e1a0000b 	mov	r0, r11
 2b4:	eb00010a 	bl	6e4 <HPS_TIM_read_INT_ASM>
 2b8:	e3500000 	cmp	r0, #0
 2bc:	0a000007 	beq	2e0 <main+0x84>
      HPS_TIM_clear_INT_ASM(TIM0);
 2c0:	e1a0000b 	mov	r0, r11
 2c4:	eb0000f5 	bl	6a0 <HPS_TIM_clear_INT_ASM>
      if (++count0 == 16)
 2c8:	e2866001 	add	r6, r6, #1
        count0 = 0;
 2cc:	e3560010 	cmp	r6, #16
 2d0:	03a06000 	moveq	r6, #0
      HEX_write_ASM(HEX0, (count0));
 2d4:	e1a0000b 	mov	r0, r11
 2d8:	e6ef1076 	uxtb	r1, r6
 2dc:	eb00002e 	bl	39c <HEX_write_ASM>
    }

    if (HPS_TIM_read_INT_ASM(TIM1)) {
 2e0:	e1a00009 	mov	r0, r9
 2e4:	eb0000fe 	bl	6e4 <HPS_TIM_read_INT_ASM>
 2e8:	e3500000 	cmp	r0, #0
 2ec:	0a000007 	beq	310 <main+0xb4>
      HPS_TIM_clear_INT_ASM(TIM1);
 2f0:	e1a00009 	mov	r0, r9
 2f4:	eb0000e9 	bl	6a0 <HPS_TIM_clear_INT_ASM>
      if (++count1 == 16)
 2f8:	e2877001 	add	r7, r7, #1
        count1 = 0;
 2fc:	e3570010 	cmp	r7, #16
 300:	03a07000 	moveq	r7, #0
      HEX_write_ASM(HEX1, (count1));
 304:	e1a00009 	mov	r0, r9
 308:	e6ef1077 	uxtb	r1, r7
 30c:	eb000022 	bl	39c <HEX_write_ASM>
    }

    if (HPS_TIM_read_INT_ASM(TIM2)) {
 310:	e1a0000a 	mov	r0, r10
 314:	eb0000f2 	bl	6e4 <HPS_TIM_read_INT_ASM>
 318:	e3500000 	cmp	r0, #0
 31c:	0a000007 	beq	340 <main+0xe4>
      HPS_TIM_clear_INT_ASM(TIM2);
 320:	e1a0000a 	mov	r0, r10
 324:	eb0000dd 	bl	6a0 <HPS_TIM_clear_INT_ASM>
      if (++count2 == 16)
 328:	e2888001 	add	r8, r8, #1
        count2 = 0;
 32c:	e3580010 	cmp	r8, #16
 330:	03a08000 	moveq	r8, #0
      HEX_write_ASM(HEX2, (count2));
 334:	e1a0000a 	mov	r0, r10
 338:	e6ef1078 	uxtb	r1, r8
 33c:	eb000016 	bl	39c <HEX_write_ASM>
    }

    if (HPS_TIM_read_INT_ASM(TIM3)) {
 340:	e1a00005 	mov	r0, r5
 344:	eb0000e6 	bl	6e4 <HPS_TIM_read_INT_ASM>
 348:	e3500000 	cmp	r0, #0
 34c:	0affffd7 	beq	2b0 <main+0x54>
      HPS_TIM_clear_INT_ASM(TIM3);
 350:	e1a00005 	mov	r0, r5
 354:	eb0000d1 	bl	6a0 <HPS_TIM_clear_INT_ASM>
      if (++count3 == 16)
 358:	e2844001 	add	r4, r4, #1
        count3 = 0;
 35c:	e3540010 	cmp	r4, #16
 360:	03a04000 	moveq	r4, #0
      HEX_write_ASM(HEX3, (count3));
 364:	e1a00005 	mov	r0, r5
 368:	e6ef1074 	uxtb	r1, r4
 36c:	eb00000a 	bl	39c <HEX_write_ASM>
 370:	eaffffce 	b	2b0 <main+0x54>

00000374 <HEX_clear_ASM>:
        .global HEX_clear_ASM
        .global HEX_flood_ASM
        .global HEX_write_ASM

HEX_clear_ASM:
        PUSH {R1, LR}
 374:	e92d4002 	push	{r1, lr}
        MOV R1, #0x00
 378:	e3a01000 	mov	r1, #0
        BL LOAD_MULTIPLE_VAR
 37c:	eb00002b 	bl	430 <LOAD_MULTIPLE_VAR>
        POP {R1, LR}
 380:	e8bd4002 	pop	{r1, lr}
        BX LR
 384:	e12fff1e 	bx	lr

00000388 <HEX_flood_ASM>:

HEX_flood_ASM: 
        PUSH {R1, LR}
 388:	e92d4002 	push	{r1, lr}
        MOV R1, #0x7F
 38c:	e3a0107f 	mov	r1, #127	; 0x7f
        BL LOAD_MULTIPLE_VAR
 390:	eb000026 	bl	430 <LOAD_MULTIPLE_VAR>
        POP {R1, LR}
 394:	e8bd4002 	pop	{r1, lr}
        BX LR
 398:	e12fff1e 	bx	lr

0000039c <HEX_write_ASM>:

HEX_write_ASM: 
        PUSH {R1, R2, LR}
 39c:	e92d4006 	push	{r1, r2, lr}
        CMP R1, #0
 3a0:	e3510000 	cmp	r1, #0
        MOVEQ R2, #0x3F
 3a4:	03a0203f 	moveq	r2, #63	; 0x3f
        CMP R1, #1
 3a8:	e3510001 	cmp	r1, #1
        MOVEQ R2, #0x06
 3ac:	03a02006 	moveq	r2, #6
        CMP R1, #2
 3b0:	e3510002 	cmp	r1, #2
        MOVEQ R2, #0x5B
 3b4:	03a0205b 	moveq	r2, #91	; 0x5b
        CMP R1, #3
 3b8:	e3510003 	cmp	r1, #3
        MOVEQ R2, #0x4F
 3bc:	03a0204f 	moveq	r2, #79	; 0x4f
        CMP R1, #4
 3c0:	e3510004 	cmp	r1, #4
        MOVEQ R2, #0x66
 3c4:	03a02066 	moveq	r2, #102	; 0x66
        CMP R1, #5
 3c8:	e3510005 	cmp	r1, #5
        MOVEQ R2, #0x6D
 3cc:	03a0206d 	moveq	r2, #109	; 0x6d
        CMP R1, #6
 3d0:	e3510006 	cmp	r1, #6
        MOVEQ R2, #0x7D
 3d4:	03a0207d 	moveq	r2, #125	; 0x7d
        CMP R1, #7
 3d8:	e3510007 	cmp	r1, #7
        MOVEQ R2, #0x07
 3dc:	03a02007 	moveq	r2, #7
        CMP R1, #8
 3e0:	e3510008 	cmp	r1, #8
        MOVEQ R2, #0x7F
 3e4:	03a0207f 	moveq	r2, #127	; 0x7f
        CMP R1, #9
 3e8:	e3510009 	cmp	r1, #9
        MOVEQ R2, #0x6F
 3ec:	03a0206f 	moveq	r2, #111	; 0x6f
        CMP R1, #10
 3f0:	e351000a 	cmp	r1, #10
        MOVEQ R2, #0x77
 3f4:	03a02077 	moveq	r2, #119	; 0x77
        CMP R1, #11
 3f8:	e351000b 	cmp	r1, #11
        MOVEQ R2, #0x7C
 3fc:	03a0207c 	moveq	r2, #124	; 0x7c
        CMP R1, #12
 400:	e351000c 	cmp	r1, #12
        MOVEQ R2, #0x39
 404:	03a02039 	moveq	r2, #57	; 0x39
        CMP R1, #13
 408:	e351000d 	cmp	r1, #13
        MOVEQ R2, #0x5E
 40c:	03a0205e 	moveq	r2, #94	; 0x5e
        CMP R1, #14
 410:	e351000e 	cmp	r1, #14
        MOVEQ R2, #0x79
 414:	03a02079 	moveq	r2, #121	; 0x79
        CMP R1, #15
 418:	e351000f 	cmp	r1, #15
        MOVEQ R2, #0x71
 41c:	03a02071 	moveq	r2, #113	; 0x71
        MOV R1, R2
 420:	e1a01002 	mov	r1, r2
        BL LOAD_MULTIPLE_VAR
 424:	eb000001 	bl	430 <LOAD_MULTIPLE_VAR>
        POP {R1, R2, LR}
 428:	e8bd4006 	pop	{r1, r2, lr}
        BX LR
 42c:	e12fff1e 	bx	lr

00000430 <LOAD_MULTIPLE_VAR>:

LOAD_MULTIPLE_VAR:
        PUSH {R2, R3, R4, R5, R6, R7}
 430:	e92d00fc 	push	{r2, r3, r4, r5, r6, r7}
        LDR R2, =HEX_A
 434:	e59f2084 	ldr	r2, [pc, #132]	; 4c0 <FIN+0x8>
        LDR R3, =HEX_B
 438:	e59f3084 	ldr	r3, [pc, #132]	; 4c4 <FIN+0xc>
		MOV R7, #0xFF
 43c:	e3a070ff 	mov	r7, #255	; 0xff
        MOV R4, #-1
 440:	e3e04000 	mvn	r4, #0
		MOV R5, #1
 444:	e3a05001 	mov	r5, #1

00000448 <AST>:

AST:    ADD R4, R4, #1
 448:	e2844001 	add	r4, r4, #1
        CMP R4, #6
 44c:	e3540006 	cmp	r4, #6
        BGE FIN
 450:	aa000018 	bge	4b8 <FIN>
        TST R0, R5, LSL R4
 454:	e1100415 	tst	r0, r5, lsl r4
        BEQ AST
 458:	0afffffa 	beq	448 <AST>
		LDR R6, [R2]
 45c:	e5926000 	ldr	r6, [r2]
		CMP R4, #0
 460:	e3540000 	cmp	r4, #0
        BICEQ R6, R6, R7
 464:	01c66007 	biceq	r6, r6, r7
        ORREQ R6, R6, R1
 468:	01866001 	orreq	r6, r6, r1
		CMP R4, #1
 46c:	e3540001 	cmp	r4, #1
        BICEQ R6, R6, R7, ROR #24
 470:	01c66c67 	biceq	r6, r6, r7, ror #24
        ORREQ R6, R6, R1, ROR #24
 474:	01866c61 	orreq	r6, r6, r1, ror #24
		CMP R4, #2
 478:	e3540002 	cmp	r4, #2
        BICEQ R6, R6, R7, ROR #16
 47c:	01c66867 	biceq	r6, r6, r7, ror #16
        ORREQ R6, R6, R1, ROR #16
 480:	01866861 	orreq	r6, r6, r1, ror #16
        CMP R4, #3
 484:	e3540003 	cmp	r4, #3
        BICEQ R6, R6, R7, ROR #8
 488:	01c66467 	biceq	r6, r6, r7, ror #8
        ORREQ R6, R6, R1, ROR #8
 48c:	01866461 	orreq	r6, r6, r1, ror #8
		STR R6, [R2]
 490:	e5826000 	str	r6, [r2]
		LDR R6, [R3]
 494:	e5936000 	ldr	r6, [r3]
        CMP R4, #4
 498:	e3540004 	cmp	r4, #4
        BICEQ R6, R6, R7
 49c:	01c66007 	biceq	r6, r6, r7
        ORREQ R6, R6, R1
 4a0:	01866001 	orreq	r6, r6, r1
        CMP R4, #5
 4a4:	e3540005 	cmp	r4, #5
        BICEQ R6, R6, R7, ROR #24
 4a8:	01c66c67 	biceq	r6, r6, r7, ror #24
        ORREQ R6, R6, R1, ROR #24
 4ac:	01866c61 	orreq	r6, r6, r1, ror #24
		STR R6, [R3]
 4b0:	e5836000 	str	r6, [r3]
        B AST
 4b4:	eaffffe3 	b	448 <AST>

000004b8 <FIN>:
FIN:    POP {R2, R3, R4, R5, R6, R7}
 4b8:	e8bd00fc 	pop	{r2, r3, r4, r5, r6, r7}
        BX LR
 4bc:	e12fff1e 	bx	lr
        POP {R1, R2, LR}
        BX LR

LOAD_MULTIPLE_VAR:
        PUSH {R2, R3, R4, R5, R6, R7}
        LDR R2, =HEX_A
 4c0:	ff200020 	.word	0xff200020
        LDR R3, =HEX_B
 4c4:	ff200030 	.word	0xff200030

000004c8 <read_LEDs_ASM>:
    .equ LED_BASE, 0xFF200000
    .global read_LEDs_ASM
    .global write_LEDs_ASM

read_LEDs_ASM: 
    LDR R1, =LED_BASE
 4c8:	e59f1018 	ldr	r1, [pc, #24]	; 4e8 <write_LEDs_ASM+0x14>
    LDR R0, [R1]
 4cc:	e5910000 	ldr	r0, [r1]
    BX LR
 4d0:	e12fff1e 	bx	lr

000004d4 <write_LEDs_ASM>:

write_LEDs_ASM: 
	PUSH {R1}
 4d4:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
    LDR R1, =LED_BASE
 4d8:	e59f1008 	ldr	r1, [pc, #8]	; 4e8 <write_LEDs_ASM+0x14>
    STR R0, [R1]
 4dc:	e5810000 	str	r0, [r1]
	POP {R1}
 4e0:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
    BX LR
 4e4:	e12fff1e 	bx	lr
    .equ LED_BASE, 0xFF200000
    .global read_LEDs_ASM
    .global write_LEDs_ASM

read_LEDs_ASM: 
    LDR R1, =LED_BASE
 4e8:	ff200000 	.word	0xff200000

000004ec <read_PB_data_ASM>:
        .global PB_clear_edgecp_ASM
        .global enable_PB_INT_ASM
        .global disable_PB_INT_ASM

read_PB_data_ASM:
        PUSH {R1, LR}
 4ec:	e92d4002 	push	{r1, lr}
        LDR R1, =PB_DATA
 4f0:	e59f10b8 	ldr	r1, [pc, #184]	; 5b0 <VERIFY_BIT+0x20>
		LDR R0, [R1]
 4f4:	e5910000 	ldr	r0, [r1]
        POP {R1, LR}
 4f8:	e8bd4002 	pop	{r1, lr}
        BX LR
 4fc:	e12fff1e 	bx	lr

00000500 <PB_data_is_pressed_ASM>:

PB_data_is_pressed_ASM: 
        PUSH {R1, LR}
 500:	e92d4002 	push	{r1, lr}
        LDR R1, =PB_DATA
 504:	e59f10a4 	ldr	r1, [pc, #164]	; 5b0 <VERIFY_BIT+0x20>
        BL VERIFY_BIT
 508:	eb000020 	bl	590 <VERIFY_BIT>
        POP {R1, LR}
 50c:	e8bd4002 	pop	{r1, lr}
        BX LR
 510:	e12fff1e 	bx	lr

00000514 <read_PB_edgecap_ASM>:

read_PB_edgecap_ASM: 
        PUSH {R1, LR}
 514:	e92d4002 	push	{r1, lr}
        LDR R1, =PB_EDGE_CAP
 518:	e59f1094 	ldr	r1, [pc, #148]	; 5b4 <VERIFY_BIT+0x24>
        LDR R0, [R1]
 51c:	e5910000 	ldr	r0, [r1]
        POP {R1, LR}
 520:	e8bd4002 	pop	{r1, lr}
        BX LR
 524:	e12fff1e 	bx	lr

00000528 <PB_edgecap_is_pressed_ASM>:

PB_edgecap_is_pressed_ASM: 
        PUSH {R1, LR}
 528:	e92d4002 	push	{r1, lr}
        LDR R1, =PB_EDGE_CAP
 52c:	e59f1080 	ldr	r1, [pc, #128]	; 5b4 <VERIFY_BIT+0x24>
        BL VERIFY_BIT
 530:	eb000016 	bl	590 <VERIFY_BIT>
        POP {R1, LR}
 534:	e8bd4002 	pop	{r1, lr}
        BX LR
 538:	e12fff1e 	bx	lr

0000053c <PB_clear_edgecp_ASM>:

PB_clear_edgecp_ASM: 
        PUSH {R1, R2}
 53c:	e92d0006 	push	{r1, r2}
        LDR R1, =PB_EDGE_CAP
 540:	e59f106c 	ldr	r1, [pc, #108]	; 5b4 <VERIFY_BIT+0x24>
        LDR R2, [R1]
 544:	e5912000 	ldr	r2, [r1]
        BIC R2, R2, R0
 548:	e1c22000 	bic	r2, r2, r0
        STR R2, [R1]
 54c:	e5812000 	str	r2, [r1]
        POP {R1, R2}
 550:	e8bd0006 	pop	{r1, r2}
        BX LR
 554:	e12fff1e 	bx	lr

00000558 <enable_PB_INT_ASM>:

enable_PB_INT_ASM: 
        PUSH {R1, R2}
 558:	e92d0006 	push	{r1, r2}
        LDR R1, =PB_INTR_MSK
 55c:	e59f1054 	ldr	r1, [pc, #84]	; 5b8 <VERIFY_BIT+0x28>
        LDR R2, [R1]
 560:	e5912000 	ldr	r2, [r1]
        ORR R2, R2, R0
 564:	e1822000 	orr	r2, r2, r0
        STR R2, [R1]
 568:	e5812000 	str	r2, [r1]
        POP {R1, R2}
 56c:	e8bd0006 	pop	{r1, r2}
        BX LR
 570:	e12fff1e 	bx	lr

00000574 <disable_PB_INT_ASM>:

disable_PB_INT_ASM:
        PUSH {R1, R2}
 574:	e92d0006 	push	{r1, r2}
        LDR R1, =PB_INTR_MSK
 578:	e59f1038 	ldr	r1, [pc, #56]	; 5b8 <VERIFY_BIT+0x28>
        LDR R2, [R1]
 57c:	e5912000 	ldr	r2, [r1]
        BIC R2, R2, R0
 580:	e1c22000 	bic	r2, r2, r0
        STR R2, [R1]
 584:	e5812000 	str	r2, [r1]
        POP {R1, R2}
 588:	e8bd0006 	pop	{r1, r2}
        BX LR
 58c:	e12fff1e 	bx	lr

00000590 <VERIFY_BIT>:

VERIFY_BIT: 
        PUSH {R2, R3}
 590:	e92d000c 	push	{r2, r3}
        LDR R2, [R1]
 594:	e5912000 	ldr	r2, [r1]
        MOV R3, R0
 598:	e1a03000 	mov	r3, r0
        MOV R0, #0
 59c:	e3a00000 	mov	r0, #0
        TST R3, R2
 5a0:	e1130002 	tst	r3, r2
        MOVNE R0, #1
 5a4:	13a00001 	movne	r0, #1
        POP {R2, R3}
 5a8:	e8bd000c 	pop	{r2, r3}
        BX LR
 5ac:	e12fff1e 	bx	lr
        .global enable_PB_INT_ASM
        .global disable_PB_INT_ASM

read_PB_data_ASM:
        PUSH {R1, LR}
        LDR R1, =PB_DATA
 5b0:	ff200050 	.word	0xff200050
        POP {R1, LR}
        BX LR

read_PB_edgecap_ASM: 
        PUSH {R1, LR}
        LDR R1, =PB_EDGE_CAP
 5b4:	ff20005c 	.word	0xff20005c
        POP {R1, R2}
        BX LR

enable_PB_INT_ASM: 
        PUSH {R1, R2}
        LDR R1, =PB_INTR_MSK
 5b8:	ff200058 	.word	0xff200058

000005bc <read_slider_switches_ASM>:
    .text
    .equ SW_BASE, 0xFF200040
    .global read_slider_switches_ASM

read_slider_switches_ASM: 
    LDR R1, =SW_BASE
 5bc:	e59f1004 	ldr	r1, [pc, #4]	; 5c8 <read_slider_switches_ASM+0xc>
    LDR R0, [R1]
 5c0:	e5910000 	ldr	r0, [r1]
    BX LR
 5c4:	e12fff1e 	bx	lr
    .text
    .equ SW_BASE, 0xFF200040
    .global read_slider_switches_ASM

read_slider_switches_ASM: 
    LDR R1, =SW_BASE
 5c8:	ff200040 	.word	0xff200040

000005cc <HPS_TIM_config_ASM>:
	.global HPS_TIM_config_ASM
	.global HPS_TIM_clear_INT_ASM
	.global HPS_TIM_read_INT_ASM

HPS_TIM_config_ASM:
	PUSH {R4-R7, LR}
 5cc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	MOV R1, #0
 5d0:	e3a01000 	mov	r1, #0
	MOV R2, #1
 5d4:	e3a02001 	mov	r2, #1
	LDR R7, [R0]
 5d8:	e5907000 	ldr	r7, [r0]
	B LOOP
 5dc:	eaffffff 	b	5e0 <LOOP>

000005e0 <LOOP>:

LOOP:
	TST R7, R2, LSL R1
 5e0:	e1170112 	tst	r7, r2, lsl r1
	BEQ CONTINUE
 5e4:	0a000000 	beq	5ec <CONTINUE>
	BL CONFIG
 5e8:	eb000004 	bl	600 <CONFIG>

000005ec <CONTINUE>:

CONTINUE:
	ADD R1, R1, #1
 5ec:	e2811001 	add	r1, r1, #1
	CMP R1, #4
 5f0:	e3510004 	cmp	r1, #4
	BLT LOOP
 5f4:	bafffff9 	blt	5e0 <LOOP>

000005f8 <DONE>:

DONE:
	POP {R4-R7, LR}
 5f8:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
	BX LR
 5fc:	e12fff1e 	bx	lr

00000600 <CONFIG>:


CONFIG:
	PUSH {LR}
 600:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	LDR R3, =HPS_TIM_BASE
 604:	e59f3148 	ldr	r3, [pc, #328]	; 754 <HPS_TIM_BASE+0x10>
	LDR R4, [R3, R1, LSL #2]
 608:	e7934101 	ldr	r4, [r3, r1, lsl #2]
	
	BL DISABLE
 60c:	eb000005 	bl	628 <DISABLE>
	BL SET_LOAD_VAL
 610:	eb000008 	bl	638 <SET_LOAD_VAL>
	BL SET_LOAD_BIT
 614:	eb00000e 	bl	654 <SET_LOAD_BIT>
	BL SET_INT_BIT
 618:	eb000013 	bl	66c <SET_INT_BIT>
	BL SET_EN_BIT
 61c:	eb000019 	bl	688 <SET_EN_BIT>
	
	POP {LR}
 620:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR 
 624:	e12fff1e 	bx	lr

00000628 <DISABLE>:

DISABLE:
	LDR R5, [R4, #0x8]
 628:	e5945008 	ldr	r5, [r4, #8]
	AND R5, R5, #0xFFFFFFFE
 62c:	e3c55001 	bic	r5, r5, #1
	STR R5, [R4, #0x8]
 630:	e5845008 	str	r5, [r4, #8]
	BX LR
 634:	e12fff1e 	bx	lr

00000638 <SET_LOAD_VAL>:
	
SET_LOAD_VAL:
	LDR R5, [R0, #0x4]
 638:	e5905004 	ldr	r5, [r0, #4]
	MOV R6, #25
 63c:	e3a06019 	mov	r6, #25
	MUL R5, R5, R6
 640:	e0050695 	mul	r5, r5, r6
	CMP R1, #2
 644:	e3510002 	cmp	r1, #2
	LSLLT R5, R5, #2
 648:	b1a05105 	lsllt	r5, r5, #2
	STR R5, [R4]
 64c:	e5845000 	str	r5, [r4]
	BX LR
 650:	e12fff1e 	bx	lr

00000654 <SET_LOAD_BIT>:
	
SET_LOAD_BIT:
	LDR R5, [R4, #0x8]
 654:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0x8]
 658:	e5906008 	ldr	r6, [r0, #8]
	AND R5, R5, #0xFFFFFFFD
 65c:	e3c55002 	bic	r5, r5, #2
	ORR R5, R5, R6, LSL #1
 660:	e1855086 	orr	r5, r5, r6, lsl #1
	STR R5, [R4, #0x8]
 664:	e5845008 	str	r5, [r4, #8]
	BX LR
 668:	e12fff1e 	bx	lr

0000066c <SET_INT_BIT>:
	
SET_INT_BIT:
	LDR R5, [R4, #0x8]
 66c:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0xC]
 670:	e590600c 	ldr	r6, [r0, #12]
	EOR R6, R6, #0x00000001
 674:	e2266001 	eor	r6, r6, #1
	AND R5, R5, #0xFFFFFFFB
 678:	e3c55004 	bic	r5, r5, #4
	ORR R5, R5, R6, LSL #2
 67c:	e1855106 	orr	r5, r5, r6, lsl #2
	STR R5, [R4, #0x8]
 680:	e5845008 	str	r5, [r4, #8]
	BX LR
 684:	e12fff1e 	bx	lr

00000688 <SET_EN_BIT>:
	
SET_EN_BIT:
	LDR R5, [R4, #0x8]
 688:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0x10]
 68c:	e5906010 	ldr	r6, [r0, #16]
	AND R5, R5, #0xFFFFFFFE
 690:	e3c55001 	bic	r5, r5, #1
	ORR R5, R5, R6
 694:	e1855006 	orr	r5, r5, r6
	STR R5, [R4, #0x8]
 698:	e5845008 	str	r5, [r4, #8]
	BX LR
 69c:	e12fff1e 	bx	lr

000006a0 <HPS_TIM_clear_INT_ASM>:

HPS_TIM_clear_INT_ASM:
	PUSH {LR}
 6a0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	MOV R1, #0
 6a4:	e3a01000 	mov	r1, #0
	MOV R2, #1
 6a8:	e3a02001 	mov	r2, #1
	B CLEAR_INT_LOOP
 6ac:	eaffffff 	b	6b0 <CLEAR_INT_LOOP>

000006b0 <CLEAR_INT_LOOP>:

CLEAR_INT_LOOP:
	TST R0, R2, LSL R1
 6b0:	e1100112 	tst	r0, r2, lsl r1
	BEQ CLEAR_INT_CONTINUE
 6b4:	0a000000 	beq	6bc <CLEAR_INT_CONTINUE>
	BL CLEAR_INT
 6b8:	eb000005 	bl	6d4 <CLEAR_INT>

000006bc <CLEAR_INT_CONTINUE>:

CLEAR_INT_CONTINUE:
	ADD R1, R1, #1
 6bc:	e2811001 	add	r1, r1, #1
	CMP R1, #4
 6c0:	e3510004 	cmp	r1, #4
	BLT CLEAR_INT_LOOP
 6c4:	bafffff9 	blt	6b0 <CLEAR_INT_LOOP>
	B CLEAR_INT_DONE
 6c8:	eaffffff 	b	6cc <CLEAR_INT_DONE>

000006cc <CLEAR_INT_DONE>:

CLEAR_INT_DONE:
	POP {LR}
 6cc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
 6d0:	e12fff1e 	bx	lr

000006d4 <CLEAR_INT>:

CLEAR_INT:
	LDR R3, =HPS_TIM_BASE
 6d4:	e59f3078 	ldr	r3, [pc, #120]	; 754 <HPS_TIM_BASE+0x10>
	LDR R3, [R3, R1, LSL #2]
 6d8:	e7933101 	ldr	r3, [r3, r1, lsl #2]
	LDR R3, [R3, #0xC]
 6dc:	e593300c 	ldr	r3, [r3, #12]
	BX LR
 6e0:	e12fff1e 	bx	lr

000006e4 <HPS_TIM_read_INT_ASM>:

HPS_TIM_read_INT_ASM:
	PUSH {LR}
 6e4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	PUSH {R4}
 6e8:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
	MOV R1, #0
 6ec:	e3a01000 	mov	r1, #0
	MOV R2, #1
 6f0:	e3a02001 	mov	r2, #1
	MOV R4, #0
 6f4:	e3a04000 	mov	r4, #0
	B READ_INT_LOOP
 6f8:	eaffffff 	b	6fc <READ_INT_LOOP>

000006fc <READ_INT_LOOP>:

READ_INT_LOOP:
	TST R0, R2, LSL R1
 6fc:	e1100112 	tst	r0, r2, lsl r1
	BEQ READ_INT_CONTINUE
 700:	0a000000 	beq	708 <READ_INT_CONTINUE>
	BL READ_INT
 704:	eb000008 	bl	72c <READ_INT>

00000708 <READ_INT_CONTINUE>:

READ_INT_CONTINUE:
	ADD R1, R1, #1
 708:	e2811001 	add	r1, r1, #1
	CMP R1, #4
 70c:	e3510004 	cmp	r1, #4
	BEQ READ_INT_DONE
 710:	0a000001 	beq	71c <READ_INT_DONE>
	LSL R4, R4, #1
 714:	e1a04084 	lsl	r4, r4, #1
	B READ_INT_LOOP
 718:	eafffff7 	b	6fc <READ_INT_LOOP>

0000071c <READ_INT_DONE>:
	
READ_INT_DONE:
	MOV R0, R4
 71c:	e1a00004 	mov	r0, r4
	POP {R4}
 720:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
	POP {LR}
 724:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
 728:	e12fff1e 	bx	lr

0000072c <READ_INT>:

READ_INT:
	LDR R3, =HPS_TIM_BASE
 72c:	e59f3020 	ldr	r3, [pc, #32]	; 754 <HPS_TIM_BASE+0x10>
	LDR R3, [R3, R1, LSL #2]
 730:	e7933101 	ldr	r3, [r3, r1, lsl #2]
	LDR R3, [R3, #0x10]
 734:	e5933010 	ldr	r3, [r3, #16]
	AND R3, R3, #0x1
 738:	e2033001 	and	r3, r3, #1
	EOR R4, R4, R3
 73c:	e0244003 	eor	r4, r4, r3
	BX LR
 740:	e12fff1e 	bx	lr

00000744 <HPS_TIM_BASE>:
 744:	ffc08000 	.word	0xffc08000
 748:	ffc09000 	.word	0xffc09000
 74c:	ffd00000 	.word	0xffd00000
 750:	ffd01000 	.word	0xffd01000


CONFIG:
	PUSH {LR}
	
	LDR R3, =HPS_TIM_BASE
 754:	00000744 	.word	0x00000744

00000758 <atexit>:
 758:	e1a01000 	mov	r1, r0
 75c:	e3a00000 	mov	r0, #0
 760:	e92d4008 	push	{r3, lr}
 764:	e1a02000 	mov	r2, r0
 768:	e1a03000 	mov	r3, r0
 76c:	eb00000e 	bl	7ac <__register_exitproc>
 770:	e8bd4008 	pop	{r3, lr}
 774:	e12fff1e 	bx	lr

00000778 <exit>:
 778:	e92d4008 	push	{r3, lr}
 77c:	e3a01000 	mov	r1, #0
 780:	e1a04000 	mov	r4, r0
 784:	eb000045 	bl	8a0 <__call_exitprocs>
 788:	e59f3018 	ldr	r3, [pc, #24]	; 7a8 <exit+0x30>
 78c:	e5930000 	ldr	r0, [r3]
 790:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 794:	e3530000 	cmp	r3, #0
 798:	11a0e00f 	movne	lr, pc
 79c:	112fff13 	bxne	r3
 7a0:	e1a00004 	mov	r0, r4
 7a4:	eb0000c9 	bl	ad0 <_exit>
 7a8:	00000b90 	.word	0x00000b90

000007ac <__register_exitproc>:
 7ac:	e59fc0e4 	ldr	r12, [pc, #228]	; 898 <__register_exitproc+0xec>
 7b0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 7b4:	e59c4000 	ldr	r4, [r12]
 7b8:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 7bc:	e35c0000 	cmp	r12, #0
 7c0:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 7c4:	e59c5004 	ldr	r5, [r12, #4]
 7c8:	0584c148 	streq	r12, [r4, #328]	; 0x148
 7cc:	e355001f 	cmp	r5, #31
 7d0:	e24dd010 	sub	sp, sp, #16
 7d4:	e1a06000 	mov	r6, r0
 7d8:	da000015 	ble	834 <__register_exitproc+0x88>
 7dc:	e59f00b8 	ldr	r0, [pc, #184]	; 89c <__register_exitproc+0xf0>
 7e0:	e3500000 	cmp	r0, #0
 7e4:	1a000001 	bne	7f0 <__register_exitproc+0x44>
 7e8:	e3e00000 	mvn	r0, #0
 7ec:	ea000018 	b	854 <__register_exitproc+0xa8>
 7f0:	e3a00e19 	mov	r0, #400	; 0x190
 7f4:	e58d100c 	str	r1, [sp, #12]
 7f8:	e58d2008 	str	r2, [sp, #8]
 7fc:	e58d3004 	str	r3, [sp, #4]
 800:	e320f000 	nop	{0}
 804:	e250c000 	subs	r12, r0, #0
 808:	e59d100c 	ldr	r1, [sp, #12]
 80c:	e59d2008 	ldr	r2, [sp, #8]
 810:	e59d3004 	ldr	r3, [sp, #4]
 814:	0afffff3 	beq	7e8 <__register_exitproc+0x3c>
 818:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 81c:	e3a00000 	mov	r0, #0
 820:	e58c0004 	str	r0, [r12, #4]
 824:	e58c5000 	str	r5, [r12]
 828:	e584c148 	str	r12, [r4, #328]	; 0x148
 82c:	e58c0188 	str	r0, [r12, #392]	; 0x188
 830:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 834:	e3560000 	cmp	r6, #0
 838:	e59c4004 	ldr	r4, [r12, #4]
 83c:	1a000007 	bne	860 <__register_exitproc+0xb4>
 840:	e2843002 	add	r3, r4, #2
 844:	e2844001 	add	r4, r4, #1
 848:	e78c1103 	str	r1, [r12, r3, lsl #2]
 84c:	e58c4004 	str	r4, [r12, #4]
 850:	e3a00000 	mov	r0, #0
 854:	e28dd010 	add	sp, sp, #16
 858:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 85c:	e12fff1e 	bx	lr
 860:	e3a00001 	mov	r0, #1
 864:	e1a00410 	lsl	r0, r0, r4
 868:	e08c8104 	add	r8, r12, r4, lsl #2
 86c:	e3560002 	cmp	r6, #2
 870:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 874:	e5883108 	str	r3, [r8, #264]	; 0x108
 878:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 87c:	e1877000 	orr	r7, r7, r0
 880:	01830000 	orreq	r0, r3, r0
 884:	e1a05008 	mov	r5, r8
 888:	e5882088 	str	r2, [r8, #136]	; 0x88
 88c:	e58c7188 	str	r7, [r12, #392]	; 0x188
 890:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 894:	eaffffe9 	b	840 <__register_exitproc+0x94>
 898:	00000b90 	.word	0x00000b90
 89c:	00000000 	.word	0x00000000

000008a0 <__call_exitprocs>:
 8a0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8a4:	e59f3168 	ldr	r3, [pc, #360]	; a14 <__call_exitprocs+0x174>
 8a8:	e5933000 	ldr	r3, [r3]
 8ac:	e24dd014 	sub	sp, sp, #20
 8b0:	e58d3004 	str	r3, [sp, #4]
 8b4:	e2833f52 	add	r3, r3, #328	; 0x148
 8b8:	e58d0008 	str	r0, [sp, #8]
 8bc:	e58d300c 	str	r3, [sp, #12]
 8c0:	e1a07001 	mov	r7, r1
 8c4:	e3a08001 	mov	r8, #1
 8c8:	e59d3004 	ldr	r3, [sp, #4]
 8cc:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 8d0:	e3560000 	cmp	r6, #0
 8d4:	e59db00c 	ldr	r11, [sp, #12]
 8d8:	0a000033 	beq	9ac <__call_exitprocs+0x10c>
 8dc:	e5965004 	ldr	r5, [r6, #4]
 8e0:	e2554001 	subs	r4, r5, #1
 8e4:	5286a088 	addpl	r10, r6, #136	; 0x88
 8e8:	5285501f 	addpl	r5, r5, #31
 8ec:	508a5105 	addpl	r5, r10, r5, lsl #2
 8f0:	5a000007 	bpl	914 <__call_exitprocs+0x74>
 8f4:	ea000029 	b	9a0 <__call_exitprocs+0x100>
 8f8:	e5953000 	ldr	r3, [r5]
 8fc:	e1530007 	cmp	r3, r7
 900:	0a000005 	beq	91c <__call_exitprocs+0x7c>
 904:	e2444001 	sub	r4, r4, #1
 908:	e3740001 	cmn	r4, #1
 90c:	e2455004 	sub	r5, r5, #4
 910:	0a000022 	beq	9a0 <__call_exitprocs+0x100>
 914:	e3570000 	cmp	r7, #0
 918:	1afffff6 	bne	8f8 <__call_exitprocs+0x58>
 91c:	e5963004 	ldr	r3, [r6, #4]
 920:	e06a2005 	rsb	r2, r10, r5
 924:	e2433001 	sub	r3, r3, #1
 928:	e0862002 	add	r2, r6, r2
 92c:	e1530004 	cmp	r3, r4
 930:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 934:	13a01000 	movne	r1, #0
 938:	05864004 	streq	r4, [r6, #4]
 93c:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 940:	e3530000 	cmp	r3, #0
 944:	0affffee 	beq	904 <__call_exitprocs+0x64>
 948:	e1a02418 	lsl	r2, r8, r4
 94c:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 950:	e1120001 	tst	r2, r1
 954:	e5969004 	ldr	r9, [r6, #4]
 958:	0a000016 	beq	9b8 <__call_exitprocs+0x118>
 95c:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 960:	e1120001 	tst	r2, r1
 964:	1a000016 	bne	9c4 <__call_exitprocs+0x124>
 968:	e59d0008 	ldr	r0, [sp, #8]
 96c:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 970:	e1a0e00f 	mov	lr, pc
 974:	e12fff13 	bx	r3
 978:	e5963004 	ldr	r3, [r6, #4]
 97c:	e1530009 	cmp	r3, r9
 980:	1affffd0 	bne	8c8 <__call_exitprocs+0x28>
 984:	e59b3000 	ldr	r3, [r11]
 988:	e1530006 	cmp	r3, r6
 98c:	1affffcd 	bne	8c8 <__call_exitprocs+0x28>
 990:	e2444001 	sub	r4, r4, #1
 994:	e3740001 	cmn	r4, #1
 998:	e2455004 	sub	r5, r5, #4
 99c:	1affffdc 	bne	914 <__call_exitprocs+0x74>
 9a0:	e59f1070 	ldr	r1, [pc, #112]	; a18 <__call_exitprocs+0x178>
 9a4:	e3510000 	cmp	r1, #0
 9a8:	1a000009 	bne	9d4 <__call_exitprocs+0x134>
 9ac:	e28dd014 	add	sp, sp, #20
 9b0:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 9b4:	e12fff1e 	bx	lr
 9b8:	e1a0e00f 	mov	lr, pc
 9bc:	e12fff13 	bx	r3
 9c0:	eaffffec 	b	978 <__call_exitprocs+0xd8>
 9c4:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 9c8:	e1a0e00f 	mov	lr, pc
 9cc:	e12fff13 	bx	r3
 9d0:	eaffffe8 	b	978 <__call_exitprocs+0xd8>
 9d4:	e5963004 	ldr	r3, [r6, #4]
 9d8:	e3530000 	cmp	r3, #0
 9dc:	e5963000 	ldr	r3, [r6]
 9e0:	1a000008 	bne	a08 <__call_exitprocs+0x168>
 9e4:	e3530000 	cmp	r3, #0
 9e8:	0a000006 	beq	a08 <__call_exitprocs+0x168>
 9ec:	e1a00006 	mov	r0, r6
 9f0:	e58b3000 	str	r3, [r11]
 9f4:	e320f000 	nop	{0}
 9f8:	e59b6000 	ldr	r6, [r11]
 9fc:	e3560000 	cmp	r6, #0
 a00:	1affffb5 	bne	8dc <__call_exitprocs+0x3c>
 a04:	eaffffe8 	b	9ac <__call_exitprocs+0x10c>
 a08:	e1a0b006 	mov	r11, r6
 a0c:	e1a06003 	mov	r6, r3
 a10:	eafffff9 	b	9fc <__call_exitprocs+0x15c>
 a14:	00000b90 	.word	0x00000b90
 a18:	00000000 	.word	0x00000000

00000a1c <register_fini>:
 a1c:	e92d4008 	push	{r3, lr}
 a20:	e59f3010 	ldr	r3, [pc, #16]	; a38 <register_fini+0x1c>
 a24:	e3530000 	cmp	r3, #0
 a28:	159f000c 	ldrne	r0, [pc, #12]	; a3c <register_fini+0x20>
 a2c:	1bffff49 	blne	758 <atexit>
 a30:	e8bd4008 	pop	{r3, lr}
 a34:	e12fff1e 	bx	lr
 a38:	00000bb8 	.word	0x00000bb8
 a3c:	00000a40 	.word	0x00000a40

00000a40 <__libc_fini_array>:
 a40:	e92d4038 	push	{r3, r4, r5, lr}
 a44:	e59f5030 	ldr	r5, [pc, #48]	; a7c <__libc_fini_array+0x3c>
 a48:	e59f4030 	ldr	r4, [pc, #48]	; a80 <__libc_fini_array+0x40>
 a4c:	e0654004 	rsb	r4, r5, r4
 a50:	e1b04144 	asrs	r4, r4, #2
 a54:	10855104 	addne	r5, r5, r4, lsl #2
 a58:	0a000004 	beq	a70 <__libc_fini_array+0x30>
 a5c:	e5353004 	ldr	r3, [r5, #-4]!
 a60:	e1a0e00f 	mov	lr, pc
 a64:	e12fff13 	bx	r3
 a68:	e2544001 	subs	r4, r4, #1
 a6c:	1afffffa 	bne	a5c <__libc_fini_array+0x1c>
 a70:	eb000050 	bl	bb8 <__libc_fini>
 a74:	e8bd4038 	pop	{r3, r4, r5, lr}
 a78:	e12fff1e 	bx	lr
 a7c:	00000bd0 	.word	0x00000bd0
 a80:	00000bd4 	.word	0x00000bd4

00000a84 <__cs3_premain>:
 a84:	e92d4008 	push	{r3, lr}
 a88:	eb00001d 	bl	b04 <__libc_init_array>
 a8c:	e59f3030 	ldr	r3, [pc, #48]	; ac4 <__cs3_premain+0x40>
 a90:	e3530000 	cmp	r3, #0
 a94:	15930000 	ldrne	r0, [r3]
 a98:	01a00003 	moveq	r0, r3
 a9c:	e59f3024 	ldr	r3, [pc, #36]	; ac8 <__cs3_premain+0x44>
 aa0:	e3530000 	cmp	r3, #0
 aa4:	15931000 	ldrne	r1, [r3]
 aa8:	01a01003 	moveq	r1, r3
 aac:	e3a02000 	mov	r2, #0
 ab0:	ebfffde9 	bl	25c <main>
 ab4:	e59f3010 	ldr	r3, [pc, #16]	; acc <__cs3_premain+0x48>
 ab8:	e3530000 	cmp	r3, #0
 abc:	1bffff2d 	blne	778 <exit>
 ac0:	eafffffe 	b	ac0 <__cs3_premain+0x3c>
	...
 acc:	00000778 	.word	0x00000778

00000ad0 <_exit>:
 ad0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 ad4:	e3a00018 	mov	r0, #24
 ad8:	e59f1004 	ldr	r1, [pc, #4]	; ae4 <_exit+0x14>
 adc:	ef123456 	svc	0x00123456
 ae0:	eafffffe 	b	ae0 <_exit+0x10>
 ae4:	00020026 	.word	0x00020026

00000ae8 <__cs3_isr_interrupt>:
 ae8:	eafffffe 	b	ae8 <__cs3_isr_interrupt>

00000aec <__cs3_isr_undef>:
 aec:	eafffffe 	b	aec <__cs3_isr_undef>

00000af0 <__cs3_isr_swi>:
 af0:	eafffffe 	b	af0 <__cs3_isr_swi>

00000af4 <__cs3_isr_pabort>:
 af4:	eafffffe 	b	af4 <__cs3_isr_pabort>

00000af8 <__cs3_isr_dabort>:
 af8:	eafffffe 	b	af8 <__cs3_isr_dabort>

00000afc <__cs3_isr_irq>:
 afc:	eafffffe 	b	afc <__cs3_isr_irq>

00000b00 <__cs3_isr_fiq>:
 b00:	eafffffe 	b	b00 <__cs3_isr_fiq>

00000b04 <__libc_init_array>:
 b04:	e92d4070 	push	{r4, r5, r6, lr}
 b08:	e59f506c 	ldr	r5, [pc, #108]	; b7c <__libc_init_array+0x78>
 b0c:	e59f606c 	ldr	r6, [pc, #108]	; b80 <__libc_init_array+0x7c>
 b10:	e0656006 	rsb	r6, r5, r6
 b14:	e1b06146 	asrs	r6, r6, #2
 b18:	12455004 	subne	r5, r5, #4
 b1c:	13a04000 	movne	r4, #0
 b20:	0a000005 	beq	b3c <__libc_init_array+0x38>
 b24:	e5b53004 	ldr	r3, [r5, #4]!
 b28:	e2844001 	add	r4, r4, #1
 b2c:	e1a0e00f 	mov	lr, pc
 b30:	e12fff13 	bx	r3
 b34:	e1560004 	cmp	r6, r4
 b38:	1afffff9 	bne	b24 <__libc_init_array+0x20>
 b3c:	e59f5040 	ldr	r5, [pc, #64]	; b84 <__libc_init_array+0x80>
 b40:	e59f6040 	ldr	r6, [pc, #64]	; b88 <__libc_init_array+0x84>
 b44:	e0656006 	rsb	r6, r5, r6
 b48:	eb000012 	bl	b98 <_init>
 b4c:	e1b06146 	asrs	r6, r6, #2
 b50:	12455004 	subne	r5, r5, #4
 b54:	13a04000 	movne	r4, #0
 b58:	0a000005 	beq	b74 <__libc_init_array+0x70>
 b5c:	e5b53004 	ldr	r3, [r5, #4]!
 b60:	e2844001 	add	r4, r4, #1
 b64:	e1a0e00f 	mov	lr, pc
 b68:	e12fff13 	bx	r3
 b6c:	e1560004 	cmp	r6, r4
 b70:	1afffff9 	bne	b5c <__libc_init_array+0x58>
 b74:	e8bd4070 	pop	{r4, r5, r6, lr}
 b78:	e12fff1e 	bx	lr
 b7c:	00000bb0 	.word	0x00000bb0
 b80:	00000bb0 	.word	0x00000bb0
 b84:	00000bb0 	.word	0x00000bb0
 b88:	00000bb8 	.word	0x00000bb8

Disassembly of section .rodata:

00000b90 <_global_impure_ptr>:
 b90:	00000bf8 00000043                       ....C...

00000b98 <_init>:
 b98:	e1a0c00d 	mov	r12, sp
 b9c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 ba0:	e24cb004 	sub	r11, r12, #4
 ba4:	e24bd028 	sub	sp, r11, #40	; 0x28
 ba8:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 bac:	e12fff1e 	bx	lr

00000bb0 <__init_array_start>:
 bb0:	00000a1c 	.word	0x00000a1c

00000bb4 <__frame_dummy_init_array_entry>:
 bb4:	00000208                                ....

00000bb8 <__libc_fini>:
 bb8:	e1a0c00d 	mov	r12, sp
 bbc:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 bc0:	e24cb004 	sub	r11, r12, #4
 bc4:	e24bd028 	sub	sp, r11, #40	; 0x28
 bc8:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 bcc:	e12fff1e 	bx	lr

00000bd0 <__fini_array_start>:
 bd0:	000001c4 	.word	0x000001c4

00000bd4 <__cs3_regions>:
	...
 be0:	00001028 	.word	0x00001028
 be4:	00000020 	.word	0x00000020
