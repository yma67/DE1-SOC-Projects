
//campus.mcgill.ca/emf/CPE/yma67/My Documents/G16_Lab3/HEX_displays.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	0c 08 00 00 10 08 00 00 14 08 00 00 18 08 00 00     ................
  30:	1c 08 00 00 64 0e 00 00 e8 06 00 00 20 08 00 00     ....d....... ...

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb000349 	bl	e00 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000f54 	.word	0x00000f54

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00001390 	.word	0x00001390

00000124 <__cs3_heap_start_ptr>:
 124:	000013b8 	.word	0x000013b8

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00001398 	.word	0x00001398
 170:	0000139b 	.word	0x0000139b
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00001398 	.word	0x00001398
 1bc:	00001398 	.word	0x00001398
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00001398 	.word	0x00001398
 200:	00000000 	.word	0x00000000
 204:	00000ef0 	.word	0x00000ef0

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000ef0 	.word	0x00000ef0
 250:	0000139c 	.word	0x0000139c
 254:	00000f58 	.word	0x00000f58
 258:	00000000 	.word	0x00000000

0000025c <HEX_clear_ASM>:
        .global HEX_clear_ASM
        .global HEX_flood_ASM
        .global HEX_write_ASM

HEX_clear_ASM:
        PUSH {R1, LR}
 25c:	e92d4002 	push	{r1, lr}
        MOV R1, #0x00
 260:	e3a01000 	mov	r1, #0
        BL LOAD_MULTIPLE_VAR
 264:	eb00002b 	bl	318 <LOAD_MULTIPLE_VAR>
        POP {R1, LR}
 268:	e8bd4002 	pop	{r1, lr}
        BX LR
 26c:	e12fff1e 	bx	lr

00000270 <HEX_flood_ASM>:

HEX_flood_ASM: 
        PUSH {R1, LR}
 270:	e92d4002 	push	{r1, lr}
        MOV R1, #0x7F
 274:	e3a0107f 	mov	r1, #127	; 0x7f
        BL LOAD_MULTIPLE_VAR
 278:	eb000026 	bl	318 <LOAD_MULTIPLE_VAR>
        POP {R1, LR}
 27c:	e8bd4002 	pop	{r1, lr}
        BX LR
 280:	e12fff1e 	bx	lr

00000284 <HEX_write_ASM>:

HEX_write_ASM: 
        PUSH {R1, R2, LR}
 284:	e92d4006 	push	{r1, r2, lr}
        CMP R1, #0
 288:	e3510000 	cmp	r1, #0
        MOVEQ R2, #0x3F
 28c:	03a0203f 	moveq	r2, #63	; 0x3f
        CMP R1, #1
 290:	e3510001 	cmp	r1, #1
        MOVEQ R2, #0x06
 294:	03a02006 	moveq	r2, #6
        CMP R1, #2
 298:	e3510002 	cmp	r1, #2
        MOVEQ R2, #0x5B
 29c:	03a0205b 	moveq	r2, #91	; 0x5b
        CMP R1, #3
 2a0:	e3510003 	cmp	r1, #3
        MOVEQ R2, #0x4F
 2a4:	03a0204f 	moveq	r2, #79	; 0x4f
        CMP R1, #4
 2a8:	e3510004 	cmp	r1, #4
        MOVEQ R2, #0x66
 2ac:	03a02066 	moveq	r2, #102	; 0x66
        CMP R1, #5
 2b0:	e3510005 	cmp	r1, #5
        MOVEQ R2, #0x6D
 2b4:	03a0206d 	moveq	r2, #109	; 0x6d
        CMP R1, #6
 2b8:	e3510006 	cmp	r1, #6
        MOVEQ R2, #0x7D
 2bc:	03a0207d 	moveq	r2, #125	; 0x7d
        CMP R1, #7
 2c0:	e3510007 	cmp	r1, #7
        MOVEQ R2, #0x07
 2c4:	03a02007 	moveq	r2, #7
        CMP R1, #8
 2c8:	e3510008 	cmp	r1, #8
        MOVEQ R2, #0x7F
 2cc:	03a0207f 	moveq	r2, #127	; 0x7f
        CMP R1, #9
 2d0:	e3510009 	cmp	r1, #9
        MOVEQ R2, #0x6F
 2d4:	03a0206f 	moveq	r2, #111	; 0x6f
        CMP R1, #10
 2d8:	e351000a 	cmp	r1, #10
        MOVEQ R2, #0x77
 2dc:	03a02077 	moveq	r2, #119	; 0x77
        CMP R1, #11
 2e0:	e351000b 	cmp	r1, #11
        MOVEQ R2, #0x7C
 2e4:	03a0207c 	moveq	r2, #124	; 0x7c
        CMP R1, #12
 2e8:	e351000c 	cmp	r1, #12
        MOVEQ R2, #0x39
 2ec:	03a02039 	moveq	r2, #57	; 0x39
        CMP R1, #13
 2f0:	e351000d 	cmp	r1, #13
        MOVEQ R2, #0x5E
 2f4:	03a0205e 	moveq	r2, #94	; 0x5e
        CMP R1, #14
 2f8:	e351000e 	cmp	r1, #14
        MOVEQ R2, #0x79
 2fc:	03a02079 	moveq	r2, #121	; 0x79
        CMP R1, #15
 300:	e351000f 	cmp	r1, #15
        MOVEQ R2, #0x71
 304:	03a02071 	moveq	r2, #113	; 0x71
        MOV R1, R2
 308:	e1a01002 	mov	r1, r2
        BL LOAD_MULTIPLE_VAR
 30c:	eb000001 	bl	318 <LOAD_MULTIPLE_VAR>
        POP {R1, R2, LR}
 310:	e8bd4006 	pop	{r1, r2, lr}
        BX LR
 314:	e12fff1e 	bx	lr

00000318 <LOAD_MULTIPLE_VAR>:

LOAD_MULTIPLE_VAR:
        PUSH {R2, R3, R4, R5, R6, R7}
 318:	e92d00fc 	push	{r2, r3, r4, r5, r6, r7}
        LDR R2, =HEX_A
 31c:	e59f2084 	ldr	r2, [pc, #132]	; 3a8 <FIN+0x8>
        LDR R3, =HEX_B
 320:	e59f3084 	ldr	r3, [pc, #132]	; 3ac <FIN+0xc>
		MOV R7, #0xFF
 324:	e3a070ff 	mov	r7, #255	; 0xff
        MOV R4, #-1
 328:	e3e04000 	mvn	r4, #0
		MOV R5, #1
 32c:	e3a05001 	mov	r5, #1

00000330 <AST>:

AST:    ADD R4, R4, #1
 330:	e2844001 	add	r4, r4, #1
        CMP R4, #6
 334:	e3540006 	cmp	r4, #6
        BGE FIN
 338:	aa000018 	bge	3a0 <FIN>
        TST R0, R5, LSL R4
 33c:	e1100415 	tst	r0, r5, lsl r4
        BEQ AST
 340:	0afffffa 	beq	330 <AST>
		LDR R6, [R2]
 344:	e5926000 	ldr	r6, [r2]
		CMP R4, #0
 348:	e3540000 	cmp	r4, #0
        BICEQ R6, R6, R7
 34c:	01c66007 	biceq	r6, r6, r7
        ORREQ R6, R6, R1
 350:	01866001 	orreq	r6, r6, r1
		CMP R4, #1
 354:	e3540001 	cmp	r4, #1
        BICEQ R6, R6, R7, ROR #24
 358:	01c66c67 	biceq	r6, r6, r7, ror #24
        ORREQ R6, R6, R1, ROR #24
 35c:	01866c61 	orreq	r6, r6, r1, ror #24
		CMP R4, #2
 360:	e3540002 	cmp	r4, #2
        BICEQ R6, R6, R7, ROR #16
 364:	01c66867 	biceq	r6, r6, r7, ror #16
        ORREQ R6, R6, R1, ROR #16
 368:	01866861 	orreq	r6, r6, r1, ror #16
        CMP R4, #3
 36c:	e3540003 	cmp	r4, #3
        BICEQ R6, R6, R7, ROR #8
 370:	01c66467 	biceq	r6, r6, r7, ror #8
        ORREQ R6, R6, R1, ROR #8
 374:	01866461 	orreq	r6, r6, r1, ror #8
		STR R6, [R2]
 378:	e5826000 	str	r6, [r2]
		LDR R6, [R3]
 37c:	e5936000 	ldr	r6, [r3]
        CMP R4, #4
 380:	e3540004 	cmp	r4, #4
        BICEQ R6, R6, R7
 384:	01c66007 	biceq	r6, r6, r7
        ORREQ R6, R6, R1
 388:	01866001 	orreq	r6, r6, r1
        CMP R4, #5
 38c:	e3540005 	cmp	r4, #5
        BICEQ R6, R6, R7, ROR #24
 390:	01c66c67 	biceq	r6, r6, r7, ror #24
        ORREQ R6, R6, R1, ROR #24
 394:	01866c61 	orreq	r6, r6, r1, ror #24
		STR R6, [R3]
 398:	e5836000 	str	r6, [r3]
        B AST
 39c:	eaffffe3 	b	330 <AST>

000003a0 <FIN>:
FIN:    POP {R2, R3, R4, R5, R6, R7}
 3a0:	e8bd00fc 	pop	{r2, r3, r4, r5, r6, r7}
        BX LR
 3a4:	e12fff1e 	bx	lr
        POP {R1, R2, LR}
        BX LR

LOAD_MULTIPLE_VAR:
        PUSH {R2, R3, R4, R5, R6, R7}
        LDR R2, =HEX_A
 3a8:	ff200020 	.word	0xff200020
        LDR R3, =HEX_B
 3ac:	ff200030 	.word	0xff200030

000003b0 <read_LEDs_ASM>:
    .equ LED_BASE, 0xFF200000
    .global read_LEDs_ASM
    .global write_LEDs_ASM

read_LEDs_ASM: 
    LDR R1, =LED_BASE
 3b0:	e59f1018 	ldr	r1, [pc, #24]	; 3d0 <write_LEDs_ASM+0x14>
    LDR R0, [R1]
 3b4:	e5910000 	ldr	r0, [r1]
    BX LR
 3b8:	e12fff1e 	bx	lr

000003bc <write_LEDs_ASM>:

write_LEDs_ASM: 
	PUSH {R1}
 3bc:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
    LDR R1, =LED_BASE
 3c0:	e59f1008 	ldr	r1, [pc, #8]	; 3d0 <write_LEDs_ASM+0x14>
    STR R0, [R1]
 3c4:	e5810000 	str	r0, [r1]
	POP {R1}
 3c8:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
    BX LR
 3cc:	e12fff1e 	bx	lr
    .equ LED_BASE, 0xFF200000
    .global read_LEDs_ASM
    .global write_LEDs_ASM

read_LEDs_ASM: 
    LDR R1, =LED_BASE
 3d0:	ff200000 	.word	0xff200000

000003d4 <read_PB_data_ASM>:
        .global PB_clear_edgecp_ASM
        .global enable_PB_INT_ASM
        .global disable_PB_INT_ASM

read_PB_data_ASM:
        PUSH {R1, LR}
 3d4:	e92d4002 	push	{r1, lr}
        LDR R1, =PB_DATA
 3d8:	e59f10a8 	ldr	r1, [pc, #168]	; 488 <disable_PB_INT_ASM+0x1c>
		LDR R0, [R1]
 3dc:	e5910000 	ldr	r0, [r1]
        POP {R1, LR}
 3e0:	e8bd4002 	pop	{r1, lr}
        BX LR
 3e4:	e12fff1e 	bx	lr

000003e8 <PB_data_is_pressed_ASM>:

PB_data_is_pressed_ASM: 
        PUSH {R1, R2}
 3e8:	e92d0006 	push	{r1, r2}
        LDR R1, =PB_DATA
 3ec:	e59f1094 	ldr	r1, [pc, #148]	; 488 <disable_PB_INT_ASM+0x1c>
        LDR R2, [R1]
 3f0:	e5912000 	ldr	r2, [r1]
		TST R2, R0
 3f4:	e1120000 	tst	r2, r0
		MOVEQ R0, #0
 3f8:	03a00000 	moveq	r0, #0
		MOVNE R0, #1
 3fc:	13a00001 	movne	r0, #1
        POP {R1, R2}
 400:	e8bd0006 	pop	{r1, r2}
        BX LR
 404:	e12fff1e 	bx	lr

00000408 <read_PB_edgecap_ASM>:

read_PB_edgecap_ASM: 
        PUSH {R1, LR}
 408:	e92d4002 	push	{r1, lr}
        LDR R1, =PB_EDGE_CAP
 40c:	e59f1078 	ldr	r1, [pc, #120]	; 48c <disable_PB_INT_ASM+0x20>
        LDR R0, [R1]
 410:	e5910000 	ldr	r0, [r1]
        POP {R1, LR}
 414:	e8bd4002 	pop	{r1, lr}
        BX LR
 418:	e12fff1e 	bx	lr

0000041c <PB_edgecap_is_pressed_ASM>:

PB_edgecap_is_pressed_ASM: 
        PUSH {R1, R2}
 41c:	e92d0006 	push	{r1, r2}
        LDR R1, =PB_EDGE_CAP
 420:	e59f1064 	ldr	r1, [pc, #100]	; 48c <disable_PB_INT_ASM+0x20>
        LDR R2, [R1]
 424:	e5912000 	ldr	r2, [r1]
		TST R2, R0
 428:	e1120000 	tst	r2, r0
		MOVEQ R0, #0
 42c:	03a00000 	moveq	r0, #0
		MOVNE R0, #1
 430:	13a00001 	movne	r0, #1
        POP {R1, R2}
 434:	e8bd0006 	pop	{r1, r2}
        BX LR
 438:	e12fff1e 	bx	lr

0000043c <PB_clear_edgecp_ASM>:

PB_clear_edgecp_ASM: 
        PUSH {R1}
 43c:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
        LDR R1, =PB_EDGE_CAP
 440:	e59f1044 	ldr	r1, [pc, #68]	; 48c <disable_PB_INT_ASM+0x20>
        STR R0, [R1]
 444:	e5810000 	str	r0, [r1]
        POP {R1}
 448:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
        BX LR
 44c:	e12fff1e 	bx	lr

00000450 <enable_PB_INT_ASM>:

enable_PB_INT_ASM: 
        PUSH {R1, R2}
 450:	e92d0006 	push	{r1, r2}
        LDR R1, =PB_INTR_MSK
 454:	e59f1034 	ldr	r1, [pc, #52]	; 490 <disable_PB_INT_ASM+0x24>
        LDR R2, [R1]
 458:	e5912000 	ldr	r2, [r1]
        ORR R2, R2, R0
 45c:	e1822000 	orr	r2, r2, r0
        STR R2, [R1]
 460:	e5812000 	str	r2, [r1]
        POP {R1, R2}
 464:	e8bd0006 	pop	{r1, r2}
        BX LR
 468:	e12fff1e 	bx	lr

0000046c <disable_PB_INT_ASM>:

disable_PB_INT_ASM:
        PUSH {R1, R2}
 46c:	e92d0006 	push	{r1, r2}
        LDR R1, =PB_INTR_MSK
 470:	e59f1018 	ldr	r1, [pc, #24]	; 490 <disable_PB_INT_ASM+0x24>
        LDR R2, [R1]
 474:	e5912000 	ldr	r2, [r1]
        BIC R2, R2, R0
 478:	e1c22000 	bic	r2, r2, r0
        STR R2, [R1]
 47c:	e5812000 	str	r2, [r1]
        POP {R1, R2}
 480:	e8bd0006 	pop	{r1, r2}
        BX LR
 484:	e12fff1e 	bx	lr
        .global enable_PB_INT_ASM
        .global disable_PB_INT_ASM

read_PB_data_ASM:
        PUSH {R1, LR}
        LDR R1, =PB_DATA
 488:	ff200050 	.word	0xff200050
        POP {R1, R2}
        BX LR

read_PB_edgecap_ASM: 
        PUSH {R1, LR}
        LDR R1, =PB_EDGE_CAP
 48c:	ff20005c 	.word	0xff20005c
        POP {R1}
        BX LR

enable_PB_INT_ASM: 
        PUSH {R1, R2}
        LDR R1, =PB_INTR_MSK
 490:	ff200058 	.word	0xff200058

00000494 <read_slider_switches_ASM>:
    .text
    .equ SW_BASE, 0xFF200040
    .global read_slider_switches_ASM

read_slider_switches_ASM: 
    LDR R1, =SW_BASE
 494:	e59f1004 	ldr	r1, [pc, #4]	; 4a0 <read_slider_switches_ASM+0xc>
    LDR R0, [R1]
 498:	e5910000 	ldr	r0, [r1]
    BX LR
 49c:	e12fff1e 	bx	lr
    .text
    .equ SW_BASE, 0xFF200040
    .global read_slider_switches_ASM

read_slider_switches_ASM: 
    LDR R1, =SW_BASE
 4a0:	ff200040 	.word	0xff200040

000004a4 <HPS_TIM_config_ASM>:
	.global HPS_TIM_config_ASM
	.global HPS_TIM_clear_INT_ASM
	.global HPS_TIM_read_INT_ASM

HPS_TIM_config_ASM:
	PUSH {R4-R7, LR}
 4a4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	MOV R1, #0
 4a8:	e3a01000 	mov	r1, #0
	MOV R2, #1
 4ac:	e3a02001 	mov	r2, #1
	LDR R7, [R0]
 4b0:	e5907000 	ldr	r7, [r0]
	B LOOP
 4b4:	eaffffff 	b	4b8 <LOOP>

000004b8 <LOOP>:

LOOP:
	TST R7, R2, LSL R1
 4b8:	e1170112 	tst	r7, r2, lsl r1
	BEQ CONTINUE
 4bc:	0a000000 	beq	4c4 <CONTINUE>
	BL CONFIG
 4c0:	eb000004 	bl	4d8 <CONFIG>

000004c4 <CONTINUE>:

CONTINUE:
	ADD R1, R1, #1
 4c4:	e2811001 	add	r1, r1, #1
	CMP R1, #4
 4c8:	e3510004 	cmp	r1, #4
	BLT LOOP
 4cc:	bafffff9 	blt	4b8 <LOOP>

000004d0 <DONE>:

DONE:
	POP {R4-R7, LR}
 4d0:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
	BX LR
 4d4:	e12fff1e 	bx	lr

000004d8 <CONFIG>:


CONFIG:
	PUSH {LR}
 4d8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	LDR R3, =HPS_TIM_BASE
 4dc:	e59f3148 	ldr	r3, [pc, #328]	; 62c <HPS_TIM_BASE+0x10>
	LDR R4, [R3, R1, LSL #2]
 4e0:	e7934101 	ldr	r4, [r3, r1, lsl #2]
	
	BL DISABLE
 4e4:	eb000005 	bl	500 <DISABLE>
	BL SET_LOAD_VAL
 4e8:	eb000008 	bl	510 <SET_LOAD_VAL>
	BL SET_LOAD_BIT
 4ec:	eb00000e 	bl	52c <SET_LOAD_BIT>
	BL SET_INT_BIT
 4f0:	eb000013 	bl	544 <SET_INT_BIT>
	BL SET_EN_BIT
 4f4:	eb000019 	bl	560 <SET_EN_BIT>
	
	POP {LR}
 4f8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR 
 4fc:	e12fff1e 	bx	lr

00000500 <DISABLE>:

DISABLE:
	LDR R5, [R4, #0x8]
 500:	e5945008 	ldr	r5, [r4, #8]
	AND R5, R5, #0xFFFFFFFE
 504:	e3c55001 	bic	r5, r5, #1
	STR R5, [R4, #0x8]
 508:	e5845008 	str	r5, [r4, #8]
	BX LR
 50c:	e12fff1e 	bx	lr

00000510 <SET_LOAD_VAL>:
	
SET_LOAD_VAL:
	LDR R5, [R0, #0x4]
 510:	e5905004 	ldr	r5, [r0, #4]
	MOV R6, #25
 514:	e3a06019 	mov	r6, #25
	MUL R5, R5, R6
 518:	e0050695 	mul	r5, r5, r6
	CMP R1, #2
 51c:	e3510002 	cmp	r1, #2
	LSLLT R5, R5, #2
 520:	b1a05105 	lsllt	r5, r5, #2
	STR R5, [R4]
 524:	e5845000 	str	r5, [r4]
	BX LR
 528:	e12fff1e 	bx	lr

0000052c <SET_LOAD_BIT>:
	
SET_LOAD_BIT:
	LDR R5, [R4, #0x8]
 52c:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0x8]
 530:	e5906008 	ldr	r6, [r0, #8]
	AND R5, R5, #0xFFFFFFFD
 534:	e3c55002 	bic	r5, r5, #2
	ORR R5, R5, R6, LSL #1
 538:	e1855086 	orr	r5, r5, r6, lsl #1
	STR R5, [R4, #0x8]
 53c:	e5845008 	str	r5, [r4, #8]
	BX LR
 540:	e12fff1e 	bx	lr

00000544 <SET_INT_BIT>:
	
SET_INT_BIT:
	LDR R5, [R4, #0x8]
 544:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0xC]
 548:	e590600c 	ldr	r6, [r0, #12]
	EOR R6, R6, #0x00000001
 54c:	e2266001 	eor	r6, r6, #1
	AND R5, R5, #0xFFFFFFFB
 550:	e3c55004 	bic	r5, r5, #4
	ORR R5, R5, R6, LSL #2
 554:	e1855106 	orr	r5, r5, r6, lsl #2
	STR R5, [R4, #0x8]
 558:	e5845008 	str	r5, [r4, #8]
	BX LR
 55c:	e12fff1e 	bx	lr

00000560 <SET_EN_BIT>:
	
SET_EN_BIT:
	LDR R5, [R4, #0x8]
 560:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0x10]
 564:	e5906010 	ldr	r6, [r0, #16]
	AND R5, R5, #0xFFFFFFFE
 568:	e3c55001 	bic	r5, r5, #1
	ORR R5, R5, R6
 56c:	e1855006 	orr	r5, r5, r6
	STR R5, [R4, #0x8]
 570:	e5845008 	str	r5, [r4, #8]
	BX LR
 574:	e12fff1e 	bx	lr

00000578 <HPS_TIM_clear_INT_ASM>:

HPS_TIM_clear_INT_ASM:
	PUSH {LR}
 578:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	MOV R1, #0
 57c:	e3a01000 	mov	r1, #0
	MOV R2, #1
 580:	e3a02001 	mov	r2, #1
	B CLEAR_INT_LOOP
 584:	eaffffff 	b	588 <CLEAR_INT_LOOP>

00000588 <CLEAR_INT_LOOP>:

CLEAR_INT_LOOP:
	TST R0, R2, LSL R1
 588:	e1100112 	tst	r0, r2, lsl r1
	BEQ CLEAR_INT_CONTINUE
 58c:	0a000000 	beq	594 <CLEAR_INT_CONTINUE>
	BL CLEAR_INT
 590:	eb000005 	bl	5ac <CLEAR_INT>

00000594 <CLEAR_INT_CONTINUE>:

CLEAR_INT_CONTINUE:
	ADD R1, R1, #1
 594:	e2811001 	add	r1, r1, #1
	CMP R1, #4
 598:	e3510004 	cmp	r1, #4
	BLT CLEAR_INT_LOOP
 59c:	bafffff9 	blt	588 <CLEAR_INT_LOOP>
	B CLEAR_INT_DONE
 5a0:	eaffffff 	b	5a4 <CLEAR_INT_DONE>

000005a4 <CLEAR_INT_DONE>:

CLEAR_INT_DONE:
	POP {LR}
 5a4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
 5a8:	e12fff1e 	bx	lr

000005ac <CLEAR_INT>:

CLEAR_INT:
	LDR R3, =HPS_TIM_BASE
 5ac:	e59f3078 	ldr	r3, [pc, #120]	; 62c <HPS_TIM_BASE+0x10>
	LDR R3, [R3, R1, LSL #2]
 5b0:	e7933101 	ldr	r3, [r3, r1, lsl #2]
	LDR R3, [R3, #0xC]
 5b4:	e593300c 	ldr	r3, [r3, #12]
	BX LR
 5b8:	e12fff1e 	bx	lr

000005bc <HPS_TIM_read_INT_ASM>:

HPS_TIM_read_INT_ASM:
	PUSH {LR}
 5bc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	PUSH {R4}
 5c0:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
	MOV R1, #0
 5c4:	e3a01000 	mov	r1, #0
	MOV R2, #1
 5c8:	e3a02001 	mov	r2, #1
	MOV R4, #0
 5cc:	e3a04000 	mov	r4, #0
	B READ_INT_LOOP
 5d0:	eaffffff 	b	5d4 <READ_INT_LOOP>

000005d4 <READ_INT_LOOP>:

READ_INT_LOOP:
	TST R0, R2, LSL R1
 5d4:	e1100112 	tst	r0, r2, lsl r1
	BEQ READ_INT_CONTINUE
 5d8:	0a000000 	beq	5e0 <READ_INT_CONTINUE>
	BL READ_INT
 5dc:	eb000008 	bl	604 <READ_INT>

000005e0 <READ_INT_CONTINUE>:

READ_INT_CONTINUE:
	ADD R1, R1, #1
 5e0:	e2811001 	add	r1, r1, #1
	CMP R1, #4
 5e4:	e3510004 	cmp	r1, #4
	BEQ READ_INT_DONE
 5e8:	0a000001 	beq	5f4 <READ_INT_DONE>
	LSL R4, R4, #1
 5ec:	e1a04084 	lsl	r4, r4, #1
	B READ_INT_LOOP
 5f0:	eafffff7 	b	5d4 <READ_INT_LOOP>

000005f4 <READ_INT_DONE>:
	
READ_INT_DONE:
	MOV R0, R4
 5f4:	e1a00004 	mov	r0, r4
	POP {R4}
 5f8:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
	POP {LR}
 5fc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
 600:	e12fff1e 	bx	lr

00000604 <READ_INT>:

READ_INT:
	LDR R3, =HPS_TIM_BASE
 604:	e59f3020 	ldr	r3, [pc, #32]	; 62c <HPS_TIM_BASE+0x10>
	LDR R3, [R3, R1, LSL #2]
 608:	e7933101 	ldr	r3, [r3, r1, lsl #2]
	LDR R3, [R3, #0x10]
 60c:	e5933010 	ldr	r3, [r3, #16]
	AND R3, R3, #0x1
 610:	e2033001 	and	r3, r3, #1
	EOR R4, R4, R3
 614:	e0244003 	eor	r4, r4, r3
	BX LR
 618:	e12fff1e 	bx	lr

0000061c <HPS_TIM_BASE>:
 61c:	ffc08000 	.word	0xffc08000
 620:	ffc09000 	.word	0xffc09000
 624:	ffd00000 	.word	0xffd00000
 628:	ffd01000 	.word	0xffd01000


CONFIG:
	PUSH {LR}
	
	LDR R3, =HPS_TIM_BASE
 62c:	0000061c 	.word	0x0000061c

00000630 <disable_A9_interrupts>:
#include "../inc/int_setup.h"

void disable_A9_interrupts() {
	int status = 0b11010011;
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
 630:	e3a030d3 	mov	r3, #211	; 0xd3
 634:	e129f003 	msr	CPSR_fc, r3
 638:	e12fff1e 	bx	lr

0000063c <enable_A9_interrupts>:
}

void enable_A9_interrupts() {
	int status = 0b01010011;
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
 63c:	e3a03053 	mov	r3, #83	; 0x53
 640:	e129f003 	msr	CPSR_fc, r3
 644:	e12fff1e 	bx	lr

00000648 <set_A9_IRQ_stack>:

void set_A9_IRQ_stack() {
	int stack, mode;
	stack = 0xFFFFFFFF - 7;
	mode = 0b11010010;
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
 648:	e3a030d2 	mov	r3, #210	; 0xd2
 64c:	e129f003 	msr	CPSR_fc, r3
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
 650:	e3e03007 	mvn	r3, #7
 654:	e1a0d003 	mov	sp, r3
	
	mode = 0b11010011;
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
 658:	e3a030d3 	mov	r3, #211	; 0xd3
 65c:	e129f003 	msr	CPSR_fc, r3
 660:	e12fff1e 	bx	lr

00000664 <config_interrupt>:
}

void config_interrupt(int ID, int CPU) {
 664:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
	int reg_offset;
	int index;
	int value;
	int address;
	
	reg_offset = (ID>>3) & 0xFFFFFFFC;
 668:	e1a031c0 	asr	r3, r0, #3
 66c:	e3c33003 	bic	r3, r3, #3
	index = ID & 0x1F;
	value = 1<<index;
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
 670:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
	int index;
	int value;
	int address;
	
	reg_offset = (ID>>3) & 0xFFFFFFFC;
	index = ID & 0x1F;
 674:	e200201f 	and	r2, r0, #31
	value = 1<<index;
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
	*(int *)address |= value;
 678:	e513c300 	ldr	r12, [r3, #-768]	; 0xfffffd00
 67c:	e3a04001 	mov	r4, #1
 680:	e18c2214 	orr	r2, r12, r4, lsl r2
 684:	e5032300 	str	r2, [r3, #-768]	; 0xfffffd00
	
	reg_offset = (ID & 0xFFFFFFFC);
	index = ID & 3;
	address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
	*(char *)address = (char)CPU;
 688:	e2400b4a 	sub	r0, r0, #75776	; 0x12800
 68c:	e5c01000 	strb	r1, [r0]
}
 690:	e8bd0010 	ldmfd	sp!, {r4}
 694:	e12fff1e 	bx	lr

00000698 <config_GIC>:

void config_GIC(int len, int* IDs) {
 698:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
	int i;
	for(i=0 ; i<len ; i++)
 69c:	e2506000 	subs	r6, r0, #0
 6a0:	da000008 	ble	6c8 <config_GIC+0x30>
	index = ID & 3;
	address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
	*(char *)address = (char)CPU;
}

void config_GIC(int len, int* IDs) {
 6a4:	e2415004 	sub	r5, r1, #4
	int i;
	for(i=0 ; i<len ; i++)
 6a8:	e3a04000 	mov	r4, #0
		config_interrupt(IDs[i],1);
 6ac:	e3a07001 	mov	r7, #1
 6b0:	e5b50004 	ldr	r0, [r5, #4]!
 6b4:	e1a01007 	mov	r1, r7
 6b8:	ebffffe9 	bl	664 <config_interrupt>
	*(char *)address = (char)CPU;
}

void config_GIC(int len, int* IDs) {
	int i;
	for(i=0 ; i<len ; i++)
 6bc:	e2844001 	add	r4, r4, #1
 6c0:	e1540006 	cmp	r4, r6
 6c4:	1afffff9 	bne	6b0 <config_GIC+0x18>
		config_interrupt(IDs[i],1);
	*((int *) (MPCORE_GIC_CPUIF + ICCPMR)) = 0xFFFF;
 6c8:	e3e02a13 	mvn	r2, #77824	; 0x13000
 6cc:	e30f3fff 	movw	r3, #65535	; 0xffff
 6d0:	e5023efb 	str	r3, [r2, #-3835]	; 0xfffff105
	*((int *) (MPCORE_GIC_CPUIF)) = 1;
 6d4:	e3a03001 	mov	r3, #1
 6d8:	e5023eff 	str	r3, [r2, #-3839]	; 0xfffff101
	*((int *) (MPCORE_GIC_DIST)) = 1;
 6dc:	e3e02a12 	mvn	r2, #73728	; 0x12000
 6e0:	e5023fff 	str	r3, [r2, #-4095]	; 0xfffff001
 6e4:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}

000006e8 <__cs3_isr_irq>:
}

void __attribute__ ((interrupt)) __cs3_isr_irq() {
 6e8:	e24ee004 	sub	lr, lr, #4
 6ec:	e92d503f 	push	{r0, r1, r2, r3, r4, r5, r12, lr}
	int interrupt_ID = *((int *) (MPCORE_GIC_CPUIF + ICCIAR));
 6f0:	e3e03a13 	mvn	r3, #77824	; 0x13000
 6f4:	e5134ef3 	ldr	r4, [r3, #-3827]	; 0xfffff10d
	
	switch(interrupt_ID) {
 6f8:	e3540053 	cmp	r4, #83	; 0x53
 6fc:	0a000038 	beq	7e4 <__cs3_isr_irq+0xfc>
 700:	ca00000f 	bgt	744 <__cs3_isr_irq+0x5c>
 704:	e354004e 	cmp	r4, #78	; 0x4e
 708:	0a00002d 	beq	7c4 <__cs3_isr_irq+0xdc>
 70c:	ca000006 	bgt	72c <__cs3_isr_irq+0x44>
 710:	e3540048 	cmp	r4, #72	; 0x48
 714:	0a000026 	beq	7b4 <__cs3_isr_irq+0xcc>
 718:	e3540049 	cmp	r4, #73	; 0x49
 71c:	0a000026 	beq	7bc <__cs3_isr_irq+0xd4>
 720:	e354001d 	cmp	r4, #29
 724:	0a000016 	beq	784 <__cs3_isr_irq+0x9c>
 728:	ea000033 	b	7fc <__cs3_isr_irq+0x114>
 72c:	e3540050 	cmp	r4, #80	; 0x50
 730:	0a000027 	beq	7d4 <__cs3_isr_irq+0xec>
 734:	ba000024 	blt	7cc <__cs3_isr_irq+0xe4>
 738:	e3540051 	cmp	r4, #81	; 0x51
 73c:	0a000026 	beq	7dc <__cs3_isr_irq+0xf4>
 740:	ea00002d 	b	7fc <__cs3_isr_irq+0x114>
 744:	e35400c7 	cmp	r4, #199	; 0xc7
 748:	0a000011 	beq	794 <__cs3_isr_irq+0xac>
 74c:	ca000006 	bgt	76c <__cs3_isr_irq+0x84>
 750:	e3540059 	cmp	r4, #89	; 0x59
 754:	0a000026 	beq	7f4 <__cs3_isr_irq+0x10c>
 758:	e35400c5 	cmp	r4, #197	; 0xc5
 75c:	0a00000a 	beq	78c <__cs3_isr_irq+0xa4>
 760:	e3540054 	cmp	r4, #84	; 0x54
 764:	0a000020 	beq	7ec <__cs3_isr_irq+0x104>
 768:	ea000023 	b	7fc <__cs3_isr_irq+0x114>
 76c:	e35400c9 	cmp	r4, #201	; 0xc9
 770:	0a00000b 	beq	7a4 <__cs3_isr_irq+0xbc>
 774:	ba000008 	blt	79c <__cs3_isr_irq+0xb4>
 778:	e35400ca 	cmp	r4, #202	; 0xca
 77c:	0a00000a 	beq	7ac <__cs3_isr_irq+0xc4>
 780:	ea00001d 	b	7fc <__cs3_isr_irq+0x114>
		
		case 29:  A9_PRIV_TIM_ISR(); break;
 784:	eb000037 	bl	868 <A9_PRIV_TIM_ISR>
 788:	ea00001c 	b	800 <__cs3_isr_irq+0x118>
		case 197: HPS_GPIO1_ISR(); break;
 78c:	eb000036 	bl	86c <HPS_GPIO1_ISR>
 790:	ea00001a 	b	800 <__cs3_isr_irq+0x118>
		case 199: HPS_TIM0_ISR(); break;
 794:	eb000035 	bl	870 <HPS_TIM0_ISR>
 798:	ea000018 	b	800 <__cs3_isr_irq+0x118>
		case 200: HPS_TIM1_ISR(); break;
 79c:	eb00003b 	bl	890 <HPS_TIM1_ISR>
 7a0:	ea000016 	b	800 <__cs3_isr_irq+0x118>
		case 201: HPS_TIM2_ISR(); break;
 7a4:	eb00003a 	bl	894 <HPS_TIM2_ISR>
 7a8:	ea000014 	b	800 <__cs3_isr_irq+0x118>
		case 202: HPS_TIM3_ISR(); break;
 7ac:	eb000039 	bl	898 <HPS_TIM3_ISR>
 7b0:	ea000012 	b	800 <__cs3_isr_irq+0x118>
		case 72:  FPGA_INTERVAL_TIM_ISR(); break;
 7b4:	eb000038 	bl	89c <FPGA_INTERVAL_TIM_ISR>
 7b8:	ea000010 	b	800 <__cs3_isr_irq+0x118>
		case 73:  FPGA_PB_KEYS_ISR(); break;
 7bc:	eb000037 	bl	8a0 <FPGA_PB_KEYS_ISR>
 7c0:	ea00000e 	b	800 <__cs3_isr_irq+0x118>
		case 78:  FPGA_Audio_ISR(); break;
 7c4:	eb00003c 	bl	8bc <FPGA_Audio_ISR>
 7c8:	ea00000c 	b	800 <__cs3_isr_irq+0x118>
		case 79:  FPGA_PS2_ISR(); break;
 7cc:	eb00003b 	bl	8c0 <FPGA_PS2_ISR>
 7d0:	ea00000a 	b	800 <__cs3_isr_irq+0x118>
		case 80:  FPGA_JTAG_ISR(); break;
 7d4:	eb00003a 	bl	8c4 <FPGA_JTAG_ISR>
 7d8:	ea000008 	b	800 <__cs3_isr_irq+0x118>
		case 81:  FPGA_IrDA_ISR(); break;
 7dc:	eb000039 	bl	8c8 <FPGA_IrDA_ISR>
 7e0:	ea000006 	b	800 <__cs3_isr_irq+0x118>
		case 83:  FPGA_JP1_ISR(); break;
 7e4:	eb000038 	bl	8cc <FPGA_JP1_ISR>
 7e8:	ea000004 	b	800 <__cs3_isr_irq+0x118>
		case 84:  FPGA_JP2_ISR(); break;
 7ec:	eb000037 	bl	8d0 <FPGA_JP2_ISR>
 7f0:	ea000002 	b	800 <__cs3_isr_irq+0x118>
		case 89:  FPGA_PS2_DUAL_ISR(); break;
 7f4:	eb000036 	bl	8d4 <FPGA_PS2_DUAL_ISR>
 7f8:	ea000000 	b	800 <__cs3_isr_irq+0x118>
 7fc:	eafffffe 	b	7fc <__cs3_isr_irq+0x114>
	
		default: while(1); break;
	}
	
	*((int *) (MPCORE_GIC_CPUIF + ICCEOIR)) = interrupt_ID;
 800:	e3e03a13 	mvn	r3, #77824	; 0x13000
 804:	e5034eef 	str	r4, [r3, #-3823]	; 0xfffff111
 808:	e8fd903f 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r12, pc}^

0000080c <__cs3_reset>:
}

void __attribute__ ((interrupt)) __cs3_reset (void) {
 80c:	eafffffe 	b	80c <__cs3_reset>

00000810 <__cs3_isr_undef>:
	while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void) {
 810:	eafffffe 	b	810 <__cs3_isr_undef>

00000814 <__cs3_isr_swi>:
	while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void) {
 814:	eafffffe 	b	814 <__cs3_isr_swi>

00000818 <__cs3_isr_pabort>:
	while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void) {
 818:	eafffffe 	b	818 <__cs3_isr_pabort>

0000081c <__cs3_isr_dabort>:
	while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void) {
 81c:	eafffffe 	b	81c <__cs3_isr_dabort>

00000820 <__cs3_isr_fiq>:
	while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void) {
 820:	eafffffe 	b	820 <__cs3_isr_fiq>

00000824 <fix_bug>:
	while(1);
}

void fix_bug() {
	volatile int * addr = (int *)0xFFFED198;
	*addr = 0x000C0000;
 824:	e3a02703 	mov	r2, #786432	; 0xc0000
 828:	e3e03a12 	mvn	r3, #73728	; 0x12000
 82c:	e5032e67 	str	r2, [r3, #-3687]	; 0xfffff199
 830:	e12fff1e 	bx	lr

00000834 <int_setup>:
}

void int_setup(int len, int* IDs) {
 834:	e92d4038 	push	{r3, r4, r5, lr}
 838:	e1a05000 	mov	r5, r0
 83c:	e1a04001 	mov	r4, r1
	disable_A9_interrupts();
 840:	ebffff7a 	bl	630 <disable_A9_interrupts>
	set_A9_IRQ_stack();
 844:	ebffff7f 	bl	648 <set_A9_IRQ_stack>
	fix_bug();
 848:	ebfffff5 	bl	824 <fix_bug>
	config_GIC(len, IDs);
 84c:	e1a00005 	mov	r0, r5
 850:	e1a01004 	mov	r1, r4
 854:	ebffff8f 	bl	698 <config_GIC>
	enable_A9_interrupts();
 858:	ebffff77 	bl	63c <enable_A9_interrupts>
 85c:	e8bd8038 	pop	{r3, r4, r5, pc}

00000860 <hps_tim0_int_flag>:
 860:	00000000 	.word	0x00000000

00000864 <pushbtn_int_flag>:
 864:	00000000 	.word	0x00000000

00000868 <A9_PRIV_TIM_ISR>:

pushbtn_int_flag:   
	.word 0x0

A9_PRIV_TIM_ISR:
	BX LR
 868:	e12fff1e 	bx	lr

0000086c <HPS_GPIO1_ISR>:
	
HPS_GPIO1_ISR:
	BX LR
 86c:	e12fff1e 	bx	lr

00000870 <HPS_TIM0_ISR>:
	
HPS_TIM0_ISR:
    PUSH {LR}
 870:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    MOV R0, #0x1
 874:	e3a00001 	mov	r0, #1
    BL HPS_TIM_clear_INT_ASM
 878:	ebffff3e 	bl	578 <HPS_TIM_clear_INT_ASM>
    LDR R0, =hps_tim0_int_flag
 87c:	e59f0054 	ldr	r0, [pc, #84]	; 8d8 <FPGA_PS2_DUAL_ISR+0x4>
    MOV R1, #1
 880:	e3a01001 	mov	r1, #1
    STR R1, [R0]
 884:	e5801000 	str	r1, [r0]
    POP {LR}
 888:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
 88c:	e12fff1e 	bx	lr

00000890 <HPS_TIM1_ISR>:
	
HPS_TIM1_ISR:
	BX LR
 890:	e12fff1e 	bx	lr

00000894 <HPS_TIM2_ISR>:
	
HPS_TIM2_ISR:
	BX LR
 894:	e12fff1e 	bx	lr

00000898 <HPS_TIM3_ISR>:
	
HPS_TIM3_ISR:
	BX LR
 898:	e12fff1e 	bx	lr

0000089c <FPGA_INTERVAL_TIM_ISR>:
	
FPGA_INTERVAL_TIM_ISR:
	BX LR
 89c:	e12fff1e 	bx	lr

000008a0 <FPGA_PB_KEYS_ISR>:
	
FPGA_PB_KEYS_ISR:
    PUSH {R1, LR}
 8a0:	e92d4002 	push	{r1, lr}
    BL read_PB_edgecap_ASM
 8a4:	ebfffed7 	bl	408 <read_PB_edgecap_ASM>
    LDR R1, =pushbtn_int_flag
 8a8:	e59f102c 	ldr	r1, [pc, #44]	; 8dc <FPGA_PS2_DUAL_ISR+0x8>
    STR R0, [R1]
 8ac:	e5810000 	str	r0, [r1]
    BL PB_clear_edgecp_ASM
 8b0:	ebfffee1 	bl	43c <PB_clear_edgecp_ASM>
    POP {R1, LR}
 8b4:	e8bd4002 	pop	{r1, lr}
    BX LR
 8b8:	e12fff1e 	bx	lr

000008bc <FPGA_Audio_ISR>:
	
FPGA_Audio_ISR:
	BX LR
 8bc:	e12fff1e 	bx	lr

000008c0 <FPGA_PS2_ISR>:
	
FPGA_PS2_ISR:
	BX LR
 8c0:	e12fff1e 	bx	lr

000008c4 <FPGA_JTAG_ISR>:
	
FPGA_JTAG_ISR:
	BX LR
 8c4:	e12fff1e 	bx	lr

000008c8 <FPGA_IrDA_ISR>:
	
FPGA_IrDA_ISR:
	BX LR
 8c8:	e12fff1e 	bx	lr

000008cc <FPGA_JP1_ISR>:
	
FPGA_JP1_ISR:
	BX LR
 8cc:	e12fff1e 	bx	lr

000008d0 <FPGA_JP2_ISR>:
	
FPGA_JP2_ISR:
	BX LR
 8d0:	e12fff1e 	bx	lr

000008d4 <FPGA_PS2_DUAL_ISR>:
	
FPGA_PS2_DUAL_ISR:
	BX LR
 8d4:	e12fff1e 	bx	lr
	
HPS_TIM0_ISR:
    PUSH {LR}
    MOV R0, #0x1
    BL HPS_TIM_clear_INT_ASM
    LDR R0, =hps_tim0_int_flag
 8d8:	00000860 	.word	0x00000860
	BX LR
	
FPGA_PB_KEYS_ISR:
    PUSH {R1, LR}
    BL read_PB_edgecap_ASM
    LDR R1, =pushbtn_int_flag
 8dc:	00000864 	.word	0x00000864

000008e0 <main>:
#include "./drivers/inc/ISRs.h"
#include "./drivers/inc/pushbuttons.h"
#include "./drivers/inc/HEX_displays.h"
#include "./drivers/inc/HPS_TIM.h"

int main() {
 8e0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8e4:	e24dd02c 	sub	sp, sp, #44	; 0x2c
	int_setup(2, (int []){73, 199}); 
 8e8:	e3003ef4 	movw	r3, #3828	; 0xef4
 8ec:	e3403000 	movt	r3, #0
 8f0:	e28d2020 	add	r2, sp, #32
 8f4:	e8930003 	ldm	r3, {r0, r1}
 8f8:	e8820003 	stm	r2, {r0, r1}
 8fc:	e3a00002 	mov	r0, #2
 900:	e1a01002 	mov	r1, r2
 904:	ebffffca 	bl	834 <int_setup>
	enable_PB_INT_ASM(PB0 | PB1 | PB2); 
 908:	e3a00007 	mov	r0, #7
 90c:	ebfffecf 	bl	450 <enable_PB_INT_ASM>
    unsigned int count = 0, start = 0;

	HPS_TIM_config_t hps_tim10ms;

	hps_tim10ms.tim = TIM0;
 910:	e3a03001 	mov	r3, #1
 914:	e5cd300c 	strb	r3, [sp, #12]
	hps_tim10ms.timeout = 10000;
 918:	e3022710 	movw	r2, #10000	; 0x2710
 91c:	e58d2010 	str	r2, [sp, #16]
	hps_tim10ms.LD_en = 1;
 920:	e58d3014 	str	r3, [sp, #20]
	hps_tim10ms.INT_en = 1;
 924:	e58d3018 	str	r3, [sp, #24]
	hps_tim10ms.enable = 1;
 928:	e58d301c 	str	r3, [sp, #28]

	HPS_TIM_config_ASM(&hps_tim10ms);
 92c:	e28d000c 	add	r0, sp, #12
 930:	ebfffedb 	bl	4a4 <HPS_TIM_config_ASM>
#include "./drivers/inc/HPS_TIM.h"

int main() {
	int_setup(2, (int []){73, 199}); 
	enable_PB_INT_ASM(PB0 | PB1 | PB2); 
    unsigned int count = 0, start = 0;
 934:	e3a08000 	mov	r8, #0
 938:	e1a05008 	mov	r5, r8
	hps_tim10ms.enable = 1;

	HPS_TIM_config_ASM(&hps_tim10ms);

	while (1) {
		if (pushbtn_int_flag == 1) {
 93c:	e3004864 	movw	r4, #2148	; 0x864
 940:	e3404000 	movt	r4, #0
			pushbtn_int_flag = 0; 
		}
		if (start && hps_tim0_int_flag) {
			hps_tim0_int_flag = 0; 
			if (++count == 366099) count = 0; 
			HEX_write_ASM(HEX0, count % 10); 
 944:	e30c6ccd 	movw	r6, #52429	; 0xcccd
 948:	e34c6ccc 	movt	r6, #52428	; 0xcccc
			HEX_write_ASM(HEX1, (count / 10) % 10); 
			HEX_write_ASM(HEX2, (count / 100) % 10); 
 94c:	e308b51f 	movw	r11, #34079	; 0x851f
 950:	e345b1eb 	movt	r11, #20971	; 0x51eb
			HEX_write_ASM(HEX3, ((count / 100) % 60) / 10);
 954:	e3089889 	movw	r9, #34953	; 0x8889
 958:	e3489888 	movt	r9, #34952	; 0x8888
			HEX_write_ASM(HEX4, ((count / 100) / 60) % 10);
 95c:	e301a9f1 	movw	r10, #6641	; 0x19f1
 960:	e340a576 	movt	r10, #1398	; 0x576
			HEX_write_ASM(HEX5, ((count / 100) / 60) / 10 % 10);
 964:	e30b1273 	movw	r1, #45683	; 0xb273
 968:	e34415e7 	movt	r1, #17895	; 0x45e7
 96c:	e58d1004 	str	r1, [sp, #4]
	hps_tim10ms.enable = 1;

	HPS_TIM_config_ASM(&hps_tim10ms);

	while (1) {
		if (pushbtn_int_flag == 1) {
 970:	e5943000 	ldr	r3, [r4]
 974:	e3530001 	cmp	r3, #1
			start = 1;
			pushbtn_int_flag = 0; 
 978:	03a03000 	moveq	r3, #0
 97c:	05843000 	streq	r3, [r4]

	HPS_TIM_config_ASM(&hps_tim10ms);

	while (1) {
		if (pushbtn_int_flag == 1) {
			start = 1;
 980:	03a08001 	moveq	r8, #1
	hps_tim10ms.enable = 1;

	HPS_TIM_config_ASM(&hps_tim10ms);

	while (1) {
		if (pushbtn_int_flag == 1) {
 984:	0a00000f 	beq	9c8 <main+0xe8>
			start = 1;
			pushbtn_int_flag = 0; 
		} else if (pushbtn_int_flag == 2) {
 988:	e5943000 	ldr	r3, [r4]
 98c:	e3530002 	cmp	r3, #2
			start = 0; 
			pushbtn_int_flag = 0; 
 990:	03a03000 	moveq	r3, #0
 994:	05843000 	streq	r3, [r4]

	while (1) {
		if (pushbtn_int_flag == 1) {
			start = 1;
			pushbtn_int_flag = 0; 
		} else if (pushbtn_int_flag == 2) {
 998:	0a00004b 	beq	acc <main+0x1ec>
			start = 0; 
			pushbtn_int_flag = 0; 
		} else if (pushbtn_int_flag == 4) {
 99c:	e5943000 	ldr	r3, [r4]
 9a0:	e3530004 	cmp	r3, #4
 9a4:	1a000005 	bne	9c0 <main+0xe0>
			start = 0; 
			count = 0; 
			HEX_write_ASM(HEX0 | HEX1 | HEX2 | HEX3 | HEX4 | HEX5, 0);
 9a8:	e3a0003f 	mov	r0, #63	; 0x3f
 9ac:	e3a01000 	mov	r1, #0
 9b0:	ebfffe33 	bl	284 <HEX_write_ASM>
			pushbtn_int_flag = 0; 
 9b4:	e3a05000 	mov	r5, #0
 9b8:	e5845000 	str	r5, [r4]
 9bc:	ea000042 	b	acc <main+0x1ec>
		}
		if (start && hps_tim0_int_flag) {
 9c0:	e3580000 	cmp	r8, #0
 9c4:	0affffe9 	beq	970 <main+0x90>
 9c8:	e3003860 	movw	r3, #2144	; 0x860
 9cc:	e3403000 	movt	r3, #0
 9d0:	e5933000 	ldr	r3, [r3]
 9d4:	e3530000 	cmp	r3, #0
 9d8:	0affffe4 	beq	970 <main+0x90>
			hps_tim0_int_flag = 0; 
 9dc:	e3003860 	movw	r3, #2144	; 0x860
 9e0:	e3403000 	movt	r3, #0
 9e4:	e3a02000 	mov	r2, #0
 9e8:	e5832000 	str	r2, [r3]
			if (++count == 366099) count = 0; 
 9ec:	e2855001 	add	r5, r5, #1
 9f0:	e3093613 	movw	r3, #38419	; 0x9613
 9f4:	e3403005 	movt	r3, #5
 9f8:	e1550003 	cmp	r5, r3
 9fc:	01a05002 	moveq	r5, r2
			HEX_write_ASM(HEX0, count % 10); 
 a00:	e0872596 	umull	r2, r7, r6, r5
 a04:	e1a071a7 	lsr	r7, r7, #3
 a08:	e0871107 	add	r1, r7, r7, lsl #2
 a0c:	e0451081 	sub	r1, r5, r1, lsl #1
 a10:	e3a00001 	mov	r0, #1
 a14:	e6ef1071 	uxtb	r1, r1
 a18:	ebfffe19 	bl	284 <HEX_write_ASM>
			HEX_write_ASM(HEX1, (count / 10) % 10); 
 a1c:	e0831796 	umull	r1, r3, r6, r7
 a20:	e1a031a3 	lsr	r3, r3, #3
 a24:	e0833103 	add	r3, r3, r3, lsl #2
 a28:	e0471083 	sub	r1, r7, r3, lsl #1
 a2c:	e3a00002 	mov	r0, #2
 a30:	e6ef1071 	uxtb	r1, r1
 a34:	ebfffe12 	bl	284 <HEX_write_ASM>
			HEX_write_ASM(HEX2, (count / 100) % 10); 
 a38:	e087259b 	umull	r2, r7, r11, r5
 a3c:	e1a072a7 	lsr	r7, r7, #5
 a40:	e0831796 	umull	r1, r3, r6, r7
 a44:	e1a031a3 	lsr	r3, r3, #3
 a48:	e0833103 	add	r3, r3, r3, lsl #2
 a4c:	e0471083 	sub	r1, r7, r3, lsl #1
 a50:	e3a00004 	mov	r0, #4
 a54:	e6ef1071 	uxtb	r1, r1
 a58:	ebfffe09 	bl	284 <HEX_write_ASM>
			HEX_write_ASM(HEX3, ((count / 100) % 60) / 10);
 a5c:	e0832799 	umull	r2, r3, r9, r7
 a60:	e1a032a3 	lsr	r3, r3, #5
 a64:	e0633203 	rsb	r3, r3, r3, lsl #4
 a68:	e0477103 	sub	r7, r7, r3, lsl #2
 a6c:	e0813796 	umull	r3, r1, r6, r7
 a70:	e3a00008 	mov	r0, #8
 a74:	e7e711d1 	ubfx	r1, r1, #3, #8
 a78:	ebfffe01 	bl	284 <HEX_write_ASM>
			HEX_write_ASM(HEX4, ((count / 100) / 60) % 10);
 a7c:	e083159a 	umull	r1, r3, r10, r5
 a80:	e1a033a3 	lsr	r3, r3, #7
 a84:	e0821396 	umull	r1, r2, r6, r3
 a88:	e1a021a2 	lsr	r2, r2, #3
 a8c:	e0822102 	add	r2, r2, r2, lsl #2
 a90:	e0431082 	sub	r1, r3, r2, lsl #1
 a94:	e3a00010 	mov	r0, #16
 a98:	e6ef1071 	uxtb	r1, r1
 a9c:	ebfffdf8 	bl	284 <HEX_write_ASM>
			HEX_write_ASM(HEX5, ((count / 100) / 60) / 10 % 10);
 aa0:	e59d2004 	ldr	r2, [sp, #4]
 aa4:	e0832592 	umull	r2, r3, r2, r5
 aa8:	e1a03723 	lsr	r3, r3, #14
 aac:	e0821396 	umull	r1, r2, r6, r3
 ab0:	e1a021a2 	lsr	r2, r2, #3
 ab4:	e0822102 	add	r2, r2, r2, lsl #2
 ab8:	e0431082 	sub	r1, r3, r2, lsl #1
 abc:	e3a00020 	mov	r0, #32
 ac0:	e6ef1071 	uxtb	r1, r1
 ac4:	ebfffdee 	bl	284 <HEX_write_ASM>
 ac8:	eaffffa8 	b	970 <main+0x90>
#include "./drivers/inc/ISRs.h"
#include "./drivers/inc/pushbuttons.h"
#include "./drivers/inc/HEX_displays.h"
#include "./drivers/inc/HPS_TIM.h"

int main() {
 acc:	e3a08000 	mov	r8, #0
 ad0:	eaffffa6 	b	970 <main+0x90>

00000ad4 <atexit>:
 ad4:	e1a01000 	mov	r1, r0
 ad8:	e3a00000 	mov	r0, #0
 adc:	e92d4008 	push	{r3, lr}
 ae0:	e1a02000 	mov	r2, r0
 ae4:	e1a03000 	mov	r3, r0
 ae8:	eb00000e 	bl	b28 <__register_exitproc>
 aec:	e8bd4008 	pop	{r3, lr}
 af0:	e12fff1e 	bx	lr

00000af4 <exit>:
 af4:	e92d4008 	push	{r3, lr}
 af8:	e3a01000 	mov	r1, #0
 afc:	e1a04000 	mov	r4, r0
 b00:	eb000045 	bl	c1c <__call_exitprocs>
 b04:	e59f3018 	ldr	r3, [pc, #24]	; b24 <exit+0x30>
 b08:	e5930000 	ldr	r0, [r3]
 b0c:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 b10:	e3530000 	cmp	r3, #0
 b14:	11a0e00f 	movne	lr, pc
 b18:	112fff13 	bxne	r3
 b1c:	e1a00004 	mov	r0, r4
 b20:	eb0000c9 	bl	e4c <_exit>
 b24:	00000efc 	.word	0x00000efc

00000b28 <__register_exitproc>:
 b28:	e59fc0e4 	ldr	r12, [pc, #228]	; c14 <__register_exitproc+0xec>
 b2c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 b30:	e59c4000 	ldr	r4, [r12]
 b34:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 b38:	e35c0000 	cmp	r12, #0
 b3c:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 b40:	e59c5004 	ldr	r5, [r12, #4]
 b44:	0584c148 	streq	r12, [r4, #328]	; 0x148
 b48:	e355001f 	cmp	r5, #31
 b4c:	e24dd010 	sub	sp, sp, #16
 b50:	e1a06000 	mov	r6, r0
 b54:	da000015 	ble	bb0 <__register_exitproc+0x88>
 b58:	e59f00b8 	ldr	r0, [pc, #184]	; c18 <__register_exitproc+0xf0>
 b5c:	e3500000 	cmp	r0, #0
 b60:	1a000001 	bne	b6c <__register_exitproc+0x44>
 b64:	e3e00000 	mvn	r0, #0
 b68:	ea000018 	b	bd0 <__register_exitproc+0xa8>
 b6c:	e3a00e19 	mov	r0, #400	; 0x190
 b70:	e58d100c 	str	r1, [sp, #12]
 b74:	e58d2008 	str	r2, [sp, #8]
 b78:	e58d3004 	str	r3, [sp, #4]
 b7c:	e320f000 	nop	{0}
 b80:	e250c000 	subs	r12, r0, #0
 b84:	e59d100c 	ldr	r1, [sp, #12]
 b88:	e59d2008 	ldr	r2, [sp, #8]
 b8c:	e59d3004 	ldr	r3, [sp, #4]
 b90:	0afffff3 	beq	b64 <__register_exitproc+0x3c>
 b94:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 b98:	e3a00000 	mov	r0, #0
 b9c:	e58c0004 	str	r0, [r12, #4]
 ba0:	e58c5000 	str	r5, [r12]
 ba4:	e584c148 	str	r12, [r4, #328]	; 0x148
 ba8:	e58c0188 	str	r0, [r12, #392]	; 0x188
 bac:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 bb0:	e3560000 	cmp	r6, #0
 bb4:	e59c4004 	ldr	r4, [r12, #4]
 bb8:	1a000007 	bne	bdc <__register_exitproc+0xb4>
 bbc:	e2843002 	add	r3, r4, #2
 bc0:	e2844001 	add	r4, r4, #1
 bc4:	e78c1103 	str	r1, [r12, r3, lsl #2]
 bc8:	e58c4004 	str	r4, [r12, #4]
 bcc:	e3a00000 	mov	r0, #0
 bd0:	e28dd010 	add	sp, sp, #16
 bd4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 bd8:	e12fff1e 	bx	lr
 bdc:	e3a00001 	mov	r0, #1
 be0:	e1a00410 	lsl	r0, r0, r4
 be4:	e08c8104 	add	r8, r12, r4, lsl #2
 be8:	e3560002 	cmp	r6, #2
 bec:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 bf0:	e5883108 	str	r3, [r8, #264]	; 0x108
 bf4:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 bf8:	e1877000 	orr	r7, r7, r0
 bfc:	01830000 	orreq	r0, r3, r0
 c00:	e1a05008 	mov	r5, r8
 c04:	e5882088 	str	r2, [r8, #136]	; 0x88
 c08:	e58c7188 	str	r7, [r12, #392]	; 0x188
 c0c:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 c10:	eaffffe9 	b	bbc <__register_exitproc+0x94>
 c14:	00000efc 	.word	0x00000efc
 c18:	00000000 	.word	0x00000000

00000c1c <__call_exitprocs>:
 c1c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 c20:	e59f3168 	ldr	r3, [pc, #360]	; d90 <__call_exitprocs+0x174>
 c24:	e5933000 	ldr	r3, [r3]
 c28:	e24dd014 	sub	sp, sp, #20
 c2c:	e58d3004 	str	r3, [sp, #4]
 c30:	e2833f52 	add	r3, r3, #328	; 0x148
 c34:	e58d0008 	str	r0, [sp, #8]
 c38:	e58d300c 	str	r3, [sp, #12]
 c3c:	e1a07001 	mov	r7, r1
 c40:	e3a08001 	mov	r8, #1
 c44:	e59d3004 	ldr	r3, [sp, #4]
 c48:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 c4c:	e3560000 	cmp	r6, #0
 c50:	e59db00c 	ldr	r11, [sp, #12]
 c54:	0a000033 	beq	d28 <__call_exitprocs+0x10c>
 c58:	e5965004 	ldr	r5, [r6, #4]
 c5c:	e2554001 	subs	r4, r5, #1
 c60:	5286a088 	addpl	r10, r6, #136	; 0x88
 c64:	5285501f 	addpl	r5, r5, #31
 c68:	508a5105 	addpl	r5, r10, r5, lsl #2
 c6c:	5a000007 	bpl	c90 <__call_exitprocs+0x74>
 c70:	ea000029 	b	d1c <__call_exitprocs+0x100>
 c74:	e5953000 	ldr	r3, [r5]
 c78:	e1530007 	cmp	r3, r7
 c7c:	0a000005 	beq	c98 <__call_exitprocs+0x7c>
 c80:	e2444001 	sub	r4, r4, #1
 c84:	e3740001 	cmn	r4, #1
 c88:	e2455004 	sub	r5, r5, #4
 c8c:	0a000022 	beq	d1c <__call_exitprocs+0x100>
 c90:	e3570000 	cmp	r7, #0
 c94:	1afffff6 	bne	c74 <__call_exitprocs+0x58>
 c98:	e5963004 	ldr	r3, [r6, #4]
 c9c:	e06a2005 	rsb	r2, r10, r5
 ca0:	e2433001 	sub	r3, r3, #1
 ca4:	e0862002 	add	r2, r6, r2
 ca8:	e1530004 	cmp	r3, r4
 cac:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 cb0:	13a01000 	movne	r1, #0
 cb4:	05864004 	streq	r4, [r6, #4]
 cb8:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 cbc:	e3530000 	cmp	r3, #0
 cc0:	0affffee 	beq	c80 <__call_exitprocs+0x64>
 cc4:	e1a02418 	lsl	r2, r8, r4
 cc8:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 ccc:	e1120001 	tst	r2, r1
 cd0:	e5969004 	ldr	r9, [r6, #4]
 cd4:	0a000016 	beq	d34 <__call_exitprocs+0x118>
 cd8:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 cdc:	e1120001 	tst	r2, r1
 ce0:	1a000016 	bne	d40 <__call_exitprocs+0x124>
 ce4:	e59d0008 	ldr	r0, [sp, #8]
 ce8:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 cec:	e1a0e00f 	mov	lr, pc
 cf0:	e12fff13 	bx	r3
 cf4:	e5963004 	ldr	r3, [r6, #4]
 cf8:	e1530009 	cmp	r3, r9
 cfc:	1affffd0 	bne	c44 <__call_exitprocs+0x28>
 d00:	e59b3000 	ldr	r3, [r11]
 d04:	e1530006 	cmp	r3, r6
 d08:	1affffcd 	bne	c44 <__call_exitprocs+0x28>
 d0c:	e2444001 	sub	r4, r4, #1
 d10:	e3740001 	cmn	r4, #1
 d14:	e2455004 	sub	r5, r5, #4
 d18:	1affffdc 	bne	c90 <__call_exitprocs+0x74>
 d1c:	e59f1070 	ldr	r1, [pc, #112]	; d94 <__call_exitprocs+0x178>
 d20:	e3510000 	cmp	r1, #0
 d24:	1a000009 	bne	d50 <__call_exitprocs+0x134>
 d28:	e28dd014 	add	sp, sp, #20
 d2c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 d30:	e12fff1e 	bx	lr
 d34:	e1a0e00f 	mov	lr, pc
 d38:	e12fff13 	bx	r3
 d3c:	eaffffec 	b	cf4 <__call_exitprocs+0xd8>
 d40:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 d44:	e1a0e00f 	mov	lr, pc
 d48:	e12fff13 	bx	r3
 d4c:	eaffffe8 	b	cf4 <__call_exitprocs+0xd8>
 d50:	e5963004 	ldr	r3, [r6, #4]
 d54:	e3530000 	cmp	r3, #0
 d58:	e5963000 	ldr	r3, [r6]
 d5c:	1a000008 	bne	d84 <__call_exitprocs+0x168>
 d60:	e3530000 	cmp	r3, #0
 d64:	0a000006 	beq	d84 <__call_exitprocs+0x168>
 d68:	e1a00006 	mov	r0, r6
 d6c:	e58b3000 	str	r3, [r11]
 d70:	e320f000 	nop	{0}
 d74:	e59b6000 	ldr	r6, [r11]
 d78:	e3560000 	cmp	r6, #0
 d7c:	1affffb5 	bne	c58 <__call_exitprocs+0x3c>
 d80:	eaffffe8 	b	d28 <__call_exitprocs+0x10c>
 d84:	e1a0b006 	mov	r11, r6
 d88:	e1a06003 	mov	r6, r3
 d8c:	eafffff9 	b	d78 <__call_exitprocs+0x15c>
 d90:	00000efc 	.word	0x00000efc
 d94:	00000000 	.word	0x00000000

00000d98 <register_fini>:
 d98:	e92d4008 	push	{r3, lr}
 d9c:	e59f3010 	ldr	r3, [pc, #16]	; db4 <register_fini+0x1c>
 da0:	e3530000 	cmp	r3, #0
 da4:	159f000c 	ldrne	r0, [pc, #12]	; db8 <register_fini+0x20>
 da8:	1bffff49 	blne	ad4 <atexit>
 dac:	e8bd4008 	pop	{r3, lr}
 db0:	e12fff1e 	bx	lr
 db4:	00000f24 	.word	0x00000f24
 db8:	00000dbc 	.word	0x00000dbc

00000dbc <__libc_fini_array>:
 dbc:	e92d4038 	push	{r3, r4, r5, lr}
 dc0:	e59f5030 	ldr	r5, [pc, #48]	; df8 <__libc_fini_array+0x3c>
 dc4:	e59f4030 	ldr	r4, [pc, #48]	; dfc <__libc_fini_array+0x40>
 dc8:	e0654004 	rsb	r4, r5, r4
 dcc:	e1b04144 	asrs	r4, r4, #2
 dd0:	10855104 	addne	r5, r5, r4, lsl #2
 dd4:	0a000004 	beq	dec <__libc_fini_array+0x30>
 dd8:	e5353004 	ldr	r3, [r5, #-4]!
 ddc:	e1a0e00f 	mov	lr, pc
 de0:	e12fff13 	bx	r3
 de4:	e2544001 	subs	r4, r4, #1
 de8:	1afffffa 	bne	dd8 <__libc_fini_array+0x1c>
 dec:	eb00004c 	bl	f24 <__libc_fini>
 df0:	e8bd4038 	pop	{r3, r4, r5, lr}
 df4:	e12fff1e 	bx	lr
 df8:	00000f3c 	.word	0x00000f3c
 dfc:	00000f40 	.word	0x00000f40

00000e00 <__cs3_premain>:
 e00:	e92d4008 	push	{r3, lr}
 e04:	eb000017 	bl	e68 <__libc_init_array>
 e08:	e59f3030 	ldr	r3, [pc, #48]	; e40 <__cs3_premain+0x40>
 e0c:	e3530000 	cmp	r3, #0
 e10:	15930000 	ldrne	r0, [r3]
 e14:	01a00003 	moveq	r0, r3
 e18:	e59f3024 	ldr	r3, [pc, #36]	; e44 <__cs3_premain+0x44>
 e1c:	e3530000 	cmp	r3, #0
 e20:	15931000 	ldrne	r1, [r3]
 e24:	01a01003 	moveq	r1, r3
 e28:	e3a02000 	mov	r2, #0
 e2c:	ebfffeab 	bl	8e0 <main>
 e30:	e59f3010 	ldr	r3, [pc, #16]	; e48 <__cs3_premain+0x48>
 e34:	e3530000 	cmp	r3, #0
 e38:	1bffff2d 	blne	af4 <exit>
 e3c:	eafffffe 	b	e3c <__cs3_premain+0x3c>
	...
 e48:	00000af4 	.word	0x00000af4

00000e4c <_exit>:
 e4c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 e50:	e3a00018 	mov	r0, #24
 e54:	e59f1004 	ldr	r1, [pc, #4]	; e60 <_exit+0x14>
 e58:	ef123456 	svc	0x00123456
 e5c:	eafffffe 	b	e5c <_exit+0x10>
 e60:	00020026 	.word	0x00020026

00000e64 <__cs3_isr_interrupt>:
 e64:	eafffffe 	b	e64 <__cs3_isr_interrupt>

00000e68 <__libc_init_array>:
 e68:	e92d4070 	push	{r4, r5, r6, lr}
 e6c:	e59f506c 	ldr	r5, [pc, #108]	; ee0 <__libc_init_array+0x78>
 e70:	e59f606c 	ldr	r6, [pc, #108]	; ee4 <__libc_init_array+0x7c>
 e74:	e0656006 	rsb	r6, r5, r6
 e78:	e1b06146 	asrs	r6, r6, #2
 e7c:	12455004 	subne	r5, r5, #4
 e80:	13a04000 	movne	r4, #0
 e84:	0a000005 	beq	ea0 <__libc_init_array+0x38>
 e88:	e5b53004 	ldr	r3, [r5, #4]!
 e8c:	e2844001 	add	r4, r4, #1
 e90:	e1a0e00f 	mov	lr, pc
 e94:	e12fff13 	bx	r3
 e98:	e1560004 	cmp	r6, r4
 e9c:	1afffff9 	bne	e88 <__libc_init_array+0x20>
 ea0:	e59f5040 	ldr	r5, [pc, #64]	; ee8 <__libc_init_array+0x80>
 ea4:	e59f6040 	ldr	r6, [pc, #64]	; eec <__libc_init_array+0x84>
 ea8:	e0656006 	rsb	r6, r5, r6
 eac:	eb000014 	bl	f04 <_init>
 eb0:	e1b06146 	asrs	r6, r6, #2
 eb4:	12455004 	subne	r5, r5, #4
 eb8:	13a04000 	movne	r4, #0
 ebc:	0a000005 	beq	ed8 <__libc_init_array+0x70>
 ec0:	e5b53004 	ldr	r3, [r5, #4]!
 ec4:	e2844001 	add	r4, r4, #1
 ec8:	e1a0e00f 	mov	lr, pc
 ecc:	e12fff13 	bx	r3
 ed0:	e1560004 	cmp	r6, r4
 ed4:	1afffff9 	bne	ec0 <__libc_init_array+0x58>
 ed8:	e8bd4070 	pop	{r4, r5, r6, lr}
 edc:	e12fff1e 	bx	lr
 ee0:	00000f1c 	.word	0x00000f1c
 ee4:	00000f1c 	.word	0x00000f1c
 ee8:	00000f1c 	.word	0x00000f1c
 eec:	00000f24 	.word	0x00000f24

Disassembly of section .rodata:

00000ef4 <_global_impure_ptr-0x8>:
 ef4:	00000049 	.word	0x00000049
 ef8:	000000c7 	.word	0x000000c7

00000efc <_global_impure_ptr>:
 efc:	00000f68 00000043                       h...C...

00000f04 <_init>:
 f04:	e1a0c00d 	mov	r12, sp
 f08:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 f0c:	e24cb004 	sub	r11, r12, #4
 f10:	e24bd028 	sub	sp, r11, #40	; 0x28
 f14:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 f18:	e12fff1e 	bx	lr

00000f1c <__init_array_start>:
 f1c:	00000d98 	.word	0x00000d98

00000f20 <__frame_dummy_init_array_entry>:
 f20:	00000208                                ....

00000f24 <__libc_fini>:
 f24:	e1a0c00d 	mov	r12, sp
 f28:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 f2c:	e24cb004 	sub	r11, r12, #4
 f30:	e24bd028 	sub	sp, r11, #40	; 0x28
 f34:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 f38:	e12fff1e 	bx	lr

00000f3c <__fini_array_start>:
 f3c:	000001c4 	.word	0x000001c4

00000f40 <__cs3_regions>:
 f40:	00000000 	.word	0x00000000
 f44:	00000040 	.word	0x00000040
 f48:	00000040 	.word	0x00000040
 f4c:	00001358 	.word	0x00001358
 f50:	00000020 	.word	0x00000020

00000f54 <__cs3_regions_end>:
 f54:	00000000 	.word	0x00000000
